title: async pipe
url: async-pipe
entries:
  - type: text
    text: >
      Unwraps a value from an asynchronous primitive.


      The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has emitted. When a new value is emitted, the `async` pipe marks the component to be checked for changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid potential memory leaks.
  - type: demo
    source: |-
      ```html
      <code>observable|async</code>
      Time: {{ time | async }}
      ```

      ```typescript
      export class AppComponent {
        time = new Observable<string>((observer: Observer<string>) => {
          setInterval(() => observer.next(new Date().toString()), 1000);
        });
      }
      ```
    demo: V6TemplatesAsyncpipeDemoComponent
  - type: tutorials
    links:
      - label: Handling Observables with NgIf and the Async Pipe
        url: https://toddmotto.com/angular-ngif-async-pipe
        lang: en
      - label: Three things you didn't know about the AsyncPipe
        url: https://blog.thoughtram.io/angular/2017/02/27/three-things-you-didnt-know-about-the-async-pipe.html
        lang: en
