title: CanActivate interface
url: canactivate-interface
entries:
  - type: text
    text: Interface that a class can implement to be a guard deciding if a route can
      be activated.
  - type: text
    text: |-
      ```typescript
      interface CanActivate {
        canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):
          Observable<boolean|UrlTree>|Promise<boolean|UrlTree>|boolean|UrlTree;
      }
      ```
  - type: tutorials
    links:
      - lang: en
        label: "New in Angular 7.1: Router Updates â€” Perform Navigation/Redirects from
          Guards by returning a UrlTree"
        url: https://blog.angularindepth.com/new-in-angular-v7-1-updates-to-the-router-fd67d526ad05
      - lang: en
        label: Better Redirects in Angular Route Guards
        url: https://juristr.com/blog/2018/11/better-route-guard-redirects/
  - type: text
    text: |
      #### Example
  - type: text
    text: >-
      ```typescript

      class UserToken {}

      class Permissions {
        canActivate(user: UserToken, id: string): boolean {
          return true;
        }
      }
       
      @Injectable()

      class CanActivateTeam implements CanActivate {
        constructor(private permissions: Permissions, private currentUser: UserToken) {}
       
        canActivate(
          route: ActivatedRouteSnapshot,
          state: RouterStateSnapshot
        ): Observable<boolean>|Promise<boolean>|boolean {
          return this.permissions.canActivate(this.currentUser, route.params.id);
        }
      }
       
      @NgModule({
        imports: [
          RouterModule.forRoot([
            {
              path: 'team/:id',
              component: TeamCmp,
              canActivate: [CanActivateTeam]
            }
          ])
        ],
        providers: [CanActivateTeam, UserToken, Permissions]
      })

      class AppModule {}

      ```
  - type: text
    text: "You can alternatively provide a function with the `canActivate`
      signature:"
  - type: text
    text: >-
      ```typescript

      @NgModule({
        imports: [
          RouterModule.forRoot([
            {
              path: 'team/:id',
              component: TeamCmp,
              canActivate: ['canActivateTeam']
            }
          ])
        ],
        providers: [
          {
            provide: 'canActivateTeam',
            useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true
          }
        ]
      })

      class AppModule {}

      ```
