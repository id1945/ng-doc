title: |
  NavigationExtras
url: navigationextras
entries:
  - type: text
    text: |
      Represents the extra options used during navigation.
  - type: text
    text: "## Properties"
  - type: toc
  - type: interface-option
    name: fragment
    head: fragment
    headId: fragment
    interface: "fragment?: string"
    description: Sets the hash fragment for the URL.
    showAdditional: true
    additional: |-
      ```
      // Navigate to /results#top
      this.router.navigate(['/results'], { fragment: 'top' });
      ```
  - type: interface-option
    name: preserveFragment
    head: preserveFragment
    headId: preserveFragment
    interface: "preserveFragment?: boolean"
    description: Preserves the fragment for the next navigation.
    showAdditional: true
    additional: |-
      ```
      // Preserve fragment from /results#top to /view#top
      this.router.navigate(['/view'], { preserveFragment: true });
      ```
  - type: interface-option
    name: preserveQueryParams
    head: preserveQueryParams
    headId: preserveQueryParams
    interface: "preserveQueryParams?: boolean"
    description: |-
      Preserves the query parameters for the next navigation.

      Deprecated, use `queryParamsHandling` instead.
  - type: interface-option
    name: queryParams
    head: queryParams
    headId: queryParams
    interface: "queryParams?: Params|null"
    description: |
      Sets query parameters to the URL.
    showAdditional: true
    additional: |-
      ```
      // Navigate to /results?page=1
      this.router.navigate(['/results'], { queryParams: { page: 1 } });
      ```
  - type: interface-option
    name: queryParamsHandling
    head: queryParamsHandling
    headId: queryParamsHandling
    interface: "queryParamsHandling?: QueryParamsHandling|null"
    description: |
      Config strategy to handle the query parameters for the next navigation.
    showAdditional: true
    additional: >-
      ```

      // from /results?page=1 to /view?page=1&page=2

      this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: "merge" });

      ```
  - type: interface-option
    name: relativeTo
    head: relativeTo
    headId: relativeTo
    interface: "relativeTo?: ActivatedRoute|null"
    description: |
      Enables relative navigation from the current ActivatedRoute.
    showAdditional: true
    additional: |-
      
      Configuration:

      ```
      [{
        path: 'parent',
        component: ParentComponent,
        children: [{
          path: 'list',
          component: ListComponent
        },{
          path: 'child',
          component: ChildComponent
        }]
      }]
      ```

      Navigate to list route from child route:

      ```
       @Component({...})
       class ChildComponent {
        constructor(private router: Router, private route: ActivatedRoute) {}

        go() {
          this.router.navigate(['../list'], { relativeTo: this.route });
        }
      }
      ```
  - type: interface-option
    name: replaceUrl
    head: replaceUrl
    headId: replaceUrl
    interface: "replaceUrl?: boolean"
    description: |
      Navigates while replacing the current state in history.
    showAdditional: true
    additional: |-
      ```
      // Navigate to /view
      this.router.navigate(['/view'], { replaceUrl: true });
      ```
  - type: interface-option
    name: skipLocationChange
    head: skipLocationChange
    headId: skipLocationChange
    interface: "skipLocationChange?: boolean"
    description: |
      Navigates without pushing a new state into history.
    showAdditional: true
    additional: |-
      ```
      // Navigate silently to /view
      this.router.navigate(['/view'], { skipLocationChange: true });
      ```
  - type: interface-option
    name: state
    head: state
    headId: state
    interface: "state?: {[k: string]: any}"
    description: State passed to any navigation.
    showAdditional: true
    additional: >-
      This value will be accessible through the `extras` object

      returned from `router.getCurrentNavigation()` while a navigation is executing. Once a

      navigation completes, this value will be written to `history.state` when the `location.go`

      or `location.replaceState` method is called before activating of this route. Note that

      `history.state` will not pass an object equality test because the `navigationId` will be

      added to the state before being written.


      While `history.state` can accept any type of value, because the router adds the `navigationId`

      on each navigation, the `state` must always be an object.
