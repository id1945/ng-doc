title: |
  ChangeDetectorRef
url: change-detector-ref
entries:
  - type: text
    text: >-
      Base class for Angular Views, provides change detection functionality.

      A change-detection tree collects all views that are to be checked for changes.

      Use the methods to add and remove views from the tree, initiate change-detection,

      and explicitly mark views as `_dirty_`, meaning that they have changed and need to be rerendered.
  - type: text
    text: "#### Example"
  - type: text
    text: |-
      Manual change detection run:

      ```typescript
      export class MyComponent {
        constructor(private cdr: ChangeDetectorRef) {
        }

        runManual() {
          this.cdr.detectChanges();
        }
      }
      ```
  - type: tutorials
    links:
      - label: Understanding Change Detection Strategy in Angular
        url: https://alligator.io/angular/change-detection-strategy/
        lang: en
      - label: Everything you need to know about change detection in Angular
        url: https://blog.angularindepth.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f
        lang: en
  - type: text
    text: "## Methods"
  - type: toc
  - type: interface-option
    head: checkNoChanges
    description: >-
      Checks the change detector and its children, and throws if any changes are
      detected.


      Use in development mode to verify that running change detection doesn't introduce

      other changes.
    name: checkNoChanges
    headId: checkNoChanges
    interface: "checkNoChanges(): void"
    showAdditional: true
    additional: Use in development mode to verify that running change detection
      doesn't introduce other changes.
  - type: interface-option
    head: detach
    description: >-
      Detaches this view from the change-detection tree.

      A detached view is  not checked until it is reattached.

      Use in combination with `detectChanges()` to implement local change detection checks.


      Detached views are not checked during change detection runs until they are

      re-attached, even if they are marked as dirty.


      <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->

      <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
    name: detach
    headId: detach
    interface: "detach(): void"
    showAdditional: true
    additional: Detached views are not checked during change detection runs until
      they are re-attached, even if they are marked as dirty.
  - type: interface-option
    head: detectChanges
    description: >-
      Checks this view and its children. Use in combination with {@link
      ChangeDetectorRef#detach

      detach}

      to implement local change detection checks.


      <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->

      <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
    name: detectChanges
    headId: detectChanges
    interface: "detectChanges(): void"
  - type: interface-option
    head: markForCheck
    description: >-
      When a view uses the {@link ChangeDetectionStrategy#OnPush OnPush}
      (checkOnce)

      change detection strategy, explicitly marks the view as changed so that

      it can be checked again.


      Components are normally marked as dirty (in need of rerendering) when inputs

      have changed or events have fired in the view. Call this method to ensure that

      a component is checked even if these triggers have not occured.


      <!-- TODO: Add a link to a chapter on OnPush components -->
    name: markForCheck
    headId: markForCheck
    interface: "markForCheck(): void"
    showAdditional: true
    additional: Components are normally marked as dirty (in need of rerendering)
      when inputs have changed or events have fired in the view. Call this
      method to ensure that a component is checked even if these triggers have
      not occured.
  - type: interface-option
    head: reattach
    description: |-
      Re-attaches the previously detached view to the change detection tree.
      Views are attached to the tree by default.

      <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
    name: reattach
    headId: reattach
    interface: "reattach(): void"
