title: "@Directive"
url: directive
entries:
  - type: text
    text: Marks a class as an Angular directive. You can define your own directives
      to attach custom behavior to elements in the DOM. The options provide
      configuration metadata that determines how the directive should be
      processed, instantiated and used at runtime.
  - type: text
    text: >-
      #### Example


      To define a directive, mark the class with the decorator and provide metadata.


      ```typescript

      import {Directive} from '@angular/core';


      @Directive({
        selector: 'my-directive',
      })

      export class MyDirective {

      ...

      }

      ```
  - type: text
    text: >-
      #### Declaring directives


      Directives are declarables. 


      They must be declared by an `NgModule` in order to be usable in an app. A directive must belong to exactly one `NgModule`.


      ```typescript

      declarations: [
       AppComponent,
       MyDirective
      ],

      ```
  - type: text
    text: "## Options"
  - type: toc
  - type: interface-option
    head: exportAs
    description: The name or names that can be used in the template to assign this
      directive to a variable. For multiple names, use a comma-separated string.
    name: exportAs
    headId: exportAs
    interface: "exportAs?: string"
  - type: interface-option
    head: host
    description: Maps class properties to host element bindings for properties,
      attributes, and events, using a set of key-value pairs.
    name: host
    headId: host
    interface: "host?: {[key: string]: string}"
    showAdditional: true
    additional: >-
      Angular automatically checks host property bindings during change
      detection.

      If a binding changes, Angular updates the directive's host element.


      When the key is a property of the host element, the property value is

      the propagated to the specified DOM property.


      When the key is a static attribute in the DOM, the attribute value

      is propagated to the specified property in the host element.


      For event handling:

      - The key is the DOM event that the directive listens to.

      To listen to global events, add the target to the event name.

      The target can be `window`, `document` or `body`.

      - The value is the statement to execute when the event occurs. If the

      statement evalueates to `false`, then `preventDefault` is applied on the DOM

      event. A handler method can refer to the `$event` local variable.
  - type: interface-option
    head: inputs
    description: Enumerates the set of data-bound input properties for a directive.
    name: inputs
    headId: inputs
    interface: "inputs?: string[]"
    showAdditional: true
    additional: >-
      Angular automatically updates input properties during change detection.

      The `inputs` property defines a set of `directiveProperty` to `bindingProperty`

      configuration:


      - `directiveProperty` specifies the component property where the value is written.

      - `bindingProperty` specifies the DOM property where the value is read from.


      When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.

      @usageNotes


      #### Example


      The following example creates a component with two data-bound properties.


      ```typescript

      @Component({
        selector: 'bank-account',
        inputs: ['bankName', 'id: account-id'],
        template: `
          Bank Name: {{bankName}}
          Account Id: {{id}}
        `
      })

      class BankAccount {
        bankName: string;
        id: string;

      ```
  - type: interface-option
    head: jit
    description: If true, this directive/component will be skipped by the AOT
      compiler and so will always be compiled using JIT.
    name: jit
    headId: jit
    interface: "jit?: true"
    showAdditional: true
    additional: This exists to support future Ivy work and has no effect currently.
  - type: interface-option
    head: outputs
    description: |-
      The set of event-bound output properties.
      When an output property emits an event, an event handler attached
      to that event in the template is invoked.
    name: outputs
    headId: outputs
    interface: "outputs?: string[]"
    showAdditional: true
    additional: >-
      Each output property maps a `directiveProperty` to a `bindingProperty`:

      - `directiveProperty` specifies the component property that emits events.

      - `bindingProperty` specifies the HTML attribute the event handler is attached to.
  - type: interface-option
    head: providers
    description: Configures the injector of this directive or component with a token
      that maps to a provider of a dependency.
    name: providers
    headId: providers
    interface: "providers?: Provider[]"
  - type: interface-option
    head: queries
    description: Configures the queries that will be injected into the directive.
    name: queries
    headId: queries
    interface: "queries?: {[key: string]: any}"
    showAdditional: true
    additional: >-
      Content queries are set before the `ngAfterContentInit` callback is
      called.

      View queries are set before the `ngAfterViewInit` callback is called.
  - type: interface-option
    head: selector
    description: |-
      The CSS selector that identifies this directive in a template
      and triggers instantiation of the directive.
    name: selector
    headId: selector
    interface: "selector?: string"
    showAdditional: true
    additional: >-
      Declare as one of the following:


      - `element-name`: Select by element name.

      - `.class`: Select by class name.

      - `[attribute]`: Select by attribute name.

      - `[attribute=value]`: Select by attribute name and value.

      - `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.

      - `selector1, selector2`: Select if either `selector1` or `selector2` matches.


      Angular only allows directives to apply on CSS selectors that do not cross

      element boundaries.


      For the following template HTML, a directive with an `input[type=text]` selector,

      would be instantiated only on the `<input type="text">` element.


      ```html

      <form>
        <input type="text">
        <input type="radio">
      <form>

      ```
