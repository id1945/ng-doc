title: DomSanitizer
url: dom-sanitizer
entries:
  - type: text
    text: DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by
      sanitizing values to be safe to use in the different DOM contexts.
  - type: text
    text: >
      For example, when binding a URL in an `<a [href]="someValue">` hyperlink,
      `someValue` will be sanitized so that an attacker cannot inject e.g. a
      `javascript:` URL that would execute code on the website.


      In specific situations, it might be necessary to disable sanitization, for example if the application genuinely needs to produce a `javascript:` style link with a dynamic value in it. Users can bypass security by constructing a value with one of the `bypassSecurityTrust...` methods, and then binding to that value from the template.


      These situations should be very rare, and extraordinary care must be taken to avoid creating a Cross Site Scripting (XSS) security bug!
  - type: text
    text: "#### Example"
  - type: text
    text: >-
      ```typescript

      export class MyComponent {
        html: SafeHtml;

        constructor(private sanitizer: DomSanitizer) {
          this.html = sanitizer.bypassSecurityTrustHtml('<h1>DomSanitizer</h1><script>ourSafeCode()</script>') ;
        }
      }

      ```
  - type: tutorials
    links:
      - label: Angular Security Guide
        url: https://angular.io/guide/security
        lang: en
      - label: Angular 2 Security — The DomSanitizer Service
        url: https://netbasal.com/angular-2-security-the-domsanitizer-service-2202c83bd90
        lang: en
  - type: toc
  - type: interface-option
    head: bypassSecurityTrustHtml
    description: >-
      Bypass security and trust the given value to be safe HTML. Only use this
      when the bound HTML

      is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will

      leave safe HTML intact, so in most situations this method should not be used.


      **WARNING:** calling this method with untrusted user data exposes your application to XSS

      security risks!
    name: bypassSecurityTrustHtml
    headId: bypassSecurityTrustHtml
    interface: "bypassSecurityTrustHtml(value: string): SafeHtml"
    showAdditional: true
    additional: "**WARNING:** calling this method with untrusted user data exposes
      your application to XSS security risks!"
  - type: interface-option
    head: bypassSecurityTrustResourceUrl
    description: >-
      Bypass security and trust the given value to be a safe resource URL, i.e.
      a location that may

      be used to load executable code from, like `<script src>`, or `<iframe src>`.


      **WARNING:** calling this method with untrusted user data exposes your application to XSS

      security risks!
    name: bypassSecurityTrustResourceUrl
    headId: bypassSecurityTrustResourceUrl
    interface: "bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl"
    showAdditional: true
    additional: "**WARNING:** calling this method with untrusted user data exposes
      your application to XSS security risks!"
  - type: interface-option
    head: bypassSecurityTrustScript
    description: >-
      Bypass security and trust the given value to be safe JavaScript.


      **WARNING:** calling this method with untrusted user data exposes your application to XSS

      security risks!
    name: bypassSecurityTrustScript
    headId: bypassSecurityTrustScript
    interface: "bypassSecurityTrustScript(value: string): SafeScript"
    showAdditional: true
    additional: "**WARNING:** calling this method with untrusted user data exposes
      your application to XSS security risks!"
  - type: interface-option
    head: bypassSecurityTrustStyle
    description: >-
      Bypass security and trust the given value to be safe style value (CSS).


      **WARNING:** calling this method with untrusted user data exposes your application to XSS

      security risks!
    name: bypassSecurityTrustStyle
    headId: bypassSecurityTrustStyle
    interface: "bypassSecurityTrustStyle(value: string): SafeStyle"
    showAdditional: true
    additional: "**WARNING:** calling this method with untrusted user data exposes
      your application to XSS security risks!"
  - type: interface-option
    head: bypassSecurityTrustUrl
    description: >-
      Bypass security and trust the given value to be a safe style URL, i.e. a
      value that can be used

      in hyperlinks or `<img src>`.


      **WARNING:** calling this method with untrusted user data exposes your application to XSS

      security risks!
    name: bypassSecurityTrustUrl
    headId: bypassSecurityTrustUrl
    interface: "bypassSecurityTrustUrl(value: string): SafeUrl"
    showAdditional: true
    additional: "**WARNING:** calling this method with untrusted user data exposes
      your application to XSS security risks!"
  - type: interface-option
    head: sanitize
    text: |
      sanitize() 
    description: >-
      Sanitizes a value for use in the given SecurityContext.


      If value is trusted for the context, this method will unwrap the contained safe value and use

      it directly. Otherwise, value will be sanitized to be safe in the given context, for example

      by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation

      is responsible to make sure that the value can definitely be safely used in the given context.
    name: sanitize
    headId: sanitize
    interface: "sanitize(context: SecurityContext, value: SafeValue|string|null):
      string|null"
    showAdditional: true
    additional: >
      If value is trusted for the context, this method will unwrap the contained
      safe value and use it directly. Otherwise, value will be sanitized to be
      safe in the given context, for example by replacing URLs that have an
      unsafe protocol part (such as `javascript:`). The implementation is
      responsible to make sure that the value can definitely be safely used in
      the given context.
