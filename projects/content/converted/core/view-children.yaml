title: "@ViewChildren"
url: view-children
entries:
  - type: text
    text: >-
      You can use `ViewChildren` to get the `QueryList` of elements or
      directives from the view DOM. Any time a child element is added, removed,
      or moved, the query list will be updated, and the changes observable of
      the query list will emit a new value.


      View queries are set before the `ngAfterViewInit` callback is called.
  - type: text
    text: "#### Example"
  - type: text
    text: >-
      ```typescript

      import {AfterViewInit, Component, Directive, QueryList, ViewChildren} from '@angular/core';
       
      @Directive({selector: 'child-directive'})

      class ChildDirective {

      }
       
      @Component({selector: 'someCmp', templateUrl: 'someCmp.html'})

      class SomeCmp implements AfterViewInit {
        @ViewChildren(ChildDirective) viewChildren: QueryList<ChildDirective>;
       
        ngAfterViewInit() {
          // viewChildren is set
        }
      }

      ```
  - type: tutorials
    links:
      - label: Understanding ViewChildren, ContentChildren, and QueryList in Angular
        url: https://netbasal.com/understanding-viewchildren-contentchildren-and-querylist-in-angular-896b0c689f6e
        lang: en
      - lang: en
        label: Hidden behavior of @ViewChidlren
        url: https://stackoverflow.com/a/49167289/2500707
  - type: text
    text: |
      ## Options
  - type: text
    text: |-
      ```typescript
      @ContentChildren(
        selector: Type<any>|Function|string, 
        opts?: {read?: any},
      )
      ```
  - type: interface-option
    head: selector
    description: The directive type or the name used for querying.
    interface: "selector: Type<any>|Function|string"
    name: selector
    headId: selector
    showAdditional: true
    additional: >-
      Supported selectors include:


      * any class with the `@Component` or `@Directive` decorator

      * a template reference variable as a string (e.g. query `<my-component #cmp></my-component>` with `@ViewChild('cmp')`)

      * any provider defined in the child component tree of the current component (e.g. `@ViewChild(SomeService) someService: SomeService`)

      * any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal: any`)

      * a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef) template;`)
  - type: interface-option
    head: opts
    description: Additional options
    name: opts
    headId: opts
    interface: "opts?: {read?: any}"
    showAdditional: true
    additional: "* `read` - read a different token from the queried elements."
