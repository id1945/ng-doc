title: FormArray
url: formarray
entries:
  - type: text
    text: >-
      A `FormArray` aggregates the values of each child
      [`FormControl`](../formcontrol) into an array. It calculates its status by
      reducing the status values of its children. For example, if one of the
      controls in a `FormArray` is invalid, the entire array becomes invalid.


      `FormArray` is one of the three fundamental building blocks used to define forms in Angular, along with [`FormControl`](../formcontrol) and [`FormGroup`](../formgroup).
  - type: text
    text: "## Interface, extends [AbstractControl](../abstractcontrol)"
  - type: toc
  - type: interface-option
    name: at
    head: at
    headId: at
    interface: "at(index: number): AbstractControl"
    description: Get the `AbstractControl` at the given `index` in the array.
  - type: interface-option
    name: push
    head: push
    headId: push
    interface: "push(control: AbstractControl, options: {emitEvent?: boolean} = {}): void"
    description: Insert a new `AbstractControl` at the end of the array.
  - type: interface-option
    name: insert
    head: insert
    headId: insert
    interface: "insert(index: number, control: AbstractControl, options:
      {emitEvent?: boolean} = {}): void"
    description: Insert a new `AbstractControl` at the given `index` in the array.
  - type: interface-option
    name: removeAt
    head: removeAt
    headId: removeAt
    interface: "removeAt(index: number, options: {emitEvent?: boolean} = {}): void"
    description: Remove the control at the given `index` in the array.
  - type: interface-option
    name: setControl
    head: setControl
    headId: setControl
    interface: "setControl(index: number, control: AbstractControl, options:
      {emitEvent?: boolean} = {}): void"
    description: Replace an existing control.
  - type: interface-option
    name: length
    head: length
    headId: length
    interface: "get length(): number"
    description: Length of the control array.
  - type: interface-option
    name: setValue
    head: setValue
    headId: setValue
    interface: "setValue(value: any[], options: {onlySelf?: boolean, emitEvent?:
      boolean} = {}): void"
    description: |-
      Sets the value of the `FormArray`. It accepts an array that matches
      the structure of the control.

      This method performs strict checks, and throws an error if you try
      to set the value of a control that doesn't exist or if you exclude the
      value of a control.

      ### Set the values for the controls in the form array

      ```
      const arr = new FormArray([
      new FormControl(),
      new FormControl()
      ]);
      console.log(arr.value);   // [null, null]

      arr.setValue(['Nancy', 'Drew']);
      console.log(arr.value);   // ['Nancy', 'Drew']
      ```
  - type: interface-option
    name: patchValue
    head: patchValue
    headId: patchValue
    interface: "patchValue(value: any[], options: {onlySelf?: boolean, emitEvent?:
      boolean} = {}): void"
    description: >-
      Patches the value of the `FormArray`. It accepts an array that matches the

      structure of the control, and does its best to match the values to the correct

      controls in the group.


      It accepts both super-sets and sub-sets of the array without throwing an error.


      ### Patch the values for controls in a form array


      ```

      const arr = new FormArray([

      new FormControl(),

      new FormControl()

      ]);

      console.log(arr.value);   // [null, null]


      arr.patchValue(['Nancy']);

      console.log(arr.value);   // ['Nancy', null]

      ```
  - type: interface-option
    name: reset
    head: reset
    headId: reset
    interface: "reset(value: any = [], options: {onlySelf?: boolean, emitEvent?:
      boolean} = {}): void"
    description: >-
      Resets the `FormArray` and all descendants are marked `pristine` and
      `untouched`, and the

      value of all descendants to null or null maps.


      You reset to a specific form state by passing in an array of states

      that matches the structure of the control. The state is a standalone value

      or a form state object with both a value and a disabled status.


      ### Reset the values in a form array


      ```ts

      const arr = new FormArray([

      new FormControl(),

      new FormControl()

      ]);

      arr.reset(['name', 'last name']);


      console.log(arr.value);  // ['name', 'last name']

      ```


      ### Reset the values in a form array and the disabled status for the first control


      ```

      arr.reset([

      {value: 'name', disabled: true},

      'last'

      ]);


      console.log(arr.value);  // ['last']

      console.log(arr.at(0).status);  // 'DISABLED'

      ```
  - type: interface-option
    name: getRawValue
    head: getRawValue
    headId: getRawValue
    interface: "getRawValue(): any[]"
    description: >-
      The aggregate value of the array, including any disabled controls.


      Reports all values regardless of disabled status.

      For enabled controls only, the `value` property is the best way to get the value of the array.
  - type: interface-option
    name: clear
    head: clear
    headId: clear
    interface: "clear(options: {emitEvent?: boolean} = {}): void"
    description: >-
      Remove all controls in the `FormArray`.


      ### Remove all elements from a FormArray


      ```ts

      const arr = new FormArray([

      new FormControl(),

      new FormControl()

      ]);

      console.log(arr.length);  // 2


      arr.clear();

      console.log(arr.length);  // 0

      ```


      It's a simpler and more efficient alternative to removing all elements one by one:


      ```ts

      const arr = new FormArray([

      new FormControl(),

      new FormControl()

      ]);


      while (arr.length) {

      arr.removeAt(0);

      }

      ```
