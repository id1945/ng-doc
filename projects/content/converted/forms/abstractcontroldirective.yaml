title: AbstractControlDirective
url: abstractcontroldirective
entries:
  - type: text
    text: >+
      Base class for control directives.


      This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.

  - type: text
    text: |-
      ### Subclasses

      * [ControlContainer](../controlcontainer)
          * [AbstractFormGroupDirective](../abstractformgroupdirective)
              * [NgModelGroup](../ngmodelgroup-directive)
              * [FormGroupName](../formgroupname-directive)
          * [NgForm](../ngform-directive)
          * [FormGroupDirective](../formgroup-directive)
          * [FormArrayName](../formarrayname-directive)
      * [NgControl](../ngcontrol)
          * [NgModel](../ngmodel-directive)
          * [FormControlDirective](../formcontrol-directive)
          * [FormControlName](../formcontrolname-directive)
  - type: text
    text: "## Interface"
  - type: toc
  - type: interface-option
    name: control
    head: control
    headId: control
    interface: "get control(): AbstractControl|null"
    description: >-
      A reference to the underlying control.


      Returns the control that backs this directive. Most properties fall through to that instance.
  - type: interface-option
    name: value
    head: value
    headId: value
    interface: "get value(): any"
    description: Reports the value of the control if it is present, otherwise null.
  - type: interface-option
    name: valid
    head: valid
    headId: valid
    interface: "get valid(): boolean|null"
    description: |-
      Reports whether the control is valid. A control is considered valid if no
      validation errors exist with the current value.
      If the control is not present, null is returned.
  - type: interface-option
    name: invalid
    head: invalid
    headId: invalid
    interface: "get invalid(): boolean|null"
    description: >-
      Reports whether the control is invalid, meaning that an error exists in
      the input value.

      If the control is not present, null is returned.
  - type: interface-option
    name: pending
    head: pending
    headId: pending
    interface: "get pending(): boolean|null"
    description: >-
      Reports whether a control is pending, meaning that that async validation
      is occurring and

      errors are not yet available for the input value. If the control is not present, null is

      returned.
  - type: interface-option
    name: disabled
    head: disabled
    headId: disabled
    interface: "get disabled(): boolean|null"
    description: >-
      Reports whether the control is disabled, meaning that the control is
      disabled

      in the UI and is exempt from validation checks and excluded from aggregate

      values of ancestor controls. If the control is not present, null is returned.
  - type: interface-option
    name: enabled
    head: enabled
    headId: enabled
    interface: "get enabled(): boolean|null"
    description: >-
      Reports whether the control is enabled, meaning that the control is
      included in ancestor

      calculations of validity or value. If the control is not present, null is returned.
  - type: interface-option
    name: errors
    head: errors
    headId: errors
    interface: "get errors(): ValidationErrors|null"
    description: Reports the control's validation errors. If the control is not
      present, null is returned.
  - type: interface-option
    name: pristine
    head: pristine
    headId: pristine
    interface: "get pristine(): boolean|null"
    description: >-
      Reports whether the control is pristine, meaning that the user has not yet
      changed

      the value in the UI. If the control is not present, null is returned.
  - type: interface-option
    name: dirty
    head: dirty
    headId: dirty
    interface: "get dirty(): boolean|null"
    description: |-
      Reports whether the control is dirty, meaning that the user has changed
      the value in the UI. If the control is not present, null is returned.
  - type: interface-option
    name: touched
    head: touched
    headId: touched
    interface: "get touched(): boolean|null"
    description: >-
      Reports whether the control is touched, meaning that the user has
      triggered

      a `blur` event on it. If the control is not present, null is returned.
  - type: interface-option
    name: status
    head: status
    headId: status
    interface: "get status(): string|null"
    description: |-
      Reports the validation status of the control. Possible values include:
      'VALID', 'INVALID', 'DISABLED', and 'PENDING'.
      If the control is not present, null is returned.
  - type: interface-option
    name: untouched
    head: untouched
    headId: untouched
    interface: "get untouched(): boolean|null"
    description: >-
      Reports whether the control is untouched, meaning that the user has not
      yet triggered

      a `blur` event on it. If the control is not present, null is returned.
  - type: interface-option
    name: statusChanges
    head: statusChanges
    headId: statusChanges
    interface: "get statusChanges(): Observable<any>|null"
    description: >-
      Returns a multicasting observable that emits a validation status whenever
      it is

      calculated for the control. If the control is not present, null is returned.
  - type: interface-option
    name: valueChanges
    head: valueChanges
    headId: valueChanges
    interface: "get valueChanges(): Observable<any>|null"
    description: >-
      Returns a multicasting observable of value changes for the control that
      emits every time the

      value of the control changes in the UI or programmatically.

      If the control is not present, null is returned.
  - type: interface-option
    name: path
    head: path
    headId: path
    interface: "get path(): string[]|null"
    description: >-
      Returns an array that represents the path from the top-level form to this
      control.

      Each index is the string name of the control on that level.
  - type: interface-option
    name: reset
    head: reset
    headId: reset
    interface: "reset(value: any = undefined): void"
    description: Resets the control with the provided value if the control is present.
  - type: interface-option
    name: hasError
    head: hasError
    headId: hasError
    interface: "hasError(errorCode: string, path?: Array<string|number>|string): boolean"
    description: >-
      Reports whether the control with the given path has the error specified.


      For example, for the following `FormGroup`:


      ```

      form = new FormGroup({

      address: new FormGroup({ street: new FormControl() })

      });

      ```


      The path to the 'street' control from the root form would be 'address' -> 'street'.


      It can be provided to this method in one of two formats:


      1. An array of string control names, e.g. `['address', 'street']`

      1. A period-delimited list of control names in one string, e.g. `'address.street'`


      If no path is given, this method checks for the error on the current control.


      Returns whether the given error is present in the control at the given path.


      If the control is not present, false is returned.
  - type: interface-option
    name: getError
    head: getError
    headId: getError
    interface: "getError(errorCode: string, path?: Array<string|number>|string): any"
    description: >-
      Reports error data for the control with the given path.


      For example, for the following `FormGroup`:


      ```

      form = new FormGroup({

      address: new FormGroup({ street: new FormControl() })

      });

      ```


      The path to the 'street' control from the root form would be 'address' -> 'street'.


      It can be provided to this method in one of two formats:


      1. An array of string control names, e.g. `['address', 'street']`

      1. A period-delimited list of control names in one string, e.g. `'address.street'`


      Returns error data for that particular error. If the control or error is not present,

      null is returned.
  - type: interface-option
    name: validator
    head: validator
    headId: validator
    interface: "get validator(): ValidatorFn|null"
    description: >-
      Synchronous validator function composed of all the synchronous validators
      registered with this

      directive.
  - type: interface-option
    name: asyncValidator
    head: asyncValidator
    headId: asyncValidator
    interface: "get asyncValidator(): AsyncValidatorFn|null"
    description: >-
      Asynchronous validator function composed of all the asynchronous
      validators registered with

      this directive.
