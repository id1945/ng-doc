title: AbstractControl
url: abstractcontrol
entries:
  - type: text
    text: >
      This is the base class for [`FormControl`](../formcontrol),
      [`FormGroup`](../formgroup), and [`FormArray`](../formarray).


      It provides some of the shared behavior that all controls and groups of controls have, like

      running validators, calculating status, and resetting state. It also defines the properties

      that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be

      instantiated directly.
  - type: text
    text: "## Interface"
  - type: toc
  - type: interface-option
    name: clearAsyncValidators
    head: clearAsyncValidators
    headId: clearAsyncValidators
    interface: "clearAsyncValidators(): void"
    description: |-
      Empties out the async validator list.

      When you add or remove a validator at run time, you must call
      `updateValueAndValidity()` for the new validation to take effect.
  - type: interface-option
    name: clearValidators
    head: clearValidators
    headId: clearValidators
    interface: "clearValidators(): void"
    description: |-
      Empties out the sync validator list.

      When you add or remove a validator at run time, you must call
      `updateValueAndValidity()` for the new validation to take effect.
  - type: interface-option
    name: dirty
    head: dirty
    headId: dirty
    interface: "get dirty(): boolean"
    description: >-
      A control is `dirty` if the user has changed the value

      in the UI.


      Returns True if the user has changed the value of this control in the UI; compare `pristine`.

      Programmatic changes to a control's value do not mark it dirty.
  - type: interface-option
    name: disable
    head: disable
    headId: disable
    interface: "disable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void"
    description: >-
      Disables the control. This means the control is exempt from validation
      checks and

      excluded from the aggregate value of any parent. Its status is `DISABLED`.


      If the control has children, all children are also disabled.
  - type: interface-option
    name: disabled
    head: disabled
    headId: disabled
    interface: "get disabled(): boolean"
    description: |-
      A control is `disabled` when its `status` is `DISABLED`.

      Disabled controls are exempt from validation checks and
      are not included in the aggregate value of their ancestor
      controls.

      Returns True if the control is disabled, false otherwise.
  - type: interface-option
    name: enable
    head: enable
    headId: enable
    interface: "enable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void"
    description: >-
      Enables the control. This means the control is included in validation
      checks and

      the aggregate value of its parent. Its status recalculates based on its value and

      its validators.


      By default, if the control has children, all children are enabled.
  - type: interface-option
    name: enabled
    head: enabled
    headId: enabled
    interface: "get enabled(): boolean"
    description: |-
      A control is `enabled` as long as its `status` is not `DISABLED`.

      Returns True if the control has any status other than 'DISABLED',
      false if the status is 'DISABLED'.
  - type: interface-option
    name: errors
    head: errors
    headId: errors
    interface: "errors: ValidationErrors|null"
    description: |-
      An object containing any errors generated by failing validation,
      or null if there are no errors.
  - type: interface-option
    name: get
    head: get
    headId: get
    interface: "get(path: Array<string|number>|string): AbstractControl|null"
    description: >-
      Retrieves a child control given the control's name or path.


      ### Retrieve a nested control


      For example, to get a `name` control nested within a `person` sub-group:


      * `this.form.get('person.name');`


      -OR-


      * `this.form.get(['person', 'name']);`


      ### Retrieve a control in a FormArray


      When accessing an element inside a FormArray, you can use an element index.

      For example, to get a `price` control from the first element in an `items` array you can use:


      * `this.form.get('items.0.price');`


      -OR-


      * `this.form.get(['items', 0, 'price']);`
  - type: interface-option
    name: getError
    head: getError
    headId: getError
    interface: "getError(errorCode: string, path?: Array<string|number>|string): any"
    description: >-
      Reports error data for the control with the given path.


      For example, for the following `FormGroup`:


      ```

      form = new FormGroup({

      address: new FormGroup({ street: new FormControl() })

      });

      ```


      The path to the 'street' control from the root form would be 'address' -> 'street'.


      It can be provided to this method in one of two formats:


      1. An array of string control names, e.g. `['address', 'street']`

      1. A period-delimited list of control names in one string, e.g. `'address.street'`


      Returns error data for that particular error. If the control or error is not present,

      null is returned.
  - type: interface-option
    name: hasError
    head: hasError
    headId: hasError
    interface: "hasError(errorCode: string, path?: Array<string|number>|string): boolean"
    description: >-
      Reports whether the control with the given path has the error specified.


      For example, for the following `FormGroup`:


      ```

      form = new FormGroup({

      address: new FormGroup({ street: new FormControl() })

      });

      ```


      The path to the 'street' control from the root form would be 'address' -> 'street'.


      It can be provided to this method in one of two formats:


      1. An array of string control names, e.g. `['address', 'street']`

      1. A period-delimited list of control names in one string, e.g. `'address.street'`


      If no path is given, this method checks for the error on the current control.


      Returns whether the given error is present in the control at the given path.


      If the control is not present, false is returned.
  - type: interface-option
    name: invalid
    head: invalid
    headId: invalid
    interface: "get invalid(): boolean"
    description: >-
      A control is `invalid` when its `status` is `INVALID`.


      Returns True if this control has failed one or more of its validation checks,

      false otherwise.
  - type: interface-option
    name: markAllAsTouched
    head: markAllAsTouched
    headId: markAllAsTouched
    interface: "markAllAsTouched(): void"
    description: Marks the control and all its descendant controls as `touched`.
  - type: interface-option
    name: markAsDirty
    head: markAsDirty
    headId: markAsDirty
    interface: "markAsDirty(opts: {onlySelf?: boolean} = {}): void"
    description: |-
      Marks the control as `dirty`. A control becomes dirty when
      the control's value is changed through the UI; compare `markAsTouched`.
  - type: interface-option
    name: markAsPending
    head: markAsPending
    headId: markAsPending
    interface: "markAsPending(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void"
    description: |-
      Marks the control as `pending`.

      A control is pending while the control performs async validation.
  - type: interface-option
    name: markAsPristine
    head: markAsPristine
    headId: markAsPristine
    interface: "markAsPristine(opts: {onlySelf?: boolean} = {}): void"
    description: |-
      Marks the control as `pristine`.

      If the control has any children, marks all children as `pristine`,
      and recalculates the `pristine` status of all parent
      controls.
  - type: interface-option
    name: markAsTouched
    head: markAsTouched
    headId: markAsTouched
    interface: "markAsTouched(opts: {onlySelf?: boolean} = {}): void"
    description: |-
      Marks the control as `touched`. A control is touched by focus and
      blur events that do not change the value.
  - type: interface-option
    name: markAsUntouched
    head: markAsUntouched
    headId: markAsUntouched
    interface: "markAsUntouched(opts: {onlySelf?: boolean} = {}): void"
    description: |-
      Marks the control as `untouched`.

      If the control has any children, also marks all children as `untouched`
      and recalculates the `touched` status of all parent controls.
  - type: interface-option
    name: parent
    head: parent
    headId: parent
    interface: "get parent(): FormGroup|FormArray|null"
    description: The parent control.
  - type: interface-option
    name: patchValue
    head: patchValue
    headId: patchValue
    interface: "patchValue(value: any, options?: Object): void"
    description: Patches the value of the control. Abstract method (implemented in
      sub-classes).
  - type: interface-option
    name: pending
    head: pending
    headId: pending
    interface: "get pending(): boolean"
    description: >-
      A control is `pending` when its `status` is `PENDING`.


      Returns True if this control is in the process of conducting a validation check,

      false otherwise.
  - type: interface-option
    name: pristine
    head: pristine
    headId: pristine
    interface: "pristine: boolean"
    description: >-
      A control is `pristine` if the user has not yet changed

      the value in the UI.


      Returns True if the user has not yet changed the value in the UI; compare `dirty`.

      Programmatic changes to a control's value do not mark it dirty.
  - type: interface-option
    name: reset
    head: reset
    headId: reset
    interface: "reset(value?: any, options?: Object): void"
    description: Resets the control. Abstract method (implemented in sub-classes).
  - type: interface-option
    name: root
    head: root
    headId: root
    interface: "get root(): AbstractControl"
    description: Retrieves the top-level ancestor of this control.
  - type: interface-option
    name: setAsyncValidators
    head: setAsyncValidators
    headId: setAsyncValidators
    interface: "setAsyncValidators(newValidator:
      AsyncValidatorFn|AsyncValidatorFn[]|null): void"
    description: |-
      Sets the async validators that are active on this control. Calling this
      overwrites any existing async validators.

      When you add or remove a validator at run time, you must call
      `updateValueAndValidity()` for the new validation to take effect.
  - type: interface-option
    name: setErrors
    head: setErrors
    headId: setErrors
    interface: "setErrors(errors: ValidationErrors|null, opts: {emitEvent?: boolean}
      = {}): void"
    description: >-
      Sets errors on a form control when running validations manually, rather
      than automatically.


      Calling `setErrors` also updates the validity of the parent control.


      ### Manually set the errors for a control


      ```

      const login = new FormControl('someLogin');

      login.setErrors({
         notUnique: true
      });


      expect(login.valid).toEqual(false);

      expect(login.errors).toEqual({ notUnique: true });


      login.setValue('someOtherLogin');


      expect(login.valid).toEqual(true);

      ```
  - type: interface-option
    name: setParent
    head: setParent
    headId: setParent
    interface: "setParent(parent: FormGroup|FormArray): void"
    description: ""
  - type: interface-option
    name: setValidators
    head: setValidators
    headId: setValidators
    interface: "setValidators(newValidator: ValidatorFn|ValidatorFn[]|null): void"
    description: |-
      Sets the synchronous validators that are active on this control.  Calling
      this overwrites any existing sync validators.

      When you add or remove a validator at run time, you must call
      `updateValueAndValidity()` for the new validation to take effect.
  - type: interface-option
    name: setValue
    head: setValue
    headId: setValue
    interface: "setValue(value: any, options?: Object): void"
    description: Sets the value of the control. Abstract method (implemented in
      sub-classes).
  - type: interface-option
    name: status
    head: status
    headId: status
    interface: "status: string"
    description: >-
      The validation status of the control. There are four possible

      validation status values:


      * **VALID**: This control has passed all validation checks.

      * **INVALID**: This control has failed at least one validation check.

      * **PENDING**: This control is in the midst of conducting a validation check.

      * **DISABLED**: This control is exempt from validation checks.


      These status values are mutually exclusive, so a control cannot be

      both valid AND invalid or invalid AND disabled.
  - type: interface-option
    name: statusChanges
    head: statusChanges
    headId: statusChanges
    interface: "statusChanges: Observable<any>"
    description: >-
      A multicasting observable that emits an event every time the validation
      `status` of the control

      recalculates.
  - type: interface-option
    name: touched
    head: touched
    headId: touched
    interface: "touched: boolean"
    description: |-
      True if the control is marked as `touched`.

      A control is marked `touched` once the user has triggered
      a `blur` event on it.
  - type: interface-option
    name: untouched
    head: untouched
    headId: untouched
    interface: "get untouched(): boolean"
    description: |-
      True if the control has not been marked as touched

      A control is `untouched` if the user has not yet triggered
      a `blur` event on it.
  - type: interface-option
    name: updateOn
    head: updateOn
    headId: updateOn
    interface: "get updateOn(): FormHooks"
    description: |-
      Reports the update strategy of the `AbstractControl` (meaning
      the event on which the control updates itself).
      Possible values: `'change'` | `'blur'` | `'submit'`
      Default value: `'change'`
  - type: interface-option
    name: updateValueAndValidity
    head: updateValueAndValidity
    headId: updateValueAndValidity
    interface: "updateValueAndValidity(opts: {onlySelf?: boolean, emitEvent?:
      boolean} = {}): void"
    description: |-
      Recalculates the value and validation status of the control.

      By default, it also updates the value and validity of its ancestors.
  - type: interface-option
    name: valid
    head: valid
    headId: valid
    interface: "get valid(): boolean"
    description: |-
      A control is `valid` when its `status` is `VALID`.

      Returns True if the control has passed all of its validation tests,
      false otherwise.
  - type: interface-option
    name: value
    head: value
    headId: value
    interface: "value: any"
    description: |-
      The current value of the control.

      * For a `FormControl`, the current value.
      * For an enabled `FormGroup`, the values of enabled controls as an object
      with a key-value pair for each member of the group.
      * For a disabled `FormGroup`, the values of all controls as an object
      with a key-value pair for each member of the group.
      * For a `FormArray`, the values of enabled controls as an array.
  - type: interface-option
    name: valueChanges
    head: valueChanges
    headId: valueChanges
    interface: "valueChanges: Observable<any>"
    description: >-
      A multicasting observable that emits an event every time the value of the
      control changes, in

      the UI or programmatically. It also emits an event each time you call enable() or disable()

      without passing along {emitEvent: false} as a function argument.
  - type: interface-option
    name: validator
    head: validator
    headId: validator
    interface: "get validator(): ValidatorFn|null"
    description: The function that is used to determine the validity of this control
      synchronously.
  - type: interface-option
    name: validator
    head: validator
    headId: validator
    interface: "set validator(validatorFn: ValidatorFn|null)"
    description: ""
  - type: interface-option
    name: asyncValidator
    head: asyncValidator
    headId: asyncValidator
    interface: "get asyncValidator(): AsyncValidatorFn|null"
    description: The function that is used to determine the validity of this control
      asynchronously.
  - type: interface-option
    name: asyncValidator
    head: asyncValidator
    headId: asyncValidator
    interface: "set asyncValidator(asyncValidatorFn: AsyncValidatorFn|null)"
    description: ""
