title: "[formControlName] directive"
url: formcontrolname-directive
entries:
  - type: text
    text: Syncs a [`FormControl`](../formcontrol) in an existing
      [`FormGroup`](../formgroup) to a form control element by name.
  - type: text
    text: >-
      ### Register `FormControl` within a group


      The following example shows how to register multiple form controls within a form group and set their value.


      ```

      import {Component} from '@angular/core';

      import {FormControl, FormGroup, Validators} from '@angular/forms';


      @Component({
        selector: 'example-app',
        template: `
          <form [formGroup]="form" (ngSubmit)="onSubmit()">
            <div *ngIf="first.invalid"> Name is too short. </div>

            <input formControlName="first" placeholder="First name">
            <input formControlName="last" placeholder="Last name">

            <button type="submit">Submit</button>
         </form>
         <button (click)="setValue()">Set preset value</button>
        `,
      })

      export class SimpleFormGroup {
        form = new FormGroup({
          first: new FormControl('Nancy', Validators.minLength(2)),
          last: new FormControl('Drew'),
        });

        get first(): any { return this.form.get('first'); }

        onSubmit(): void {
          console.log(this.form.value);  // {first: 'Nancy', last: 'Drew'}
        }

        setValue() { this.form.setValue({first: 'Carson', last: 'Drew'}); }
      }

      ```
  - type: text
    text: "## Interface, extends [NgControl](../ngcontrol)"
  - type: toc
  - type: interface-option
    name: control
    head: control
    headId: control
    interface: "control: FormControl"
    description: Tracks the `FormControl` instance bound to the directive.
  - type: interface-option
    name: name
    head: name
    headId: name
    interface: "@Input('formControlName') name: string|number|null"
    description: >-
      Tracks the name of the `FormControl` bound to the directive. The name
      corresponds

      to a key in the parent `FormGroup` or `FormArray`.

      Accepts a name as a string or a number.

      The name in the form of a string is useful for individual forms,

      while the numerical form allows for form controls to be bound

      to indices when iterating over controls in a `FormArray`.
  - type: interface-option
    name: isDisabled
    head: isDisabled
    headId: isDisabled
    interface: "@Input('disabled') set isDisabled(isDisabled: boolean)"
    description: Triggers a warning in dev mode that this input should not be used
      with reactive forms.
  - type: interface-option
    name: model
    head: model
    headId: model
    interface: "@Input('ngModel') model: any"
    description: ""
  - type: interface-option
    name: update
    head: update
    headId: update
    interface: "@Output('ngModelChange') update"
    description: ""
  - type: interface-option
    name: viewToModelUpdate
    head: viewToModelUpdate
    headId: viewToModelUpdate
    interface: "viewToModelUpdate(newValue: any): void"
    description: Sets the new value for the view model and emits an `ngModelChange` event.
  - type: interface-option
    name: path
    head: path
    headId: path
    interface: "get path(): string[]"
    description: >-
      Returns an array that represents the path from the top-level form to this
      control.

      Each index is the string name of the control on that level.
  - type: interface-option
    name: formDirective
    head: formDirective
    headId: formDirective
    interface: "get formDirective(): any"
    description: The top-level directive for this group if present, otherwise null.
  - type: interface-option
    name: validator
    head: validator
    headId: validator
    interface: "get validator(): ValidatorFn|null"
    description: |-
      Synchronous validator function composed of all the synchronous validators
      registered with this directive.
  - type: interface-option
    name: asyncValidator
    head: asyncValidator
    headId: asyncValidator
    interface: "get asyncValidator(): AsyncValidatorFn"
    description: >-
      Async validator function composed of all the async validators registered
      with this

      directive.
