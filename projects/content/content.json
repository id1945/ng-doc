{
  "versions": [
    {
      "id": "2a9cbcbd-9136-9444-0bb0-7f4e9640a80e",
      "sections": [
        {
          "id": "e7029bfd-a9e8-91e3-3cfb-e3e29b48aad6",
          "menu": {
            "items": [
              {
                "id": "c77fcf82-d341-d671-98d3-00548ab40722",
                "label": "Introduction",
                "url": "intro"
              },
              {
                "id": "7b055ca1-0a59-8ba8-6fc1-21679eac6c2c",
                "label": "Quick start",
                "url": "quick-start"
              },
              {
                "id": "b519c2ba-a082-2afd-a757-708e06ffe951",
                "label": "angular.json",
                "url": "angular-json"
              },
              {
                "id": "ca828f3c-28b4-1f27-dc71-526775d373e2",
                "label": "Commands",
                "sub": {
                  "items": [
                    {
                      "id": "bbe86ea9-e5f1-599e-7766-bfd1a2db5b82",
                      "label": "ng new",
                      "url": "command-ng-new",
                      "sub": {
                        "items": [
                          {
                            "id": "d2127730-4d68-3e69-bfa2-7cd9213e73a6",
                            "label": "dryRun",
                            "urlFragment": "dryRun",
                            "url": "command-ng-new",
                            "subActiveOpt": false,
                            "usePageEntries": true,
                            "usePageUrl": "command-ng-new"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "42f47ac7-0e9b-404e-bf27-00eeb79e35f9",
                      "label": "ng serve",
                      "url": "command-ng-serve",
                      "subActiveOpt": false,
                      "sub": {
                        "items": []
                      }
                    },
                    {
                      "id": "1db100a7-de68-c0b5-6deb-c07427098259",
                      "label": "ng build",
                      "url": "command-ng-build"
                    },
                    {
                      "id": "3fab9fb1-0485-2422-f9f7-b07d688bda99",
                      "label": "ng test",
                      "url": "command-ng-test"
                    },
                    {
                      "id": "1b0f5a6e-db5d-3578-1c82-c4e637bcf4ee",
                      "label": "ng e2e",
                      "url": "command-ng-e2e"
                    },
                    {
                      "id": "2aac6bc9-2e7e-2a0a-f173-84983b1e3b07",
                      "label": "ng lint",
                      "url": "command-ng-lint"
                    },
                    {
                      "id": "297ff9bb-d9ea-f693-4408-83fb1dbc768b",
                      "label": "ng run",
                      "url": "command-ng-run"
                    },
                    {
                      "id": "4bc59d30-f01b-e755-ed08-c5d3b0d6c97f",
                      "label": "ng generate",
                      "url": "command-ng-generate"
                    },
                    {
                      "id": "ddb9e941-aad5-f0a8-d1ae-a11a1d1d04d9",
                      "label": "ng add",
                      "url": "command-ng-add"
                    },
                    {
                      "id": "ab75e45c-b236-c358-c956-4cc7e5e8a8ff",
                      "label": "ng xi18n",
                      "url": "command-ng-xi18n"
                    },
                    {
                      "id": "0d543dbf-51f4-7b21-52c1-403b4c3e7cf5",
                      "label": "ng update",
                      "url": "command-ng-update",
                      "sub": {
                        "items": [
                          {
                            "id": "0b981291-ef75-1d24-5261-b5ada2d4590d",
                            "usePageEntries": true,
                            "usePageUrl": "command-ng-update"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "7626f70a-57ba-864a-95f1-d40d333c9d97",
                      "label": "ng config",
                      "url": "command-ng-config"
                    },
                    {
                      "id": "562e2227-5082-500a-c81a-f7154a85c852",
                      "label": "ng-doc",
                      "url": "command-ng-doc"
                    }
                  ]
                },
                "asGroup": true
              },
              {
                "id": "4143d99f-436d-0559-b323-2ef3b5b0a31d",
                "label": "Builders",
                "sub": {
                  "items": [
                    {
                      "id": "45212676-727b-2f07-1f58-da63cd6afbbd",
                      "label": "app-shell",
                      "url": "builder-app-shell",
                      "sub": {
                        "items": [
                          {
                            "id": "d7f6b9c2-091b-1a05-1891-51d4ec10ad8e",
                            "usePageEntries": true,
                            "usePageUrl": "builder-app-shell"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "840f30fe-c9d3-e370-6322-052399327bdd",
                      "label": "browser",
                      "url": "builder-browser",
                      "sub": {
                        "items": [
                          {
                            "id": "7eec8183-3cd5-370f-1f2c-b0cc3fd1a870",
                            "usePageEntries": true,
                            "usePageUrl": "builder-browser"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "6add3de9-9a74-75ce-0ad5-dec14d2ec8c0",
                      "label": "dev-server",
                      "url": "builder-dev-server",
                      "sub": {
                        "items": [
                          {
                            "id": "fd6c7c6b-b502-febe-f129-2f009cce451d",
                            "usePageEntries": true,
                            "usePageUrl": "builder-dev-server"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "e3783ad0-544d-1ae5-8f69-2d9390efecd5",
                      "label": "extract-i18n",
                      "url": "builder-extract-i18n",
                      "sub": {
                        "items": [
                          {
                            "id": "43b64727-3498-5cf5-0b42-12de04a3a005",
                            "usePageEntries": true,
                            "usePageUrl": "builder-extract-i18n"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "8374c73a-bed3-d2af-4339-312bc9c6e9d7",
                      "label": "karma",
                      "url": "builder-karma",
                      "sub": {
                        "items": [
                          {
                            "id": "0d96b954-da2b-6f17-6240-da27ccf3ffe0",
                            "usePageEntries": true,
                            "usePageUrl": "builder-karma"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "2507b99c-e925-02a8-1e25-05d80678e946",
                      "label": "protractor",
                      "url": "builder-protractor",
                      "sub": {
                        "items": [
                          {
                            "id": "f33bbc33-7fe5-b090-e665-230e1b1f0af2",
                            "usePageEntries": true,
                            "usePageUrl": "builder-protractor"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "0fd31e86-7a8e-ec3d-51b2-84e99be7a310",
                      "label": "server",
                      "url": "builder-server",
                      "subActiveOpt": true,
                      "sub": {
                        "items": [
                          {
                            "id": "43832820-b222-b5bd-6851-2d5619773a64",
                            "usePageEntries": true,
                            "usePageUrl": "builder-server"
                          }
                        ]
                      }
                    },
                    {
                      "id": "e25385f8-a86b-d704-1303-3d98e8763bf1",
                      "label": "tslint",
                      "url": "builder-tslint",
                      "subActiveOpt": true,
                      "sub": {
                        "items": [
                          {
                            "id": "9d5405fc-8e49-718d-aee1-a9af02f9d4f2",
                            "usePageEntries": true,
                            "usePageUrl": "builder-tslint"
                          }
                        ]
                      }
                    }
                  ]
                },
                "url": "builders",
                "asGroup": true
              },
              {
                "id": "0ddf87c0-cac3-36f6-6ac3-2542ec7cdb91",
                "label": "Schematics",
                "asGroup": true,
                "sub": {
                  "items": [
                    {
                      "id": "2892c149-4d37-9956-28ae-f73cb6ef9b89",
                      "label": "application",
                      "url": "schematic-application",
                      "sub": {
                        "items": [
                          {
                            "id": "93ebd70f-832c-281b-cd56-bbd35e1a1a23",
                            "sub": {
                              "items": []
                            },
                            "usePageEntries": true,
                            "usePageUrl": "schematic-application"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "de7a362d-859f-c30a-4903-38f2a030af49",
                      "label": "appShell",
                      "url": "schematic-app-shell",
                      "sub": {
                        "items": [
                          {
                            "id": "4f5e807e-b35d-488e-2fa5-9be7f22043fe",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-app-shell"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "3bfeb759-31fc-882b-0e92-95262637a8ec",
                      "label": "class",
                      "url": "schematic-class",
                      "sub": {
                        "items": [
                          {
                            "id": "7521d679-7c7f-b6f5-9297-36eda69646f0",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-class"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "ce53ef68-f089-f8ff-d394-417a330694b7",
                      "label": "component",
                      "url": "schematic-component",
                      "sub": {
                        "items": [
                          {
                            "id": "aa1130af-b4b5-3390-4427-d183c293a6c6",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-component"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "9db9c8d5-2443-211d-f5d5-8029d74cff7d",
                      "label": "directive",
                      "url": "schematic-directive",
                      "sub": {
                        "items": [
                          {
                            "id": "59610a09-dea4-74b7-d4cf-7e3f3b48b862",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-directive"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "3ec90d65-d190-0757-4354-abaa1878b56a",
                      "label": "enum",
                      "url": "schematic-enum",
                      "sub": {
                        "items": [
                          {
                            "id": "bc977e3c-b678-545b-92e5-7e2c0d400edc",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-enum"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "055a0f9a-9529-0b15-609f-c568200d9c86",
                      "label": "guard",
                      "url": "schematic-guard",
                      "sub": {
                        "items": [
                          {
                            "id": "94c3fcdd-80e4-e7d3-e8db-f3fa483d93c4",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-guard"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "2b74119a-d1c3-be0d-0c16-062d0a0bdc48",
                      "url": "schematic-interceptor",
                      "label": "interceptor",
                      "sub": {
                        "items": [
                          {
                            "id": "fa5daebc-3177-7f0e-ad4b-0b2a0fd2c989",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-interceptor"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "a960a241-a2e8-ab6b-617d-6192d6e11f8a",
                      "label": "interface",
                      "url": "schematic-interface",
                      "sub": {
                        "items": [
                          {
                            "id": "94ea63fe-cbd1-207e-9e94-470493412eec",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-interface"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "5752c802-0106-025e-16c6-4efe2e3d2923",
                      "label": "library",
                      "url": "schematic-library",
                      "urlFragment": "",
                      "sub": {
                        "items": [
                          {
                            "id": "9edb9709-a9c8-7eb8-34a0-f56024500f07",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-library"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "afbe7104-ccb2-6f80-d13a-52fd22428397",
                      "label": "module",
                      "url": "schematic-module",
                      "sub": {
                        "items": [
                          {
                            "id": "55b39e45-8155-387b-c5db-ec654296833b",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-module"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "e592a7f2-3aca-63a9-dc56-8061bcb3ccf2",
                      "label": "pipe",
                      "url": "schematic-pipe",
                      "sub": {
                        "items": [
                          {
                            "id": "4b7b2ffa-fe5d-f48f-7052-f7b475fdfe11",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-pipe"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "8a473d28-845d-243a-4154-1107f5116b57",
                      "label": "service",
                      "url": "schematic-service",
                      "sub": {
                        "items": [
                          {
                            "id": "1857e898-0a56-a05e-4b70-9ad2f49df4f5",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-service"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "0f2e1d7d-e2ed-8b80-d414-51a7036b14cb",
                      "label": "serviceWorker",
                      "url": "schematic-service-worker",
                      "sub": {
                        "items": [
                          {
                            "id": "eeb42d05-f58b-5e49-ce55-e76257c3b82a",
                            "asGroup": false,
                            "usePageEntries": true,
                            "usePageUrl": "schematic-service-worker"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "4b6a0dcf-f26f-2344-c34d-63628177a21b",
                      "url": "schematic-web-worker",
                      "label": "webWorker",
                      "subActiveOpt": true,
                      "sub": {
                        "items": [
                          {
                            "id": "8cf19793-a846-198a-323c-8b001cf1ac7b",
                            "usePageEntries": true,
                            "usePageUrl": "schematic-web-worker"
                          }
                        ]
                      }
                    }
                  ]
                },
                "url": "schematics"
              }
            ]
          },
          "pages": [
            {
              "id": "22e3f1f2-26c7-17fc-fc2f-4f2d578b5f78",
              "entries": [
                {
                  "id": "9dfcbb88-833c-a80b-e303-1a958ad42d16",
                  "type": "text",
                  "text": "This simple Angular CLI reference for developers describes commands, features and Schematics.\n\n\n## Additional information\n\nExample of hints and tutorials links. You can switch off these panels in the sidebar."
                },
                {
                  "id": "f034a269-e9e3-007b-47a6-86d6e24447fa",
                  "type": "hint",
                  "text": "Hint with additional explanation. "
                },
                {
                  "id": "e68053df-176b-5110-9078-87adb5d8bca5",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Quick Start",
                      "url": "https://angular.io/guide/quickstart",
                      "lang": "en"
                    },
                    {
                      "label": "Version 9 of Angular Now Available — Project Ivy has arrived!",
                      "url": "https://blog.angular.io/version-9-of-angular-now-available-project-ivy-has-arrived-23c97b63cfa3"
                    },
                    {
                      "label": "What's new in Angular CLI 9.0?",
                      "url": "https://blog.ninja-squad.com/2020/02/07/angular-cli-9.0/"
                    }
                  ]
                }
              ],
              "title": "Introduction",
              "url": "intro"
            },
            {
              "id": "09185d20-b810-e0ac-4f9b-bfdde78c9ad4",
              "entries": [
                {
                  "id": "39efe385-24d3-d9c3-0249-e4f3f3eddbc2",
                  "type": "text",
                  "text": "Install Angular CLI:\n```\nnpm i @angular/cli -g\n```\n\nCreate a new project:\n```\nng new my-app\n```\n\nServe the application:\n```\ncd my-app\nng serve\n```\n"
                },
                {
                  "id": "1cc4c74e-a1e6-a192-5441-a259c4ecc5f9",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular QuickStart",
                      "url": "https://angular.io/guide/quickstart",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Quick start",
              "url": "quick-start"
            },
            {
              "id": "f7d32317-f2be-ea8d-916d-2b7810601bdf",
              "entries": [
                {
                  "id": "5d78e256-738a-c25e-6b62-637c8cf7066f",
                  "type": "text",
                  "text": "Main Angular CLI configuration file.\n\n"
                },
                {
                  "id": "7e5ec02b-68d9-38e6-eb6f-091d80a091b2",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Understanding the Angular CLI Workspace File",
                      "url": "https://nitayneeman.com/posts/understanding-the-angular-cli-workspace-file/",
                      "lang": "en"
                    },
                    {
                      "lang": "en",
                      "label": "Angular CLI — Demystifying the workspace",
                      "url": "https://blog.nrwl.io/angular-cli-demystifying-the-workspace-7f59ffaab4cb"
                    }
                  ]
                },
                {
                  "id": "35503297-e158-2769-3c75-132225ed84eb",
                  "type": "text",
                  "text": "## Schema\n\n- **version** (`integer`): File format version. This is currently `\"1\"`.\n\n- **newProjectRoot** (`string`): Path where new projects will be created.\n\n- **defaultProject** (`string`): Default project name used in commands.\n\n- **cli**: Workspace configuration options for Angular CLI.\n  - *defaultCollection* (`string`): The default schematics collection to use.\n  - *packageManager* (`string`): Specify which package manager tool to use.\n  - *warnings* (`object`): Warning configuration.\n    - *versionMismatch* (`boolean`): Show a warning when the global version is newer than the local one.\n    - *typescriptMismatch* (`boolean`): Check TypeScript version.\n\n- **schematics** (`object`): Workspace configuration options for Schematics.\n  - *schematic-package:schematic-name* (`object`): Object containing options for this schematic. JSON Schema for default schematics:\n    - [@schematics/angular:component](https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L74-L144)\n    - [@schematics/angular:directive](https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L145-L186)\n    - [@schematics/angular:module](https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L187-L223)\n    - [@schematics/angular:service](https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L224-L238)\n    - [@schematics/angular:pipe](https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L239-L269)\n    - [@schematics/angular:class](https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L270-L279)\n\n\n- **projects**: Configuration options for each project in the workspace.\n  - *root* (`string`): Root of the project files.\n  - *sourceRoot* (`string`): The root of the source files, assets and index.html file structure..\n  - *projectType* (`string`): the type of this project, `application` or `library`.\n  - *prefix* (`string`): The prefix to apply to generated selectors.\n  - *schematics* (`object`): Project configuration options for Schematics. Has the same format as top level Schematics configuration).\n  - *architect* (`string`): Project configuration for Architect targets.\n    - *targetName* (`string`): Name of this target.\n      - *builder* (`string`): Builder for this target, in the format `package-name:builder-name`.\n      - *options* (`string`): Options for this builder.\n        Default schematics options:\n        - [@angular-devkit/build-angular:app-shell](../builder-app-shell)\n        - [@angular-devkit/build-angular:browser](../builder-browser)\n        - [@angular-devkit/build-angular:dev-server](../builder-dev-server)\n        - [@angular-devkit/build-angular:extract-i18n](../builder-extract-i18n)\n        - [@angular-devkit/build-angular:karma](../builder-karma)\n        - [@angular-devkit/build-angular:protractor](../builder-protractor)\n        - [@angular-devkit/build-angular:server](../builder-server)\n        - [@angular-devkit/build-angular:tslint](../builder-tslint)\n      - *configurations* (`object`): A map of alternative target options.\n        - *configurationName* (`object`): Partial options override for this builder.\n"
                }
              ],
              "title": "angular.json",
              "url": "angular-json"
            },
            {
              "id": "4820419b-ede4-8310-c209-14c3813f4271",
              "entries": [
                {
                  "id": "7609cfac-bc19-9943-c060-dde745433c73",
                  "type": "text",
                  "text": "```\nng new [name] [--[argument]=[value]]\nng n\n```\n\nCreates a new angular application.\n"
                },
                {
                  "id": "28408a01-ed3e-fc82-5afc-33dee1e13731",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Agnular QuickStart",
                      "url": "https://angular.io/guide/quickstart",
                      "lang": "en"
                    },
                    {
                      "url": "https://angular.io/cli/new",
                      "label": "Angular — ng new"
                    }
                  ]
                },
                {
                  "id": "be797fef-2c21-471d-e012-b06036538b1c",
                  "type": "text",
                  "text": "Creates and initializes a new Angular app that is the default project for a new workspace.\n\nProvides interactive prompts for optional configuration, such as adding routing support.\nAll prompts can safely be allowed to default.\n\n* The new workspace folder is given the specified project name, and contains configuration files at the top level.\n\n* By default, the files for a new initial app (with the same name as the workspace) are placed in the `src/` subfolder. Corresponding end-to-end tests are placed in the `e2e/` subfolder.\n\n* The new app's configuration appears in the `projects` section of the `angular.json` workspace configuration file, under its project name.\n\n* Subsequent apps that you generate in the workspace reside in the `projects/` subfolder.\n\nIf you plan to have multiple apps in the workspace, you can create an empty workspace by setting the `--createApplication` option to false.\nYou can then use `ng generate application` to create an initial app.\nThis allows a workspace name different from the initial app name, and ensures that all apps reside in the `/projects` subfolder, matching the structure of the configuration file."
                },
                {
                  "id": "0925973b-d612-defb-6c6e-cdb6122d09e6",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "76b7fd9b-d008-5050-401c-1eff834467ea",
                  "type": "toc"
                },
                {
                  "id": "b75a4bed-3140-d07d-cda8-9a0d516adc93",
                  "type": "command-param",
                  "head": "collection",
                  "description": "Schematics collection to use.",
                  "name": "collection",
                  "headId": "collection",
                  "aliases": "c",
                  "paramType": "string",
                  "default": "@schematics/angular"
                },
                {
                  "id": "9535576f-7739-6e5e-5316-d61079cf3d98",
                  "type": "command-param",
                  "head": "commit",
                  "description": "Initial repository commit information.",
                  "name": "commit",
                  "headId": "commit",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "1769b21f-a72a-c17b-7c2a-814b7aa805d3",
                  "type": "command-param",
                  "head": "createApplication",
                  "description": "Flag to toggle creation of an application in the new workspace.",
                  "name": "createApplication",
                  "headId": "createApplication",
                  "paramType": "boolean",
                  "default": "true",
                  "tutorialsEntry": {
                    "id": "91cd65f3-fe93-ad9e-df30-0cb2743a3b2f",
                    "type": "tutorials",
                    "links": [
                      {
                        "lang": "en",
                        "label": "Angular Workspace: No Application for You!",
                        "url": "https://blog.angularindepth.com/angular-workspace-no-application-for-you-4b451afcc2ba"
                      }
                    ]
                  }
                },
                {
                  "id": "1e1a70e3-f29e-db2f-49c5-55057cfd2062",
                  "type": "command-param",
                  "head": "defaults",
                  "description": "When true, disables interactive input prompts for options with a default.",
                  "name": "defaults",
                  "headId": "defaults",
                  "default": "false",
                  "paramType": "boolean"
                },
                {
                  "id": "32643db0-fdfa-cc84-8869-a9d00651dd96",
                  "type": "command-param",
                  "head": "directory",
                  "description": "The directory name to create the workspace in.",
                  "name": "directory",
                  "headId": "directory",
                  "paramType": "string"
                },
                {
                  "id": "98182a06-d523-263d-fd25-24781d893e98",
                  "type": "command-param",
                  "description": "Run through without making any changes.",
                  "name": "dryRun",
                  "paramType": "boolean",
                  "aliases": "d",
                  "default": "false",
                  "head": "dryRun",
                  "headId": "dryRun"
                },
                {
                  "id": "e67ee4f1-204e-b1d8-b963-56a5725ba8b3",
                  "type": "command-param",
                  "description": "Forces overwriting of files.",
                  "name": "force",
                  "paramType": "boolean",
                  "aliases": "f",
                  "default": "false",
                  "head": "force",
                  "headId": "force"
                },
                {
                  "id": "9658865c-8a98-edc5-504b-c152b92928f2",
                  "type": "command-param",
                  "head": "help",
                  "description": "Shows a help message for this command in the console.",
                  "name": "help",
                  "headId": "help",
                  "values": "true|false|json|JSON",
                  "default": "false"
                },
                {
                  "id": "29307d9d-24b9-9d0a-a3c8-71fc498587c8",
                  "type": "command-param",
                  "head": "inlineStyle",
                  "description": "Specifies if the style will be in the ts file.",
                  "name": "inlineStyle",
                  "headId": "inlineStyle",
                  "aliases": "s",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "663cd031-a805-c1b3-19e2-622ec9d79ae4",
                  "type": "command-param",
                  "head": "inlineTemplate",
                  "description": "Specifies if the template will be in the ts file.",
                  "name": "inlineTemplate",
                  "headId": "inlineTemplate",
                  "aliases": "t",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "e1290c98-a81a-7d58-2f95-fb06b9a42548",
                  "type": "command-param",
                  "head": "interactive",
                  "description": "When false, disables interactive input prompts.",
                  "name": "interactive",
                  "headId": "interactive",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "f19c4af0-448c-23d4-1e36-2f3c7f6c563e",
                  "type": "command-param",
                  "head": "minimal",
                  "description": "Create a barebones project without any testing frameworks.",
                  "name": "minimal",
                  "headId": "minimal",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "dcd4895e-8756-fcf4-ec75-9cbd61d5e6b4",
                  "type": "command-param",
                  "head": "newProjectRoot",
                  "description": "The path where new projects will be created.",
                  "name": "newProjectRoot",
                  "headId": "newProjectRoot",
                  "paramType": "string",
                  "default": "projects"
                },
                {
                  "id": "c83d064e-4f22-2a67-9ead-8ac404ea1bba",
                  "type": "command-param",
                  "head": "packageManager",
                  "headId": "packageManager",
                  "name": "packageManager",
                  "values": "npm|yarn|pnpm|cnpm",
                  "description": "The package manager used to install dependencies.",
                  "paramType": "string"
                },
                {
                  "id": "11aa182d-3e7c-3c6e-d600-1f5fc15b363c",
                  "type": "command-param",
                  "head": "prefix",
                  "description": "The prefix to apply to generated selectors.",
                  "name": "prefix",
                  "headId": "prefix",
                  "aliases": "p",
                  "paramType": "string",
                  "default": "app"
                },
                {
                  "id": "f2b522a6-a0ca-f0e1-ef05-206092bd3924",
                  "type": "command-param",
                  "head": "routing",
                  "description": "When true, generates a routing module for the initial project.",
                  "name": "routing",
                  "headId": "routing",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "516ee180-48ff-e7ae-de88-95e2fd166a70",
                  "type": "command-param",
                  "head": "skipGit",
                  "description": "Skip initializing a git repository.",
                  "name": "skipGit",
                  "headId": "skipGit",
                  "paramType": "boolean",
                  "default": "false",
                  "aliases": "g"
                },
                {
                  "id": "27a3c70f-b417-a486-6787-e414298f354c",
                  "type": "command-param",
                  "head": "skipPackageJson",
                  "description": "Do not add dependencies to `package.json`.",
                  "aliases": "skip-package-json",
                  "name": "skipPackageJson",
                  "headId": "skipPackageJson"
                },
                {
                  "id": "04a90138-7f00-6cf0-3b9b-0eb08e94ce62",
                  "type": "command-param",
                  "head": "skipInstall",
                  "description": "Skip installing dependency packages.",
                  "name": "skipInstall",
                  "headId": "skipInstall",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "0b750b68-181b-8dd9-2ca4-04048e54c7ea",
                  "type": "command-param",
                  "head": "skipTests",
                  "description": "Skip creating spec files.",
                  "aliases": "S",
                  "name": "skipTests",
                  "headId": "skipTests",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "12e8d9c6-0fb2-7e9e-be16-2fbf1629c6c4",
                  "type": "command-param",
                  "head": "strict",
                  "headId": "strict",
                  "name": "strict",
                  "description": "Creates a workspace with stricter TypeScript compiler options.",
                  "default": "false",
                  "paramType": "boolean"
                },
                {
                  "id": "5dd06b91-879d-770d-a72e-3ca185fbaf15",
                  "type": "command-param",
                  "head": "style",
                  "description": "The file extension to be used for style files.",
                  "name": "style",
                  "headId": "style",
                  "aliases": "",
                  "paramType": "string",
                  "values": "css, scss, less, sass, styl",
                  "default": "css"
                },
                {
                  "id": "f5850599-8aa6-624d-1ec4-1dffc881b275",
                  "type": "command-param",
                  "description": "Adds more details to output logging.",
                  "name": "verbose",
                  "paramType": "boolean",
                  "aliases": "v",
                  "default": "false",
                  "head": "verbose",
                  "headId": "verbose"
                },
                {
                  "id": "b7e37d4d-08a9-e2e1-57bd-024c0d90eb90",
                  "type": "command-param",
                  "head": "viewEncapsulation",
                  "description": "Specifies the view encapsulation strategy.",
                  "aliases": "view-encapsulation",
                  "name": "viewEncapsulation",
                  "headId": "viewEncapsulation",
                  "values": "Emulated|Native|None|ShadowDom"
                }
              ],
              "title": "ng new",
              "url": "command-ng-new",
              "generationType": "none"
            },
            {
              "id": "2814273e-85cd-f97c-806b-5460a3cee779",
              "entries": [
                {
                  "id": "130530c2-9838-0fbe-51e9-74554c9e4165",
                  "type": "text",
                  "text": "```\nng serve [project] [--[option]=[value]]\nng s\n```\n\nBuild the application and start a web server.\n\nAlias for the command:\n \n```\nng run [project]:serve\n```\n\n`[project]` — the name of the project to build. Can be an application or a library.\n\n---\n\nBy default for `ng serve` CLI uses builder [`dev-server`](../builder-dev-server).\n\nA builder runs with default configuration options specified in the workspace configuration file (`angular.json`) or with a named alternative configuration.\n\nThe configuration options generally correspond to the command options.\nYou can override individual configuration defaults by specifying the corresponding options on the command line.\nThe command can accept option names given in either dash-case or camelCase.\nNote that in the configuration file, you must specify names in camelCase.\n\nSome additional options can only be set through the configuration file,\neither by direct editing or with the `ng config` command."
                },
                {
                  "id": "abec83a5-a458-c9c5-a09f-1bcf26a59dbe",
                  "type": "tutorials",
                  "links": [
                    {
                      "url": "https://angular.io/cli/serve",
                      "label": "Angular - ng serve"
                    }
                  ]
                },
                {
                  "id": "2d4249cf-e002-bfcb-c434-01e32d15cd34",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "48154cc5-aace-06ed-4580-ce85595fb428",
                  "type": "command-param",
                  "head": "prod",
                  "description": "Flag to set configuration to \"prod\". \n\nAlias for the command:\n\n```\nng run [default-project]:serve:production\n```\n\nBy default, the production target is set up in the workspace configuration such that all builds make use of bundling, limited tree-shaking, and also limited dead code elimination.",
                  "name": "prod",
                  "headId": "prod",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "36fcbd46-a805-a831-7162-cc42c3083e23",
                  "type": "command-param",
                  "head": "configuration",
                  "description": "A named build target, as specified in the `configurations` section of `angular.json`. Each named target is accompanied by a configuration of option defaults for that target. Setting this explicitly overrides the `--prod` flag.",
                  "name": "configuration",
                  "headId": "configuration",
                  "aliases": "-c",
                  "paramType": "string"
                },
                {
                  "id": "a8289065-a82b-10e7-7508-69460dc66c39",
                  "type": "text",
                  "text": "### Go to [`dev-server` builder options](../builder-dev-server)."
                }
              ],
              "title": "ng serve",
              "url": "command-ng-serve"
            },
            {
              "id": "ac00056b-9a74-5fb0-37d2-7d55bca2de38",
              "entries": [
                {
                  "id": "79e9874c-63eb-3203-5cb0-b5f55c4a7978",
                  "type": "text",
                  "text": "```\nng build [project] [--[option]=[value]]\nng b\n```\n\nCompiles an Angular app into an output directory named `dist/` at the given output path. Must be executed from within a workspace directory.\n\nAlias for the command:\n \n```\nng run [project]:build\n```\n\n`[project]` — the name of the project to build.\n\n---\n\nBy default for applications CLI uses builder [`browser`](../builder-browser). And `@angular-devkit/build-ng-packagr:build` for libraries.\n\nA builder runs with default configuration options specified in the workspace configuration file (`angular.json`) or with a named alternative configuration.\n\nThe configuration options generally correspond to the command options.\nYou can override individual configuration defaults by specifying the corresponding options on the command line.\nThe command can accept option names given in either dash-case or camelCase.\nNote that in the configuration file, you must specify names in camelCase.\n\nSome additional options can only be set through the configuration file,\neither by direct editing or with the `ng config` command.\n\n"
                },
                {
                  "id": "11d6a32d-f141-7888-d5ea-2560ff8d9b70",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Deployment",
                      "url": "https://angular.io/guide/deployment",
                      "lang": "en"
                    },
                    {
                      "url": "https://angular.io/cli/build",
                      "label": "Angular - ng build"
                    }
                  ]
                },
                {
                  "id": "80edb8c0-1702-00cd-9b86-b653f8872696",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "23b68d99-6530-c1ef-d139-07f4d5a320dc",
                  "type": "command-param",
                  "head": "prod",
                  "description": "Flag to set configuration to `production`. \n\nAlias for the command:\n\n```\nng run [default-project]:build:production\n```\n\nBy default, the production target is set up in the workspace configuration such that all builds make use of bundling, limited tree-shaking, and also limited dead code elimination.\n",
                  "name": "prod",
                  "headId": "prod",
                  "paramType": "boolean",
                  "default": ""
                },
                {
                  "id": "6274b161-8215-9894-68e5-c88e7dc5d878",
                  "type": "command-param",
                  "head": "configuration",
                  "headId": "configuration",
                  "name": "configuration",
                  "paramType": "string",
                  "aliases": "-c",
                  "description": "A named build target, as specified in the `configurations` section of `angular.json`. Each named target is accompanied by a configuration of option defaults for that target. Setting this explicitly overrides the `--prod` flag."
                },
                {
                  "id": "9b9c7998-3152-ee3a-2b0f-9e4106dcae97",
                  "type": "text",
                  "text": "### Go to [`browser` builder options](../builder-browser).\n"
                }
              ],
              "title": "ng build",
              "url": "command-ng-build"
            },
            {
              "id": "be657e42-99ce-1278-bc8f-c5404d37f392",
              "entries": [
                {
                  "id": "f0a2a070-439c-b6cb-d8ad-dfa7f7dd7984",
                  "type": "text",
                  "text": "```\nng test [project] [--[option]=[value]]\n```\n\nAlias for the command:\n \n```\nng run [project]:test\n```\n\n`[project]` — the name of the project to build.\n\n---\n\nBy default for applications CLI uses builder [`karma`](../builder-karma).\n\nA builder runs with default configuration options specified in the workspace configuration file (`angular.json`) or with a named alternative configuration.\n\nThe configuration options generally correspond to the command options.\nYou can override individual configuration defaults by specifying the corresponding options on the command line.\nThe command can accept option names given in either dash-case or camelCase.\nNote that in the configuration file, you must specify names in camelCase.\n\nSome additional options can only be set through the configuration file,\neither by direct editing or with the `ng config` command.\n\n"
                },
                {
                  "id": "c20944b3-6c95-6239-87f0-9d00df096770",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Testing",
                      "url": "https://angular.io/guide/testing",
                      "lang": "en"
                    },
                    {
                      "url": "https://angular.io/cli/test",
                      "label": "Agnular - ng test"
                    }
                  ]
                },
                {
                  "id": "b10777fa-bb43-52ff-bcfc-7aa2b8bbbc2b",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "f32a5fd6-8d74-3715-245b-383a1d38f247",
                  "type": "command-param",
                  "head": "prod",
                  "description": "Flag to set configuration to `production`. \n\nAlias for the command:\n\n```\nng run [default-project]:test:production\n```",
                  "name": "prod",
                  "headId": "prod",
                  "paramType": "boolean"
                },
                {
                  "id": "87f3ec8a-f54a-63f1-7a5e-287cdeab61bb",
                  "type": "command-param",
                  "head": "configuration",
                  "description": "Specify the configuration to use. ",
                  "name": "configuration",
                  "headId": "configuration",
                  "paramType": "string",
                  "aliases": "c"
                },
                {
                  "id": "6b9ae9de-d199-e20f-e16e-3de569e79b6c",
                  "type": "text",
                  "text": "### Go to [`karma` builder options](../builder-karma).\n"
                }
              ],
              "title": "ng test",
              "url": "command-ng-test"
            },
            {
              "id": "ff2ae109-3dbe-2d28-9864-3b784e975d29",
              "entries": [
                {
                  "id": "0692ac80-ea0e-bb23-cfc3-6d454be00612",
                  "type": "text",
                  "text": "```\nng e2e [project] [--[option]=[value]]\n```\n\nAlias for the command:\n \n```\nng run [project]:e2e\n```\n\n`[project]` — the name of the project to build.\n\n---\n\nBy default for applications CLI uses builder [`protractor`](../builder-protractor).\n\nA builder runs with default configuration options specified in the workspace configuration file (`angular.json`) or with a named alternative configuration.\n\nThe configuration options generally correspond to the command options.\nYou can override individual configuration defaults by specifying the corresponding options on the command line.\nThe command can accept option names given in either dash-case or camelCase.\nNote that in the configuration file, you must specify names in camelCase.\n\nSome additional options can only be set through the configuration file,\neither by direct editing or with the `ng config` command.\n\n"
                },
                {
                  "id": "00ccb206-32e7-ec10-699e-0713273220e7",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Introduction to E2E Testing with the Angular CLI and Protractor",
                      "url": "https://coryrylan.com/blog/introduction-to-e2e-testing-with-the-angular-cli-and-protractor",
                      "lang": "en"
                    },
                    {
                      "url": "https://angular.io/cli/e2e",
                      "label": "Angular - ng e2e"
                    }
                  ]
                },
                {
                  "id": "d414b194-51e7-148f-555c-b1d6685e51a9",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "d0c11f2d-3a79-96ee-10ac-c173a93f7762",
                  "type": "command-param",
                  "head": "prod",
                  "description": "Flag to set configuration to `production`. \n\nAlias for the command:\n\n```\nng run [default-project]:e2e:production\n```",
                  "name": "prod",
                  "headId": "prod",
                  "paramType": "boolean"
                },
                {
                  "id": "1e7e990b-64f1-c269-e30b-1aec5acfab94",
                  "type": "command-param",
                  "head": "configuration",
                  "description": "Specify the configuration to use. ",
                  "name": "configuration",
                  "headId": "configuration",
                  "paramType": "string",
                  "aliases": "c"
                },
                {
                  "id": "b83c2a39-0a1d-9103-5e56-db919ddb616c",
                  "type": "text",
                  "text": "### Go to [`protractor` builder options](../builder-protractor).\n"
                }
              ],
              "title": "ng e2e",
              "url": "command-ng-e2e"
            },
            {
              "id": "00a6f3bd-44ee-a646-e1e8-3be12ff3ed0e",
              "entries": [
                {
                  "id": "6604e78c-df71-2195-c673-7c0bebf17fdb",
                  "type": "text",
                  "text": "```\nng lint [project] [--[argument]=[value]]\nng l\n```\n\nRuns linting tools on Angular app code in a given project folder.\n\nAlias for the command:\n \n```\nng run [project]:lint\n```\n\n`[project]` — the name of the project to build.\n\nWhen a project name is not supplied, it will execute for all projects.\n\n---\n\nBy default for applications CLI uses builder [`tslint`](../builder-tslint).\n\nThe default linting tool is [TSLint](https://palantir.github.io/tslint/), and the default configuration is specified in the project's `tslint.json` file.\n\nA builder runs with default configuration options specified in the workspace configuration file (`angular.json`) or with a named alternative configuration.\n\nThe configuration options generally correspond to the command options.\nYou can override individual configuration defaults by specifying the corresponding options on the command line.\nThe command can accept option names given in either dash-case or camelCase.\nNote that in the configuration file, you must specify names in camelCase.\n\nSome additional options can only be set through the configuration file,\neither by direct editing or with the `ng config` command.\n"
                },
                {
                  "id": "d9869101-33b9-69dc-6eef-d185d5244780",
                  "type": "tutorials",
                  "links": [
                    {
                      "url": "https://angular.io/cli/lint",
                      "label": "Angular - ng lint"
                    }
                  ]
                },
                {
                  "id": "12dceebe-99e4-b89c-dbb9-264ff869b9a0",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "8b4b90e8-1126-f069-73fe-126093e035d3",
                  "type": "command-param",
                  "head": "configuration",
                  "description": "Specify the configuration to use. ",
                  "name": "configuration",
                  "headId": "configuration",
                  "paramType": "string",
                  "aliases": "c"
                },
                {
                  "id": "824dfadc-2f28-98b0-9803-7536c91eebe0",
                  "type": "text",
                  "text": "### Go to [`tslint` builder options](../builder-tslint).\n"
                }
              ],
              "title": "ng lint",
              "url": "command-ng-lint"
            },
            {
              "id": "4551a413-912e-c265-1ae9-ac83dcf7c312",
              "entries": [
                {
                  "id": "a079465a-5fe4-9b9d-c4de-301a206c1d09",
                  "type": "text",
                  "text": "```\nng run [project]:[target] [--[argument]=[value]]\nng run [project]:[target]:[configuration] [--[argument]=[value]]\n```\n\nThe main command to run architects.\n\nIn an `architect` section of each project in [`angular.json`](../angular-json) you can define build configurations.\n\nAn architect can contain any number of builds. A build defines name of builder, base options and any number of configurations.\n\n```json\n{\n  ...\n  \"projects\": {\n    \"app\": {\n      ...\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            ...\n          },\n          \"configurations\": {\n            \"production\": {\n              ...\n            },\n            ...\n          }\n        },\n        ...\n```\n\n## Configuration\n\nList of default builders and their options you can find in the section [Builders](../builders).\n\nThese options defined in `options` and `configurations` sections of `angular.json`.\n\nOn `ng run` call you can override any builder's option:\n\n```\nng run [project]:[target] --[argument]=[value]\n```\n"
                },
                {
                  "id": "8ca8a6ac-42a4-f7c4-e91c-6a27901462e2",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular - ng run",
                      "url": "https://angular.io/cli/run"
                    }
                  ]
                }
              ],
              "title": "ng run",
              "url": "command-ng-run"
            },
            {
              "id": "e7a52933-2fcc-c985-a58e-e16158176d2e",
              "entries": [
                {
                  "id": "7b8567c5-7fc0-f226-6a44-d25fc14c465f",
                  "type": "text",
                  "text": "```\nng generate [schematic] [name] [--[option]=[value]]\nng g\n```\n\nGenerates the specified schematic.\n\n\nAlso Angular CLI provides a mechanism to generate code from any package (`schematic-package` points to an npm package name):\n\n```\nng generate [schematic-package]:[schematic-name] [name]\n```\n\n\n## Configuration\n\nThe list of the default generators you can find in the section [Schematics](../schematics).\n\nDefault values of generators options can be added to your `angular.json` file.\n\n"
                },
                {
                  "id": "ebae8905-a025-ad84-05f7-6bfb3428439c",
                  "type": "tutorials",
                  "links": [
                    {
                      "url": "https://angular.io/cli/generate",
                      "label": "Angular - ng generate"
                    }
                  ]
                },
                {
                  "id": "0fe5a363-ff02-476f-56a3-8ab4282ccfc1",
                  "type": "text",
                  "text": "## Options\n\nThe next options can be applied to any generator."
                },
                {
                  "id": "5542cc1e-4a41-c0d1-cf92-04816c4e7848",
                  "type": "command-param",
                  "head": "defaults",
                  "headId": "defaults",
                  "name": "defaults",
                  "paramType": "boolean",
                  "description": "When true, disables interactive input prompts for options with a default."
                },
                {
                  "id": "a2aec7d7-95d5-6aa1-e0e7-b878f9ad08fd",
                  "type": "command-param",
                  "head": "dryRun",
                  "description": "Run through without making any changes.",
                  "name": "dryRun",
                  "headId": "dryRun",
                  "paramType": "boolean",
                  "aliases": "-d",
                  "default": "false"
                },
                {
                  "id": "9fd28419-0c71-b359-48ae-f6e4eb946b44",
                  "type": "command-param",
                  "head": "force",
                  "description": "Forces overwriting of files. ",
                  "name": "force",
                  "headId": "force",
                  "paramType": "boolean",
                  "aliases": "-f",
                  "default": "false"
                },
                {
                  "id": "35aa77ca-c993-417b-6c6a-2e8b06cabde0",
                  "type": "command-param",
                  "head": "help",
                  "headId": "help",
                  "name": "help",
                  "values": "true|false|json|JSON",
                  "default": "false",
                  "description": "Shows a help message for this command in the console."
                },
                {
                  "id": "beccb252-3315-b798-333c-28850536a6c7",
                  "type": "command-param",
                  "head": "interactive",
                  "headId": "interactive",
                  "name": "interactive",
                  "paramType": "boolean",
                  "description": "When false, disables interactive input prompts."
                }
              ],
              "title": "ng generate",
              "url": "command-ng-generate"
            },
            {
              "id": "0d141457-5e34-e3bd-0d87-6141b3bd0127",
              "entries": [
                {
                  "id": "4e5481c0-a2af-cdb5-28f8-74ab1e7965ee",
                  "type": "text",
                  "text": "```\nng add [name]\n```\n\nAdd support for a library to your project.\n\n"
                },
                {
                  "id": "2b5d1396-9ded-b396-f1d7-c929bde6a8ff",
                  "type": "hint",
                  "text": "`ng add` helps you add new capabilities to your app — this command will install the dependencies and then \ninvoke the installation script which will take care of all the rest."
                },
                {
                  "id": "0b1d4b68-3f0b-7b05-ba2b-9d6a5a584f7a",
                  "type": "text",
                  "text": "Adds the npm package for a published library to your workspace, and configures your default app project to use that library, in whatever way is specified by the library's schematic.\n\nThe default app project is the value of `defaultProject` in `angular.json`. "
                },
                {
                  "id": "907d63b7-3574-5f41-45e4-027402cc1f39",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Version 6 of Angular Now Available",
                      "url": "https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "912991f8-c820-5015-f4e6-f7e8cd286e84",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "e6c3a641-1d14-d16b-9a6e-49c64d0454f4",
                  "type": "toc"
                },
                {
                  "id": "acec7b82-1df3-52cd-3375-c07c0b435961",
                  "type": "command-param",
                  "head": "defaults",
                  "description": "When true, disables interactive input prompts for options with a default.",
                  "name": "defaults",
                  "headId": "defaults",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "bfa89e9f-0be8-133d-3ccc-fc3c76a629c3",
                  "type": "command-param",
                  "head": "dryRun",
                  "description": "When true, run through and report activity without writing out results.",
                  "name": "dryRun",
                  "headId": "dryRun",
                  "paramType": "boolean",
                  "default": "false",
                  "aliases": "d"
                },
                {
                  "id": "4db6d3da-d7d8-ba56-d6e1-0763b16b1b79",
                  "type": "command-param",
                  "head": "force",
                  "description": "When true, force overwriting of existing files.",
                  "name": "force",
                  "headId": "force",
                  "paramType": "boolean",
                  "default": "false",
                  "aliases": "f"
                },
                {
                  "id": "acaa1c2d-aef4-33ad-a252-2f98a31b6f5f",
                  "type": "command-param",
                  "head": "help",
                  "description": "Shows a help message for this command in the console.",
                  "name": "help",
                  "headId": "help",
                  "values": "true|false|json|JSON",
                  "default": "false",
                  "paramType": ""
                },
                {
                  "id": "953960e1-ef02-b739-5762-5167d9209854",
                  "type": "command-param",
                  "head": "interactive",
                  "description": "When false, disables interactive input prompts.",
                  "name": "interactive",
                  "headId": "interactive",
                  "paramType": "boolean",
                  "default": "false"
                }
              ],
              "title": "ng add",
              "url": "command-ng-add"
            },
            {
              "id": "693a33ac-6b03-2355-d43d-bbe33abd6d13",
              "entries": [
                {
                  "id": "26c04613-d28a-70da-0d5f-48f88fbc29b4",
                  "type": "text",
                  "text": "```\nng xi18n [project] [--[option]=[value]]\nng i18n-extract\n```\n\nExtract i18n messages from the templates.\n\nAlias for the command:\n \n```\nng run [project]:extract-i18n\n```\n\n`[project]` — the name of the project to build.\n\n---\n\nBy default for applications CLI uses builder [`extract-i18n`](../builder-extract-i18n).\n\nA builder runs with default configuration options specified in the workspace configuration file (`angular.json`) or with a named alternative configuration.\n\nThe configuration options generally correspond to the command options.\nYou can override individual configuration defaults by specifying the corresponding options on the command line.\nThe command can accept option names given in either dash-case or camelCase.\nNote that in the configuration file, you must specify names in camelCase.\n\nSome additional options can only be set through the configuration file,\neither by direct editing or with the `ng config` command.\n\n"
                },
                {
                  "id": "2c9272e3-aea1-3954-13c8-a1a6ba0aac65",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Internationalization (i18n)",
                      "url": "https://angular.io/guide/i18n",
                      "lang": "en"
                    },
                    {
                      "label": "Angular: Introduction to Internationalization (i18n)",
                      "url": "https://medium.com/frontend-fun/angular-introduction-to-internationalization-i18n-28226a85e04e",
                      "lang": "en"
                    },
                    {
                      "url": "https://angular.io/cli/xi18n",
                      "label": "Angular - ng xi18n"
                    }
                  ]
                },
                {
                  "id": "16273aad-a1b8-d70e-8c56-48b68e32ff7c",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "10e16371-4cdc-6255-d1cc-9aa5bad5ecb7",
                  "type": "command-param",
                  "head": "configuration",
                  "description": "Specify the configuration to use. ",
                  "name": "configuration",
                  "headId": "configuration",
                  "aliases": "c",
                  "paramType": "string"
                },
                {
                  "id": "d0fa7830-f788-63e6-553b-93bcd290bc04",
                  "type": "text",
                  "text": "### Go to [`extract-i18n` builder options](../builder-extract-i18n).\n"
                }
              ],
              "title": "ng xi18n",
              "url": "command-ng-xi18n"
            },
            {
              "id": "b702f5f1-e859-fc76-8df2-0b96027ae0d9",
              "entries": [
                {
                  "id": "d70170f4-c0b1-3889-890a-6e9863969271",
                  "type": "text",
                  "text": "```\nng update [package] [--[argument]=[value]]\n```\n\nUpdates the current application to latest versions.\n"
                },
                {
                  "id": "1e30bc24-1a1f-0f5d-0642-045cd04b4aa2",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Updating your Angular projects",
                      "url": "https://angular.io/guide/updating",
                      "lang": "en"
                    },
                    {
                      "label": "Angular Update Guide",
                      "url": "https://update.angular.io/",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "592f6a66-f7af-89a1-19ac-e99a1b3efa52",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "f609ec3a-f8fb-3875-54cc-c5a89e405173",
                  "type": "toc"
                },
                {
                  "id": "78788221-6baa-254e-a7b9-b595499e8f6e",
                  "type": "command-param",
                  "head": "all",
                  "description": "Whether to update all packages in `package.json`.",
                  "name": "all",
                  "headId": "all",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "630035a7-9426-c8ff-4a58-04e421e43cef",
                  "type": "command-param",
                  "head": "dryRun",
                  "description": "Run through without making any changes. ",
                  "name": "dryRun",
                  "headId": "dryRun",
                  "paramType": "boolean",
                  "aliases": "d",
                  "default": "false"
                },
                {
                  "id": "3df7e2f9-5c6e-f998-e286-052901299d64",
                  "type": "command-param",
                  "head": "force",
                  "description": "If false, will error out if installed packages are incompatible with the update. ",
                  "name": "force",
                  "headId": "force",
                  "paramType": "boolean",
                  "aliases": "f",
                  "default": "false"
                },
                {
                  "id": "67e498d3-abf4-9762-d291-3aaf5bbd35c4",
                  "type": "command-param",
                  "head": "from",
                  "description": "Version from which to migrate from. Only available with a single package being updated, and only on migration only.",
                  "name": "from",
                  "headId": "from",
                  "paramType": "string"
                },
                {
                  "id": "f61764d8-e623-7ba8-760a-adcda44f1129",
                  "type": "command-param",
                  "head": "migrateOnly",
                  "description": "Only perform a migration, does not update the installed version.",
                  "name": "migrateOnly",
                  "headId": "migrateOnly",
                  "paramType": "boolean"
                },
                {
                  "id": "3daab321-69ce-77ef-dcf8-d705d250771a",
                  "type": "command-param",
                  "head": "next",
                  "description": "Use the largest version, including beta and RCs.",
                  "name": "next",
                  "headId": "next",
                  "paramType": "boolean"
                },
                {
                  "id": "6de52a9e-1185-f787-8c00-1db2274c58c6",
                  "type": "command-param",
                  "head": "packages",
                  "description": "The names of package(s) to update.",
                  "name": "packages",
                  "headId": "packages"
                },
                {
                  "id": "0852c79a-7ed6-9930-bb9d-683006e96e3b",
                  "type": "command-param",
                  "head": "registry",
                  "description": "The NPM registry to use.",
                  "name": "registry",
                  "headId": "registry",
                  "paramType": "string"
                },
                {
                  "id": "dda20875-e5d1-b203-7914-261391242772",
                  "type": "command-param",
                  "head": "to",
                  "description": "Version up to which to apply migrations. Only available with a single package being updated, and only on migrations only. Requires from to be specified. Default to the installed version detected.",
                  "name": "to",
                  "headId": "to",
                  "paramType": "string"
                }
              ],
              "title": "ng update",
              "url": "command-ng-update"
            },
            {
              "id": "2b382f38-8cfc-50d4-49e6-68163b8ef33e",
              "entries": [
                {
                  "id": "53cb7a2c-4afd-0e1a-04f7-04b34dd97f00",
                  "type": "text",
                  "text": "```\nng config [key] [value]\n```\n\nGet/set configuration values. `[key]` should be in JSON path format. Example: `a[3].foo.bar[2]`. \n\nIf only the `[key]` is provided it will get the value. If both the `[key]` and `[value]` are provided it will set the value.\n\n\n## Options"
                },
                {
                  "id": "a4584115-cecf-e6bd-7aad-9dcff1bbbedc",
                  "type": "command-param",
                  "head": "global",
                  "description": "Get/set the value in the global configuration (in your home directory). ",
                  "name": "global",
                  "headId": "global",
                  "aliases": "g",
                  "paramType": "boolean"
                }
              ],
              "title": "ng config",
              "url": "command-ng-config"
            },
            {
              "id": "d2187aab-771d-c34c-a4e8-3f63487e634d",
              "entries": [
                {
                  "id": "9650b529-e24d-8ca0-fbec-736926a842fe",
                  "type": "text",
                  "text": "```\nng doc [search term]\n```\n\nOpens the official Angular API documentation for a given keyword on [angular.io](https://angular.io).\n\n\n## Options"
                },
                {
                  "id": "3b0f6618-e3a8-5adf-007a-cd01706fe1e7",
                  "type": "command-param",
                  "head": "search",
                  "description": "Search whole angular.io instead of just api. ",
                  "name": "search",
                  "headId": "search",
                  "aliases": "s",
                  "paramType": "boolean"
                }
              ],
              "title": "ng doc",
              "url": "command-ng-doc"
            },
            {
              "id": "b2def587-9d48-4758-a11e-223a9adbdaf6",
              "entries": [
                {
                  "id": "bee6446c-52fb-6ebd-ff99-8e503b07a85f",
                  "type": "text",
                  "text": "Angular CLI version 6 changed a format of configuration file and introduced builders.\n\nIn `angular.json` you can define different ways to build/serve of your application.\n\nFor running builds use the command [`ng run`](../command-ng-run).\n\nAs schematics, builders are installed via package manager (npm). This section describes the default Angular builders from package `@angular-devkit/build-angular`.\n"
                },
                {
                  "id": "54f0e8e0-b97b-d6c6-2d6e-c4c9654cab4f",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Understanding the Angular CLI Workspace File",
                      "url": "https://nitayneeman.com/posts/understanding-the-angular-cli-workspace-file/",
                      "lang": "en"
                    },
                    {
                      "lang": "en",
                      "label": "Angular CLI — Demystifying the workspace",
                      "url": "https://blog.nrwl.io/angular-cli-demystifying-the-workspace-7f59ffaab4cb"
                    },
                    {
                      "label": "Introducing CLI Builders",
                      "url": "https://blog.angular.io/introducing-cli-builders-d012d4489f1b"
                    }
                  ]
                }
              ],
              "title": "Builders",
              "url": "builders"
            },
            {
              "id": "7f70ef30-12c7-eed2-ada3-9acbf9aa5a3a",
              "entries": [
                {
                  "id": "e2d26c0a-ce34-3d09-1a6b-a6b761415e90",
                  "type": "text",
                  "text": "ID: `@angular-devkit/build-angular:app-shell`\n\n"
                },
                {
                  "id": "8af2912b-46a9-2c90-f740-90e1e16f56b2",
                  "type": "hint",
                  "text": "App shell is a way to render a portion of your application via a route at build time. This gives users a meaningful first paint of your application because the browser does not need to initialize any JavaScript, just rendering the HTML."
                },
                {
                  "id": "672c8574-b973-5edc-e4e0-673627733071",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular App Shell - Boosting Application Startup Performance",
                      "url": "https://blog.angular-university.io/angular-app-shell/",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "2a6f4b52-eca4-01cf-03af-1b4c3d1e5b48",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "4fda7112-4599-bdb2-915d-f0364132b847",
                  "type": "toc"
                },
                {
                  "id": "b6d1ce5f-0685-4280-6917-bf42c5f81f0a",
                  "type": "command-param",
                  "head": "appModuleBundle",
                  "description": "Script that exports the Server AppModule to render. This should be the main JavaScript outputted by the server target. By default we will resolve the outputPath of the serverTarget and find a bundle named 'main' in it (whether or not there's a hash tag).",
                  "name": "appModuleBundle",
                  "headId": "appModuleBundle",
                  "paramType": "string"
                },
                {
                  "id": "63e0af51-9290-0dce-9e92-59eb8b359b13",
                  "type": "command-param",
                  "head": "browserTarget",
                  "description": "Target to build.",
                  "name": "browserTarget",
                  "headId": "browserTarget",
                  "paramType": "string"
                },
                {
                  "id": "5aaecc83-aeea-f4f9-276f-a669f31d9d85",
                  "type": "command-param",
                  "head": "inputIndexPath",
                  "description": "The input path for the `index.html` file. By default uses the output index.html of the browser target.",
                  "name": "inputIndexPath",
                  "headId": "inputIndexPath",
                  "paramType": "string"
                },
                {
                  "id": "ce05d65e-b967-7dc0-95d7-0e7c3bb15bca",
                  "type": "command-param",
                  "head": "outputIndexPath",
                  "description": "The output path of the index.html file. By default will overwrite the input file.",
                  "name": "outputIndexPath",
                  "headId": "outputIndexPath",
                  "paramType": "string"
                },
                {
                  "id": "68cfd376-2089-1968-616c-a89b1ac6a2cb",
                  "type": "command-param",
                  "head": "route",
                  "description": "The route to render.",
                  "name": "route",
                  "headId": "route",
                  "paramType": "string",
                  "default": "/"
                },
                {
                  "id": "d1287605-e9a7-edf2-4f44-09a62a86016e",
                  "type": "command-param",
                  "head": "serverTarget",
                  "description": "Server target to use for rendering the app shell.",
                  "name": "serverTarget",
                  "headId": "serverTarget",
                  "paramType": "string"
                }
              ],
              "title": "App-shell builder",
              "url": "builder-app-shell",
              "generationType": "cli-builder",
              "generationCliBuilderName": "appShell"
            },
            {
              "id": "34df1bf8-ad15-4dfa-839d-3448a8f20c45",
              "entries": [
                {
                  "id": "756a37bd-55b3-30ea-ed3d-7dec9f0d4a31",
                  "type": "text",
                  "text": "ID: `@angular-devkit/build-angular:browser`\n"
                },
                {
                  "id": "6dda87e1-a0a3-59f6-de42-e3e5431d97d0",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "c6406f53-3b4f-6c01-2f82-8df6417c08fa",
                  "type": "toc"
                },
                {
                  "id": "22cda497-7f8e-c0e5-54e6-12d4a800f12a",
                  "type": "command-param",
                  "head": "aot",
                  "description": "Build using Ahead of Time compilation.",
                  "name": "aot",
                  "headId": "aot",
                  "paramType": "boolean"
                },
                {
                  "id": "dd54763d-8cf6-3752-e918-f94475f03103",
                  "type": "command-param",
                  "head": "assets",
                  "description": "List of static application assets.",
                  "name": "assets",
                  "headId": "assets",
                  "paramType": "array"
                },
                {
                  "id": "d39aaf64-bec3-0e38-4b7c-7715c5d242f9",
                  "type": "command-param",
                  "head": "baseHref",
                  "description": "Base URL for the application being built.",
                  "name": "baseHref",
                  "headId": "baseHref",
                  "paramType": ""
                },
                {
                  "id": "f2b0ebc8-9006-2f3f-346e-3b256b54563c",
                  "type": "command-param",
                  "head": "budgets",
                  "description": "Budget thresholds to ensure parts of your application stay within boundaries which you set.\n",
                  "name": "budgets",
                  "headId": "budgets",
                  "paramType": "array"
                },
                {
                  "id": "76e90db6-bd90-40f3-8565-fb5c82b02f6c",
                  "type": "command-param",
                  "head": "buildEventLog",
                  "description": "Output file path for [Build Event Protocol](https://docs.bazel.build/versions/master/build-event-protocol.html) events.",
                  "headId": "buildEventLog",
                  "name": "buildEventLog",
                  "paramType": "string"
                },
                {
                  "id": "63f4e0a1-5832-92c0-8982-399ce851860d",
                  "type": "command-param",
                  "head": "buildOptimizer",
                  "description": "Enables @angular-devkit/build-optimizer optimizations when using the 'aot' option.",
                  "name": "buildOptimizer",
                  "headId": "buildOptimizer",
                  "paramType": "boolean"
                },
                {
                  "id": "d9add9eb-4142-fcd9-a623-24fccf4a9f26",
                  "type": "command-param",
                  "head": "commonChunk",
                  "description": "Use a separate bundle containing code used across multiple bundles.",
                  "name": "commonChunk",
                  "headId": "commonChunk",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "ffe66cbb-878a-c74d-fc32-0fbe68d9f7c6",
                  "type": "command-param",
                  "name": "crossOrigin",
                  "head": "crossOrigin",
                  "headId": "crossOrigin",
                  "paramType": "string",
                  "default": "none",
                  "description": "Define the crossorigin attribute setting of elements that provide CORS support."
                },
                {
                  "id": "73a251b3-b1d1-6971-fd0b-3553ca5fb7e6",
                  "type": "command-param",
                  "head": "deleteOutputPath",
                  "description": "Delete the output path before building.",
                  "name": "deleteOutputPath",
                  "headId": "deleteOutputPath",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "7764e897-7651-eb59-f129-f499146bcbbc",
                  "type": "command-param",
                  "head": "deployUrl",
                  "description": "URL where files will be deployed.",
                  "name": "deployUrl",
                  "headId": "deployUrl",
                  "paramType": "string"
                },
                {
                  "id": "3ffe15ef-b53a-44a4-dd75-8e8882a9585e",
                  "type": "command-param",
                  "head": "es5BrowserSupport",
                  "description": "Enables conditionally loaded ES2015 polyfills.",
                  "headId": "es5BrowserSupport",
                  "name": "es5BrowserSupport",
                  "paramType": "boolean",
                  "default": "false",
                  "tutorialsEntry": {
                    "id": "16222192-4f32-bb6d-12fa-ebbb8d9c0c5e",
                    "type": "tutorials",
                    "links": [
                      {
                        "lang": "en",
                        "label": "https://netbasal.com/prevent-loading-redundant-es2015-browser-polyfills-thanks-to-angular-cli-177494c5244d",
                        "url": "https://netbasal.com/prevent-loading-redundant-es2015-browser-polyfills-thanks-to-angular-cli-177494c5244d"
                      }
                    ]
                  }
                },
                {
                  "id": "7b9eda73-7c84-d05e-87ee-6164aa5e112f",
                  "type": "command-param",
                  "head": "evalSourceMap",
                  "description": "Output in-file eval sourcemaps.",
                  "name": "evalSourceMap",
                  "headId": "evalSourceMap",
                  "paramType": "boolean"
                },
                {
                  "id": "b9ccc660-1c69-9a7d-81da-1b6a2241b205",
                  "type": "command-param",
                  "head": "extractCss",
                  "description": "Extract css from global styles onto css files instead of js ones.",
                  "name": "extractCss",
                  "headId": "extractCss",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "1ace2404-f083-bdba-a641-d4cc179a2162",
                  "type": "command-param",
                  "head": "extractLicenses",
                  "description": "Extract all licenses in a separate file, in the case of production builds only.",
                  "name": "extractLicenses",
                  "headId": "extractLicenses",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "9d26f41f-2974-494a-7faa-8a382037d1c4",
                  "type": "command-param",
                  "head": "fileReplacements",
                  "description": "Replace files with other files in the build.",
                  "name": "fileReplacements",
                  "headId": "fileReplacements",
                  "paramType": "array",
                  "tutorialsEntry": {
                    "id": "8ee63a8b-dfeb-d6b2-5577-0c75d485c011",
                    "type": "tutorials",
                    "links": [
                      {
                        "label": "Becoming an Angular Environmentalist",
                        "url": "https://blog.angularindepth.com/becoming-an-angular-environmentalist-45a48f7c20d8",
                        "lang": "en"
                      }
                    ]
                  }
                },
                {
                  "id": "0b7823dc-e0ea-f9e0-54cb-4cf7c5429afa",
                  "type": "command-param",
                  "head": "forkTypeChecker",
                  "description": "Run the TypeScript type checker in a forked process.",
                  "name": "forkTypeChecker",
                  "headId": "forkTypeChecker",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "3df9f0de-0701-22fb-5fbf-481384f1dff1",
                  "type": "command-param",
                  "head": "i18nFile",
                  "description": "Localization file to use for i18n.",
                  "name": "i18nFile",
                  "headId": "i18nFile",
                  "paramType": "string"
                },
                {
                  "id": "c55566b9-1e5f-1626-e882-1c56552d3d4e",
                  "type": "command-param",
                  "head": "i18nFormat",
                  "description": "Format of the localization file specified with `i18nFile`.",
                  "name": "i18nFormat",
                  "headId": "i18nFormat",
                  "paramType": "string"
                },
                {
                  "id": "ab3a689d-eddb-e41b-ff82-7ef1f0423687",
                  "type": "command-param",
                  "head": "i18nLocale",
                  "description": "Locale to use for i18n.",
                  "name": "i18nLocale",
                  "headId": "i18nLocale",
                  "paramType": "string"
                },
                {
                  "id": "e4454a59-3edb-e76b-c66d-4a604f0259c3",
                  "type": "command-param",
                  "head": "i18nMissingTranslation",
                  "description": "How to handle missing translations for i18n.",
                  "name": "i18nMissingTranslation",
                  "headId": "i18nMissingTranslation",
                  "paramType": "string"
                },
                {
                  "id": "a31e26b6-5987-e755-27ea-36ce22aa9893",
                  "type": "command-param",
                  "head": "index",
                  "description": "The name of the index HTML file.",
                  "name": "index",
                  "headId": "index",
                  "paramType": "string"
                },
                {
                  "id": "401c94e4-be8d-e468-3d0d-59ca63ad68ae",
                  "type": "command-param",
                  "head": "lazyModules",
                  "description": "List of additional NgModule files that will be lazy loaded. Lazy router modules with be discovered automatically.",
                  "name": "lazyModules",
                  "headId": "lazyModules",
                  "paramType": "array"
                },
                {
                  "id": "ab58ab24-340e-7b02-22dd-85d7f90dc20a",
                  "type": "command-param",
                  "name": "localize",
                  "head": "localize",
                  "headId": "localize",
                  "paramType": "",
                  "default": ""
                },
                {
                  "id": "e08219ed-d5cb-8316-18c8-a805797b8208",
                  "type": "command-param",
                  "head": "main",
                  "description": "The name of the main entry-point file.",
                  "name": "main",
                  "headId": "main",
                  "paramType": "string"
                },
                {
                  "id": "8aee7385-b27c-ca6c-22d0-92cc120871c6",
                  "type": "command-param",
                  "head": "namedChunks",
                  "description": "Use file name for lazy loaded chunks.",
                  "name": "namedChunks",
                  "headId": "namedChunks",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "0cd568e9-9ac8-b2c4-d7c1-9fdf6592af40",
                  "type": "command-param",
                  "head": "ngswConfigPath",
                  "description": "Path to ngsw-config.json.",
                  "headId": "ngswConfigPath",
                  "name": "ngswConfigPath",
                  "paramType": "string"
                },
                {
                  "id": "6317853c-03b2-8c96-cb8b-63d83e2d60cb",
                  "type": "command-param",
                  "head": "optimization",
                  "description": "Defines the optimization level of the build.\n\nIt also can take a more fine-grained value, as you can now give an object to configure if you want optimize only the scripts or styles.\n\n```json\n\"optimization\": {\n  \"scripts\": true,\n  \"styles\": true\n}\n```",
                  "name": "optimization",
                  "headId": "optimization",
                  "paramType": "boolean | Object",
                  "default": "false"
                },
                {
                  "id": "1484ed50-d1fd-523a-f25f-bdc13e0890b0",
                  "type": "command-param",
                  "head": "outputHashing",
                  "description": "Define the output filename cache-busting hashing mode.",
                  "name": "outputHashing",
                  "headId": "outputHashing",
                  "paramType": "string",
                  "values": "none,all,media,bundles",
                  "default": "none"
                },
                {
                  "id": "f5901ded-a8b8-ff3d-dc5b-09db7a3bb4a4",
                  "type": "command-param",
                  "head": "outputPath",
                  "description": "Path where output will be placed.",
                  "name": "outputPath",
                  "headId": "outputPath",
                  "paramType": "string"
                },
                {
                  "id": "fe10e0c5-9a4d-0bdf-0d4d-f8310b1846af",
                  "type": "command-param",
                  "head": "poll",
                  "description": "Enable and define the file watching poll time period in milliseconds.",
                  "name": "poll",
                  "headId": "poll",
                  "paramType": "number"
                },
                {
                  "id": "d898f7a6-11d3-2cab-215e-f4a595de0328",
                  "type": "command-param",
                  "head": "polyfills",
                  "description": "The name of the polyfills file.",
                  "name": "polyfills",
                  "headId": "polyfills",
                  "paramType": "string"
                },
                {
                  "id": "eb5c9cd7-e181-f800-266b-d4e3216b9503",
                  "type": "command-param",
                  "head": "preserveSymlinks",
                  "description": "Do not use the real path when resolving modules.",
                  "name": "preserveSymlinks",
                  "headId": "preserveSymlinks",
                  "paramType": "boolean"
                },
                {
                  "id": "f99f0a6f-b86b-26dc-414c-c02264d9efdd",
                  "type": "command-param",
                  "head": "progress",
                  "description": "Log progress to the console while building.",
                  "name": "progress",
                  "headId": "progress",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "34a61d40-79a0-17ac-203e-9b734c37261a",
                  "type": "command-param",
                  "name": "rebaseRootRelativeCssUrls",
                  "head": "rebaseRootRelativeCssUrls",
                  "headId": "rebaseRootRelativeCssUrls",
                  "paramType": "boolean",
                  "default": "",
                  "description": "Change root relative URLs in stylesheets to include base HREF and deploy URL. Use only for compatibility and transition. The behavior of this option is non-standard and will be removed in the next major release."
                },
                {
                  "id": "ec0979a8-b096-70a5-5758-bee8c75d5504",
                  "type": "command-param",
                  "head": "resourcesOutputPath",
                  "description": "Specify where resources will be placed, relative to `outputPath`.",
                  "headId": "resourcesOutputPath",
                  "name": "resourcesOutputPath",
                  "paramType": "string",
                  "hintEntry": {
                    "id": "f857b0a7-6cc3-a7de-fcef-f0c91e196265",
                    "type": "hint",
                    "text": "You can ouput your CSS in other folder."
                  }
                },
                {
                  "id": "cef1fb10-6afa-72e7-2391-7bf41a4153fe",
                  "type": "command-param",
                  "head": "scripts",
                  "description": "Global scripts to be included in the build.",
                  "name": "scripts",
                  "headId": "scripts",
                  "paramType": "array"
                },
                {
                  "id": "daf036e4-96be-239c-02a9-0b6293ee1ae3",
                  "type": "command-param",
                  "head": "serviceWorker",
                  "description": "Generates a service worker config for production builds.",
                  "name": "serviceWorker",
                  "headId": "serviceWorker",
                  "paramType": "boolean"
                },
                {
                  "id": "b7e4f5ed-f732-fd6f-7249-09482cc452eb",
                  "type": "command-param",
                  "head": "showCircularDependencies",
                  "description": "Show circular dependency warnings on builds.",
                  "name": "showCircularDependencies",
                  "headId": "showCircularDependencies",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "8d019119-ea0a-3595-bca3-0e8d8dfb4c7b",
                  "type": "command-param",
                  "head": "skipAppShell",
                  "description": "Flag to prevent building an app shell.",
                  "name": "skipAppShell",
                  "headId": "skipAppShell",
                  "paramType": "boolean"
                },
                {
                  "id": "44d8c9ff-befc-c12a-7ef2-fa9eda833d5c",
                  "type": "command-param",
                  "head": "sourceMap",
                  "description": "Output sourcemaps.\n\nIt also can take a more fine-grained value, as you can now give an object to configure if you want only the scripts source maps, the styles source maps, the vendor source maps, or the hidden source maps.\n\n```json\n\"sourceMap\": {\n  \"scripts\": true,\n  \"styles\": true,\n  \"hidden\": true,\n  \"vendor\": true\n}\n```",
                  "name": "sourceMap",
                  "headId": "sourceMap",
                  "paramType": "boolean | Object",
                  "default": "true"
                },
                {
                  "id": "c25fa5ba-eee6-48f9-0164-2f103d655b85",
                  "type": "command-param",
                  "head": "statsJson",
                  "description": "Generates a 'stats.json' file which can be analyzed using tools such as: `#webpack-bundle-analyzer` or https://webpack.github.io/analyse.",
                  "name": "statsJson",
                  "headId": "statsJson",
                  "paramType": "boolean",
                  "hintEntry": {
                    "id": "039be725-791f-efe7-5849-096cee915618",
                    "type": "hint",
                    "text": "View generated stats:\n* `npm install -g webpack-bundle-analyzer`\n* `webpack-bundle-analyzer dist/stats.json`"
                  },
                  "tutorialsEntry": {
                    "id": "a94cd89d-672e-6cbb-1971-578c4747f825",
                    "type": "tutorials",
                    "links": [
                      {
                        "label": "Analyzing bundle size with the Angular CLI and Webpack",
                        "url": "https://coryrylan.com/blog/analyzing-bundle-size-with-the-angular-cli-and-webpack",
                        "lang": "en"
                      }
                    ]
                  }
                },
                {
                  "id": "e3e29950-ffd9-eda1-6f2d-ae17a09e2e73",
                  "type": "command-param",
                  "head": "stylePreprocessorOptions",
                  "description": "Options to pass to style preprocessors.",
                  "name": "stylePreprocessorOptions",
                  "headId": "stylePreprocessorOptions",
                  "paramType": "object",
                  "tutorialsEntry": {
                    "id": "fbd57d86-08f5-7ea2-1078-74aaf32d0bdf",
                    "type": "tutorials",
                    "links": [
                      {
                        "lang": "en",
                        "label": "Shortcut to Importing Styles Files in Components",
                        "url": "https://scotch.io/tutorials/angular-shortcut-to-importing-styles-files-in-components"
                      }
                    ]
                  }
                },
                {
                  "id": "5704f8ed-835a-8eb3-f961-7dbecacd5722",
                  "type": "command-param",
                  "head": "styles",
                  "description": "Global styles to be included in the build.",
                  "name": "styles",
                  "headId": "styles",
                  "paramType": "array"
                },
                {
                  "id": "4cd8ace4-254e-9dab-8c10-f18f499b07fa",
                  "type": "command-param",
                  "head": "subresourceIntegrity",
                  "description": "Enables the use of [subresource integrity](https://www.maxcdn.com/one/visual-glossary/subresource-integrity/) validation.",
                  "name": "subresourceIntegrity",
                  "headId": "subresourceIntegrity",
                  "paramType": "boolean"
                },
                {
                  "id": "b3ca792d-e59a-5873-5de2-f218736675da",
                  "type": "command-param",
                  "head": "tsConfig",
                  "description": "The name of the TypeScript configuration file.",
                  "name": "tsConfig",
                  "headId": "tsConfig",
                  "paramType": "string"
                },
                {
                  "id": "f13264a1-5ac0-0c30-5d24-85ae9d30cbda",
                  "type": "command-param",
                  "head": "vendorChunk",
                  "description": "Use a separate bundle containing only vendor libraries.",
                  "name": "vendorChunk",
                  "headId": "vendorChunk",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "00e44116-b7e7-de16-1443-8b8a35a92583",
                  "type": "command-param",
                  "head": "vendorSourceMap",
                  "description": "Resolve vendor packages sourcemaps.",
                  "headId": "vendorSourceMap",
                  "name": "vendorSourceMap",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "5d18dd14-bbe7-b753-80eb-9fbed1d711c8",
                  "type": "command-param",
                  "head": "verbose",
                  "description": "Adds more details to output logging.",
                  "name": "verbose",
                  "headId": "verbose",
                  "paramType": "boolean"
                },
                {
                  "id": "4d367557-a5e5-4762-7897-826a859ef9a9",
                  "type": "command-param",
                  "head": "watch",
                  "description": "Run build when files change.",
                  "name": "watch",
                  "headId": "watch",
                  "paramType": "boolean"
                },
                {
                  "id": "635eda24-d19a-e0eb-ca28-c7ef164f68ea",
                  "type": "command-param",
                  "name": "webWorkerTsConfig",
                  "head": "webWorkerTsConfig",
                  "headId": "webWorkerTsConfig",
                  "paramType": "string",
                  "default": "",
                  "description": "TypeScript configuration for Web Worker modules."
                }
              ],
              "title": "Browser builder",
              "url": "builder-browser",
              "generationType": "cli-builder",
              "generationCliBuilderName": "browser"
            },
            {
              "id": "2b0488ef-2a78-9ddd-adb7-af42dc877e53",
              "entries": [
                {
                  "id": "3927c5c0-d935-42cd-33ee-3003c8b31a18",
                  "type": "text",
                  "text": "ID: `@angular-devkit/build-angular:dev-server`\n\n## Options"
                },
                {
                  "id": "d763879f-fdf3-cc55-5031-df449111d390",
                  "type": "toc"
                },
                {
                  "id": "a992285c-d61c-ca8d-8bf3-19fe00954898",
                  "type": "command-param",
                  "name": "allowedHosts",
                  "head": "allowedHosts",
                  "headId": "allowedHosts",
                  "paramType": "array",
                  "default": [],
                  "description": "Whitelist of hosts that are allowed to access the dev server."
                },
                {
                  "id": "db0a8cdb-5b3e-6952-a93e-135c707d6668",
                  "type": "command-param",
                  "head": "aot",
                  "description": "Build using Ahead of Time compilation.",
                  "name": "aot",
                  "headId": "aot",
                  "paramType": "boolean"
                },
                {
                  "id": "34a29db3-057b-d5b7-27e3-215280290b58",
                  "type": "command-param",
                  "head": "baseHref",
                  "description": "Base url for the application being built.",
                  "name": "baseHref",
                  "headId": "baseHref",
                  "paramType": "string"
                },
                {
                  "id": "f9009c9d-98e6-e5f1-9615-2fdc56c25c6b",
                  "type": "command-param",
                  "head": "browserTarget",
                  "description": "Target to serve.",
                  "name": "browserTarget",
                  "headId": "browserTarget",
                  "paramType": "string"
                },
                {
                  "id": "85cc214d-cbba-856a-ffd2-1af9c5013469",
                  "type": "command-param",
                  "head": "commonChunk",
                  "description": "Use a separate bundle containing code used across multiple bundles.",
                  "name": "commonChunk",
                  "headId": "commonChunk",
                  "paramType": "boolean"
                },
                {
                  "id": "508d90e3-d338-f6d0-e56b-dde67ff676c9",
                  "type": "command-param",
                  "head": "deployUrl",
                  "description": "URL where files will be deployed.",
                  "name": "deployUrl",
                  "headId": "deployUrl",
                  "paramType": "string"
                },
                {
                  "id": "a8e0c0a3-572f-4f83-ea9c-f5542016da9b",
                  "type": "command-param",
                  "head": "disableHostCheck",
                  "description": "Don't verify connected clients are part of allowed hosts.",
                  "name": "disableHostCheck",
                  "headId": "disableHostCheck",
                  "paramType": "boolean"
                },
                {
                  "id": "62498127-91a2-9102-2f76-19b2ec6791eb",
                  "type": "command-param",
                  "head": "evalSourceMap",
                  "description": "Output in-file eval sourcemaps.",
                  "name": "evalSourceMap",
                  "headId": "evalSourceMap",
                  "paramType": "boolean"
                },
                {
                  "id": "9f472888-42c0-9d1e-c2ec-3ee077b5b4f8",
                  "type": "command-param",
                  "head": "hmr",
                  "description": "Enable hot module replacement.",
                  "name": "hmr",
                  "headId": "hmr",
                  "paramType": "boolean"
                },
                {
                  "id": "366531cd-6e52-b701-326e-a91c8e24cadd",
                  "type": "command-param",
                  "head": "hmrWarning",
                  "description": "Show a warning when the --hmr option is enabled.",
                  "name": "hmrWarning",
                  "headId": "hmrWarning",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "d3f6a783-ee08-e2b1-6f57-ce4a253215cb",
                  "type": "command-param",
                  "head": "host",
                  "description": "Host to listen on.",
                  "name": "host",
                  "headId": "host",
                  "paramType": "string",
                  "aliases": "",
                  "default": "localhost"
                },
                {
                  "id": "ab7df1a4-cbdd-baec-bbd9-1e5f291e8909",
                  "type": "command-param",
                  "head": "liveReload",
                  "description": "Whether to reload the page on change, using live-reload.",
                  "name": "liveReload",
                  "headId": "liveReload",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "e80559c3-cc5d-8609-4f77-9f09e6fde43b",
                  "type": "command-param",
                  "head": "open",
                  "description": "Opens the url in default browser.",
                  "name": "open",
                  "headId": "open",
                  "aliases": "o",
                  "paramType": "boolean"
                },
                {
                  "id": "c408e416-1693-8caa-cc5c-8fb34e6f6844",
                  "type": "command-param",
                  "head": "optimization",
                  "description": "Defines the optimization level of the build.",
                  "name": "optimization",
                  "headId": "optimization",
                  "paramType": "boolean"
                },
                {
                  "id": "d14c2ccd-19d8-2317-8009-0cbcc4e4386c",
                  "type": "command-param",
                  "head": "port",
                  "description": "Port to listen on.",
                  "name": "port",
                  "headId": "port",
                  "paramType": "number",
                  "default": "4200"
                },
                {
                  "id": "4f9e9348-b542-ff16-9050-0172e365a923",
                  "type": "command-param",
                  "head": "progress",
                  "description": "Log progress to the console while building.",
                  "name": "progress",
                  "headId": "progress",
                  "paramType": "boolean"
                },
                {
                  "id": "a77b30d3-188f-46cb-fc29-ef8989bbcc54",
                  "type": "command-param",
                  "head": "proxyConfig",
                  "description": "Proxy configuration file.",
                  "name": "proxyConfig",
                  "headId": "proxyConfig",
                  "paramType": "string"
                },
                {
                  "id": "d4ea1701-ead5-a327-0660-7907e3873d71",
                  "type": "command-param",
                  "head": "publicHost",
                  "description": "Specify the URL that the browser client will use.",
                  "name": "publicHost",
                  "headId": "publicHost",
                  "paramType": "string"
                },
                {
                  "id": "020fa534-0a63-df5d-0253-56098e5d35fd",
                  "type": "command-param",
                  "head": "servePath",
                  "description": "The pathname where the app will be served.",
                  "name": "servePath",
                  "headId": "servePath",
                  "paramType": "string"
                },
                {
                  "id": "f910381e-ca22-75d4-83e6-1071c18941e0",
                  "type": "command-param",
                  "head": "servePathDefaultWarning",
                  "description": "Show a warning when deploy-url/base-href use unsupported serve path values.",
                  "name": "servePathDefaultWarning",
                  "headId": "servePathDefaultWarning",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "243f699f-3dd6-c1e7-5fcb-4a390690b52e",
                  "type": "command-param",
                  "head": "sourceMap",
                  "description": "Output sourcemaps.",
                  "name": "sourceMap",
                  "headId": "sourceMap",
                  "paramType": "boolean"
                },
                {
                  "id": "bdd8e423-24f4-312c-1ad9-36088cd253f6",
                  "type": "command-param",
                  "head": "ssl",
                  "description": "Serve using HTTPS.",
                  "name": "ssl",
                  "headId": "ssl",
                  "paramType": "boolean"
                },
                {
                  "id": "2f223709-bfb3-b7c0-abfa-7155341c1f12",
                  "type": "command-param",
                  "head": "sslCert",
                  "description": "SSL certificate to use for serving HTTPS.",
                  "name": "sslCert",
                  "headId": "sslCert",
                  "paramType": "string"
                },
                {
                  "id": "762b018b-0a7c-d858-38f8-67afe68bfefb",
                  "type": "command-param",
                  "head": "sslKey",
                  "description": "SSL key to use for serving HTTPS.",
                  "name": "sslKey",
                  "headId": "sslKey",
                  "paramType": "string"
                },
                {
                  "id": "406ff0ef-7663-3017-795d-2dfa872f904c",
                  "type": "command-param",
                  "head": "vendorChunk",
                  "description": "Use a separate bundle containing only vendor libraries.",
                  "name": "vendorChunk",
                  "headId": "vendorChunk",
                  "paramType": "boolean"
                },
                {
                  "id": "036fcc28-deb7-ca19-24bd-198294d012c1",
                  "type": "command-param",
                  "head": "vendorSourceMap",
                  "description": "Resolve vendor packages sourcemaps.",
                  "headId": "vendorSourceMap",
                  "name": "vendorSourceMap",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "71d89a9e-1f3a-ce62-0dd3-464062c720db",
                  "type": "command-param",
                  "head": "verbose",
                  "description": "Adds more details to output logging.",
                  "name": "verbose",
                  "headId": "verbose",
                  "paramType": "boolean"
                },
                {
                  "id": "17073670-2f39-31ad-3f9e-9d2162c776f2",
                  "type": "command-param",
                  "head": "watch",
                  "description": "Rebuild on change.",
                  "name": "watch",
                  "headId": "watch",
                  "paramType": "boolean",
                  "default": "true"
                }
              ],
              "title": "Dev-server builder",
              "url": "builder-dev-server",
              "generationType": "cli-builder",
              "generationCliBuilderName": "devServer"
            },
            {
              "id": "1427e274-b46c-55a7-ba43-6094f217b076",
              "entries": [
                {
                  "id": "f3bd9436-cc11-65d3-636c-17f98bafb24a",
                  "type": "text",
                  "text": "ID: `@angular-devkit/build-angular:extract-i18n`"
                },
                {
                  "id": "b53189a9-6f34-c851-f91c-9aa07674c482",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Internationalization (i18n)",
                      "url": "https://angular.io/guide/i18n",
                      "lang": "en"
                    },
                    {
                      "label": "Angular: Introduction to Internationalization (i18n)",
                      "url": "https://medium.com/frontend-fun/angular-introduction-to-internationalization-i18n-28226a85e04e",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "843de2f2-ef73-1096-05be-4ef5d7a94f66",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "19ac5e9d-76ca-2693-b644-457a2b4c23dd",
                  "type": "toc"
                },
                {
                  "id": "7e05f660-d17d-e09a-17f6-a2bc9330111b",
                  "type": "command-param",
                  "head": "browserTarget",
                  "description": "Target to extract from.",
                  "name": "browserTarget",
                  "headId": "browserTarget",
                  "paramType": "string"
                },
                {
                  "id": "21362b1f-4c19-a11b-6554-af30d235d903",
                  "type": "command-param",
                  "name": "format",
                  "head": "format",
                  "headId": "format",
                  "paramType": "string",
                  "default": "xlf",
                  "description": "Output format for the generated file."
                },
                {
                  "id": "718930fe-f18e-64d3-b852-a32b1d5df1da",
                  "type": "command-param",
                  "head": "i18nFormat",
                  "description": "Output format for the generated file.",
                  "name": "i18nFormat",
                  "headId": "i18nFormat",
                  "paramType": "string",
                  "values": "xmb,xlf,xlif,xliff,xlf2,xliff2",
                  "default": "xlf"
                },
                {
                  "id": "075fd7d9-6c74-9add-17f1-7cf7e07aeeb5",
                  "type": "command-param",
                  "head": "i18nLocale",
                  "description": "Specifies the source language of the application.",
                  "name": "i18nLocale",
                  "headId": "i18nLocale",
                  "paramType": "string"
                },
                {
                  "id": "8ae8ab9c-ea53-b9ea-1bdb-5f96abfb936b",
                  "type": "command-param",
                  "head": "outFile",
                  "description": "Name of the file to output.",
                  "name": "outFile",
                  "headId": "outFile",
                  "paramType": "string"
                },
                {
                  "id": "2313b9ee-6d38-59a3-5029-8d0261a25e56",
                  "type": "command-param",
                  "head": "outputPath",
                  "description": "Path where output will be placed.",
                  "name": "outputPath",
                  "headId": "outputPath",
                  "paramType": "string"
                },
                {
                  "id": "8e39088b-5ac6-2b3c-23fc-32cb4cfe848d",
                  "type": "command-param",
                  "name": "progress",
                  "head": "progress",
                  "headId": "progress",
                  "paramType": "boolean",
                  "default": true,
                  "description": "Log progress to the console."
                }
              ],
              "title": "Extract-i18n builder",
              "url": "builder-extract-i18n",
              "generationType": "cli-builder",
              "generationCliBuilderName": "extracti18n"
            },
            {
              "id": "3b309737-d7bd-6d74-6cd8-1f7bdde2738d",
              "entries": [
                {
                  "id": "58d1bb71-7b9e-458e-12f4-552af8e77d87",
                  "type": "text",
                  "text": "ID: `@angular-devkit/build-angular:karma`\n"
                },
                {
                  "id": "adcf8658-d495-97ca-22f7-6bdde13bd0a0",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Testing",
                      "url": "https://angular.io/guide/testing",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "10261daf-6f29-62bd-d9b6-57aa8f55e377",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "6063bd20-2de5-ddc8-d315-c89df63d88c9",
                  "type": "toc"
                },
                {
                  "id": "6d698bbb-b1e4-d4ed-be3a-c79354cfe753",
                  "type": "command-param",
                  "head": "assets",
                  "description": "List of static application assets.",
                  "name": "assets",
                  "headId": "assets",
                  "paramType": "array"
                },
                {
                  "id": "e8df335a-23f6-ad8d-e8cb-b53aa33fa095",
                  "type": "command-param",
                  "head": "browsers",
                  "description": "Override which browsers tests are run against.",
                  "name": "browsers",
                  "headId": "browsers",
                  "default": "",
                  "paramType": "string"
                },
                {
                  "id": "ceee8a74-e5fe-97e3-4995-39d7985e5764",
                  "type": "command-param",
                  "head": "codeCoverage",
                  "description": "Output a code coverage report.",
                  "name": "codeCoverage",
                  "headId": "codeCoverage",
                  "paramType": "boolean"
                },
                {
                  "id": "7f034730-61ab-69d4-774a-079a50aab0e0",
                  "type": "command-param",
                  "head": "codeCoverageExclude",
                  "description": "Globs to exclude from code coverage.",
                  "name": "codeCoverageExclude",
                  "headId": "codeCoverageExclude",
                  "paramType": "array"
                },
                {
                  "id": "2b4c17d4-8f19-3835-4533-56f819a1b713",
                  "type": "command-param",
                  "head": "environment",
                  "description": "Defines the build environment.",
                  "name": "environment",
                  "headId": "environment",
                  "paramType": "string"
                },
                {
                  "id": "e9dbc6c1-109e-6933-e647-2125c30be207",
                  "type": "command-param",
                  "head": "fileReplacements",
                  "description": "Replace files with other files in the build.",
                  "name": "fileReplacements",
                  "headId": "fileReplacements",
                  "paramType": "array"
                },
                {
                  "id": "df6e584d-b74f-7573-a07d-345714bc80fb",
                  "type": "command-param",
                  "head": "karmaConfig",
                  "description": "The name of the Karma configuration file.",
                  "name": "karmaConfig",
                  "headId": "karmaConfig",
                  "paramType": "string"
                },
                {
                  "id": "b690021b-ab5d-93f7-0441-cbf5647c15ca",
                  "type": "command-param",
                  "head": "main",
                  "description": "The name of the main entry-point file.",
                  "name": "main",
                  "headId": "main",
                  "paramType": "string"
                },
                {
                  "id": "05459762-b2c4-dd35-d251-09ebb2ecfa3d",
                  "type": "command-param",
                  "head": "poll",
                  "description": "Enable and define the file watching poll time period in milliseconds.",
                  "name": "poll",
                  "headId": "poll",
                  "paramType": "number"
                },
                {
                  "id": "f50b13ff-609c-11e4-e329-e7983669cb45",
                  "type": "command-param",
                  "head": "polyfills",
                  "description": "The name of the polyfills file.",
                  "name": "polyfills",
                  "headId": "polyfills",
                  "paramType": "string"
                },
                {
                  "id": "dbd3fc9b-9af9-6023-f194-217bf7807bdf",
                  "type": "command-param",
                  "head": "preserveSymlinks",
                  "description": "Do not use the real path when resolving modules.",
                  "name": "preserveSymlinks",
                  "headId": "preserveSymlinks",
                  "paramType": "boolean"
                },
                {
                  "id": "ccd42a0d-854d-fec6-03f0-af4a20fc88bd",
                  "type": "command-param",
                  "head": "progress",
                  "description": "Log progress to the console while building.",
                  "name": "progress",
                  "headId": "progress",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "e4148bad-8339-a512-5831-15a1be12e16c",
                  "type": "command-param",
                  "name": "reporters",
                  "head": "reporters",
                  "headId": "reporters",
                  "paramType": "array",
                  "default": "",
                  "description": "Karma reporters to use. Directly passed to the karma runner."
                },
                {
                  "id": "594cb820-f571-bf6c-f075-9623aaa0f24e",
                  "type": "command-param",
                  "head": "scripts",
                  "description": "Global scripts to be included in the build.",
                  "name": "scripts",
                  "headId": "scripts",
                  "paramType": "array"
                },
                {
                  "id": "3e407908-83b2-1fce-092e-a82d84a0b342",
                  "type": "command-param",
                  "head": "sourceMap",
                  "description": "Output sourcemaps.",
                  "name": "sourceMap",
                  "headId": "sourceMap",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "0c207e0b-7842-376d-293c-4d6607128249",
                  "type": "command-param",
                  "head": "stylePreprocessorOptions",
                  "description": "Options to pass to style preprocessors.",
                  "name": "stylePreprocessorOptions",
                  "headId": "stylePreprocessorOptions",
                  "paramType": "object"
                },
                {
                  "id": "b30c9114-ce3d-2cc6-94ce-8b997b0b95bd",
                  "type": "command-param",
                  "head": "styles",
                  "description": "Global styles to be included in the build.",
                  "name": "styles",
                  "headId": "styles",
                  "paramType": "array"
                },
                {
                  "id": "9fb9a6be-9955-c951-3fc8-544b0fd0f3c7",
                  "type": "command-param",
                  "head": "tsConfig",
                  "description": "The name of the TypeScript configuration file.\n",
                  "name": "tsConfig",
                  "headId": "tsConfig",
                  "paramType": "string"
                },
                {
                  "id": "b6765b88-5745-23b0-283f-4387cb3a5046",
                  "type": "command-param",
                  "head": "watch",
                  "description": "Run build when files change.",
                  "name": "watch",
                  "headId": "watch",
                  "paramType": "boolean"
                },
                {
                  "id": "2a143293-7787-a0d3-a3d0-1a910a5a6fd8",
                  "type": "command-param",
                  "name": "webWorkerTsConfig",
                  "head": "webWorkerTsConfig",
                  "headId": "webWorkerTsConfig",
                  "paramType": "string",
                  "default": "",
                  "description": "TypeScript configuration for Web Worker modules."
                }
              ],
              "title": "Karma builder",
              "url": "builder-karma",
              "generationType": "cli-builder",
              "generationCliBuilderName": "karma"
            },
            {
              "id": "0b1a5672-69f1-6943-f959-f8d628914598",
              "entries": [
                {
                  "id": "64f7c168-c1a6-541c-5216-e457107c80dd",
                  "type": "text",
                  "text": "ID: `@angular-devkit/build-angular:protractor`\n"
                },
                {
                  "id": "5a33411f-a6a9-83c2-3f8f-08248812de1d",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Introduction to E2E Testing with the Angular CLI and Protractor",
                      "url": "https://coryrylan.com/blog/introduction-to-e2e-testing-with-the-angular-cli-and-protractor",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "034f98cb-1d0c-913d-a6ed-ebe2660dab5b",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "cbdb801b-1139-2d3f-befc-1cf864e3ae2d",
                  "type": "toc"
                },
                {
                  "id": "e280afb6-c074-8848-1cdf-28890167800d",
                  "type": "command-param",
                  "head": "baseUrl",
                  "description": "Base URL for protractor to connect to.",
                  "name": "baseUrl",
                  "headId": "baseUrl",
                  "paramType": "string"
                },
                {
                  "id": "1f13832e-d6a3-98b5-e950-1b222adab79b",
                  "type": "command-param",
                  "head": "devServerTarget",
                  "description": "Dev server target to run tests against.",
                  "name": "devServerTarget",
                  "headId": "devServerTarget",
                  "paramType": "string"
                },
                {
                  "id": "06357377-8e78-4c43-2f28-a5fab7d5ace4",
                  "type": "command-param",
                  "head": "elementExplorer",
                  "description": "Start Protractor's [Element Explorer](https://github.com/angular/protractor/blob/master/docs/debugging.md#testing-out-protractor-interactively) for debugging.",
                  "name": "elementExplorer",
                  "headId": "elementExplorer",
                  "paramType": "boolean"
                },
                {
                  "id": "093d7fc5-855f-d112-9144-3bae853f42d5",
                  "type": "command-param",
                  "head": "host",
                  "description": "Host to listen on.",
                  "name": "host",
                  "headId": "host",
                  "paramType": "string",
                  "default": "localhost"
                },
                {
                  "id": "67ca3b10-54bd-3e36-9cd1-2c9694c90e5c",
                  "type": "command-param",
                  "head": "port",
                  "description": "The port to use to serve the application.",
                  "name": "port",
                  "headId": "port",
                  "paramType": "number"
                },
                {
                  "id": "12c6a2d0-ed8c-1a39-395c-322bf6e34d8b",
                  "type": "command-param",
                  "head": "protractorConfig",
                  "description": "The name of the Protractor configuration file.",
                  "name": "protractorConfig",
                  "headId": "protractorConfig",
                  "paramType": "string"
                },
                {
                  "id": "54601958-f604-9799-6571-ba9688a5e63e",
                  "type": "command-param",
                  "head": "specs",
                  "description": "Override specs in the protractor config.",
                  "name": "specs",
                  "headId": "specs",
                  "paramType": "array"
                },
                {
                  "id": "e69cfd17-ef82-0d51-f8b7-a57ebbc70c48",
                  "type": "command-param",
                  "head": "suite",
                  "description": "Override suite in the protractor config.",
                  "name": "suite",
                  "headId": "suite",
                  "paramType": "string"
                },
                {
                  "id": "0a242067-248d-41f5-e23a-395d4c59054e",
                  "type": "command-param",
                  "head": "webdriverUpdate",
                  "description": "Try to update webdriver.",
                  "name": "webdriverUpdate",
                  "headId": "webdriverUpdate",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "45009a62-70f0-1fc3-623d-80ca326c0b66",
                  "type": "command-param",
                  "name": "serve",
                  "head": "serve",
                  "headId": "serve",
                  "paramType": "boolean",
                  "default": true,
                  "description": "Compile and Serve the app."
                }
              ],
              "title": "Protractor builder",
              "url": "builder-protractor",
              "generationType": "cli-builder",
              "generationCliBuilderName": "protractor"
            },
            {
              "id": "6b511d08-e7a8-521e-9c19-56dd0f8e8707",
              "entries": [
                {
                  "id": "13e87757-ed5b-e793-8988-95b322b65ab7",
                  "type": "text",
                  "text": "ID: `@angular-devkit/build-angular:server`\n\n## Options\n"
                },
                {
                  "id": "909ac39a-2933-9c98-2348-cb17189bfb90",
                  "type": "toc"
                },
                {
                  "id": "21847b66-7f5d-20ac-ba89-f2db7d7a45be",
                  "type": "command-param",
                  "head": "bundleDependencies",
                  "description": "Available on server platform only. Which external dependencies to bundle into the module. By default, all of node_modules will be kept as requires.",
                  "name": "bundleDependencies",
                  "headId": "bundleDependencies",
                  "paramType": "string",
                  "values": "none,all",
                  "default": "none"
                },
                {
                  "id": "78131cd4-0eab-400c-1144-527237b5d26a",
                  "type": "command-param",
                  "head": "commonChunk",
                  "description": "Use a separate bundle containing code used across multiple bundles.",
                  "name": "commonChunk",
                  "headId": "commonChunk",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "6aa56b73-cd45-2d35-aafc-77191c1e1732",
                  "type": "command-param",
                  "head": "deleteOutputPath",
                  "description": "Delete the output path before building.",
                  "name": "deleteOutputPath",
                  "headId": "deleteOutputPath",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "2eba913c-2a9c-8a9c-a39d-6202f4e08602",
                  "type": "command-param",
                  "head": "evalSourceMap",
                  "description": "Output in-file eval sourcemaps.\n",
                  "name": "evalSourceMap",
                  "headId": "evalSourceMap",
                  "paramType": "boolean"
                },
                {
                  "id": "d995e159-9c08-d669-8593-233e209ed88e",
                  "type": "command-param",
                  "name": "externalDependencies",
                  "head": "externalDependencies",
                  "headId": "externalDependencies",
                  "paramType": "array",
                  "default": [],
                  "description": "Exclude the listed external dependencies from being bundled into the bundle. Instead, the created bundle relies on these dependencies to be available during runtime."
                },
                {
                  "id": "da2d51dc-eb41-daba-3dee-1a34cbfcbc46",
                  "type": "command-param",
                  "head": "extractLicenses",
                  "description": "Extract all licenses in a separate file, in the case of production builds only.",
                  "name": "extractLicenses",
                  "headId": "extractLicenses",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "64ad4822-535a-0817-ed3a-145bd1fca921",
                  "type": "command-param",
                  "head": "fileReplacements",
                  "description": "Replace files with other files in the build.",
                  "name": "fileReplacements",
                  "headId": "fileReplacements",
                  "paramType": "array"
                },
                {
                  "id": "9f704744-592b-99db-fbb5-1257a735a9bc",
                  "type": "command-param",
                  "head": "forkTypeChecker",
                  "description": "Run the TypeScript type checker in a forked process.",
                  "name": "forkTypeChecker",
                  "headId": "forkTypeChecker",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "51f7d7bc-c25f-3369-1173-63e35eb14191",
                  "type": "command-param",
                  "head": "i18nFile",
                  "description": "Localization file to use for i18n.",
                  "name": "i18nFile",
                  "headId": "i18nFile",
                  "paramType": "string"
                },
                {
                  "id": "77f3ed53-cf7e-b432-866e-e2049b882636",
                  "type": "command-param",
                  "head": "i18nFormat",
                  "description": "Format of the localization file specified with --i18n-file.",
                  "name": "i18nFormat",
                  "headId": "i18nFormat",
                  "paramType": "string"
                },
                {
                  "id": "a228429d-4c74-a8f3-837a-339152286eda",
                  "type": "command-param",
                  "head": "i18nLocale",
                  "description": "Locale to use for i18n.",
                  "name": "i18nLocale",
                  "headId": "i18nLocale",
                  "paramType": "string"
                },
                {
                  "id": "a42f0b1a-e084-5a9d-be18-a183fba2adcb",
                  "type": "command-param",
                  "head": "i18nMissingTranslation",
                  "description": "How to handle missing translations for i18n.\n",
                  "name": "i18nMissingTranslation",
                  "headId": "i18nMissingTranslation",
                  "paramType": "string"
                },
                {
                  "id": "97717594-1b05-3644-57b1-0cf8287bf3f2",
                  "type": "command-param",
                  "head": "lazyModules",
                  "description": "List of additional NgModule files that will be lazy loaded. Lazy router modules with be discovered automatically.",
                  "name": "lazyModules",
                  "headId": "lazyModules",
                  "paramType": "array"
                },
                {
                  "id": "cafa7e86-e3f3-51f2-db78-c7dbce0fbdc4",
                  "type": "command-param",
                  "name": "localize",
                  "head": "localize",
                  "headId": "localize",
                  "paramType": "",
                  "default": ""
                },
                {
                  "id": "16c265a7-d6a8-0f87-8450-7097d5992049",
                  "type": "command-param",
                  "head": "main",
                  "description": "The name of the main entry-point file.",
                  "name": "main",
                  "headId": "main",
                  "paramType": "string"
                },
                {
                  "id": "8333309e-cbb9-1a8c-ca9a-1e487bef6ccb",
                  "type": "command-param",
                  "head": "namedChunks",
                  "description": "Use file name for lazy loaded chunks.",
                  "name": "namedChunks",
                  "headId": "namedChunks",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "5e06584e-fe12-50fe-5de6-b8c00be6a826",
                  "type": "command-param",
                  "head": "optimization",
                  "description": "Defines the optimization level of the build.",
                  "name": "optimization",
                  "headId": "optimization",
                  "paramType": "boolean"
                },
                {
                  "id": "caa72ead-66f2-b1dc-e6bf-06b639b8bf0d",
                  "type": "command-param",
                  "head": "outputHashing",
                  "description": "Define the output filename cache-busting hashing mode.",
                  "name": "outputHashing",
                  "headId": "outputHashing",
                  "paramType": "string",
                  "values": "none,all,media,bundles",
                  "default": "none"
                },
                {
                  "id": "304d54f3-b5fc-535e-2d1a-36c2bae8525e",
                  "type": "command-param",
                  "head": "outputPath",
                  "description": "Path where output will be placed.",
                  "name": "outputPath",
                  "headId": "outputPath",
                  "paramType": "string"
                },
                {
                  "id": "cb897a11-e6f8-c9ad-ccd2-2eb5042e3dba",
                  "type": "command-param",
                  "head": "preserveSymlinks",
                  "description": "Do not use the real path when resolving modules.",
                  "name": "preserveSymlinks",
                  "headId": "preserveSymlinks",
                  "paramType": "boolean"
                },
                {
                  "id": "d6acdfbd-ce89-40c2-50d6-d409f6c04a2a",
                  "type": "command-param",
                  "head": "progress",
                  "description": "Log progress to the console while building.",
                  "name": "progress",
                  "headId": "progress",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "8db35a4d-060d-45ca-84fe-e0923f621da0",
                  "type": "command-param",
                  "name": "resourcesOutputPath",
                  "head": "resourcesOutputPath",
                  "headId": "resourcesOutputPath",
                  "paramType": "string",
                  "default": "",
                  "description": "The path where style resources will be placed, relative to outputPath."
                },
                {
                  "id": "fdb9f4b3-b044-f835-1087-bf0ec30a9bfc",
                  "type": "command-param",
                  "head": "showCircularDependencies",
                  "description": "Show circular dependency warnings on builds.",
                  "name": "showCircularDependencies",
                  "headId": "showCircularDependencies",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "077f557f-2aed-3dde-1f75-69584515ee5e",
                  "type": "command-param",
                  "head": "sourceMap",
                  "description": "Output sourcemaps.",
                  "name": "sourceMap",
                  "headId": "sourceMap",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "afc04b66-485f-7cb1-5b5b-46c7197096bc",
                  "type": "command-param",
                  "head": "statsJson",
                  "description": "Generates a 'stats.json' file which can be analyzed using tools such as: `#webpack-bundle-analyzer` or https://webpack.github.io/analyse.",
                  "name": "statsJson",
                  "headId": "statsJson",
                  "paramType": "boolean"
                },
                {
                  "id": "68826f45-1fe9-05dd-46ff-b0ed4b948c69",
                  "type": "command-param",
                  "head": "stylePreprocessorOptions",
                  "description": "Options to pass to style preprocessors.\n",
                  "name": "stylePreprocessorOptions",
                  "headId": "stylePreprocessorOptions",
                  "paramType": "object"
                },
                {
                  "id": "4f32724e-3026-9745-9c9f-238b5d5dbec9",
                  "type": "command-param",
                  "head": "tsConfig",
                  "description": "The name of the TypeScript configuration file.",
                  "name": "tsConfig",
                  "headId": "tsConfig",
                  "paramType": "string",
                  "default": "tsconfig.app.json"
                },
                {
                  "id": "efc841f5-40c0-2131-900f-4ca788c83b95",
                  "type": "command-param",
                  "head": "vendorChunk",
                  "description": "Use a separate bundle containing only vendor libraries.",
                  "name": "vendorChunk",
                  "headId": "vendorChunk",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "0bd0973a-6276-3938-ecc7-272bba150d6e",
                  "type": "command-param",
                  "head": "vendorSourceMap",
                  "description": "Resolve vendor packages sourcemaps.",
                  "headId": "vendorSourceMap",
                  "name": "vendorSourceMap",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "9050cf59-6c77-d9c6-c621-cebd655f4f6d",
                  "type": "command-param",
                  "head": "verbose",
                  "description": "Adds more details to output logging.",
                  "name": "verbose",
                  "headId": "verbose",
                  "paramType": "boolean"
                }
              ],
              "title": "Server builder",
              "url": "builder-server",
              "generationType": "cli-builder",
              "generationCliBuilderName": "server"
            },
            {
              "id": "80797727-af42-d79c-ced4-eac987947c61",
              "entries": [
                {
                  "id": "8af9a0f4-e4fc-d374-b4a3-3df3cf0b97b2",
                  "type": "text",
                  "text": "ID: `@angular-devkit/build-angular:tslint`\n"
                },
                {
                  "id": "6c307f0f-7d90-208c-eeb7-08869677c15e",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "7aee9282-f693-584e-370b-5ba914e89e0b",
                  "type": "toc"
                },
                {
                  "id": "22086447-7acb-3d98-cbd8-fe7ad47ca63c",
                  "type": "command-param",
                  "head": "exclude",
                  "description": "Files to exclude from linting.",
                  "name": "exclude",
                  "headId": "exclude",
                  "paramType": "array"
                },
                {
                  "id": "dedb96eb-74bf-685e-b249-97cf23eca630",
                  "type": "command-param",
                  "head": "files",
                  "description": "Files to include in linting.",
                  "name": "files",
                  "headId": "files",
                  "paramType": "array"
                },
                {
                  "id": "3586c829-bd73-bd4d-447f-bf03aae5f347",
                  "type": "command-param",
                  "head": "fix",
                  "description": "Fixes linting errors (may overwrite linted files).",
                  "name": "fix",
                  "headId": "fix",
                  "paramType": "boolean"
                },
                {
                  "id": "6f5cee44-d97e-c6d6-7446-6492a676fdb8",
                  "type": "command-param",
                  "head": "force",
                  "description": "Succeeds even if there was linting errors.",
                  "name": "force",
                  "headId": "force",
                  "paramType": "boolean"
                },
                {
                  "id": "13edfbbe-56e4-6eac-cd6f-c1eeb578afda",
                  "type": "command-param",
                  "head": "format",
                  "description": "Output format.",
                  "name": "format",
                  "headId": "format",
                  "paramType": "string",
                  "values": "prose,json,stylish,verbose,pmd,msbuild,checkstyle,vso,fileslist",
                  "default": "prose"
                },
                {
                  "id": "ff29214d-e03d-1f63-610a-a2079b1b31d9",
                  "type": "command-param",
                  "head": "silent",
                  "description": "Show output text.",
                  "name": "silent",
                  "headId": "silent",
                  "paramType": "boolean"
                },
                {
                  "id": "5018050c-6bea-3a76-1c07-3ba3d05566b3",
                  "type": "command-param",
                  "head": "tsConfig",
                  "description": "The name of the TypeScript configuration file.",
                  "name": "tsConfig",
                  "headId": "tsConfig"
                },
                {
                  "id": "57791ee8-5532-f9dd-99e4-de6e6b65571d",
                  "type": "command-param",
                  "head": "tslintConfig",
                  "description": "The name of the TSLint configuration file.",
                  "name": "tslintConfig",
                  "headId": "tslintConfig",
                  "paramType": "string"
                },
                {
                  "id": "e4aa573c-a72d-74ef-f9d0-60123ac9a6b9",
                  "type": "command-param",
                  "head": "typeCheck",
                  "description": "Controls the type check for linting.",
                  "name": "typeCheck",
                  "headId": "typeCheck",
                  "paramType": "boolean"
                }
              ],
              "title": "Tslint builder",
              "url": "builder-tslint",
              "generationType": "cli-builder",
              "generationCliBuilderName": "tslint"
            },
            {
              "id": "b49f6452-c870-4114-a76c-0f5ea1462c45",
              "entries": [
                {
                  "id": "6280d5a7-4220-1e18-26fb-56734a05071b",
                  "type": "text",
                  "text": "Schematics is a workflow tool for the modern web; it can apply transforms to your project, such as create a new component, or updating your code to fix breaking changes in a dependency. Or maybe you want to add a new configuration option or framework to an existing project.\n\nIn Angular CLI you can run schematics by [`ng generate`](../command-ng-generate).\n\nAlso [`ng add`](../command-ng-add) uses Schematics.\n"
                },
                {
                  "id": "99f9ad66-9872-9d2c-2cea-f30c2edd01e8",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Schematics — An Introduction",
                      "url": "https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2",
                      "lang": "en"
                    },
                    {
                      "label": "Using schematics in WebStorm",
                      "url": "https://blog.angular.io/whats-new-in-webstorm-for-angular-acd804b84ec9",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Schematics",
              "url": "schematics"
            },
            {
              "id": "c39fb216-38da-f14a-665d-ac8e396c926d",
              "entries": [
                {
                  "id": "1a3c360e-063f-853e-9864-503e577f82a1",
                  "type": "text",
                  "text": "```\nng generate application [name] [--[argument]=[value]]\nng generate app\n```\n"
                },
                {
                  "id": "17b3c1e8-135d-3b8c-e5ca-297e39c5f25f",
                  "type": "text",
                  "text": "Create an Angular application."
                },
                {
                  "id": "ce0fb899-081d-eeaf-2a92-864ce56004c5",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "7ee8a559-d6db-f15c-42cd-b1bc57404fed",
                  "type": "toc"
                },
                {
                  "id": "eb0a2d13-4f34-fa2b-d513-3d5db6fd0386",
                  "type": "command-param",
                  "head": "experimentalIvy",
                  "description": "EXPERIMENTAL: Specifies whether to create a new application which uses the Ivy rendering engine.",
                  "headId": "experimentalIvy",
                  "name": "experimentalIvy",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "982a6e6c-82a2-0fdb-dd58-b20cbc2c648d",
                  "type": "command-param",
                  "head": "inlineStyle",
                  "description": "Specifies if the style will be in the ts file.",
                  "name": "inlineStyle",
                  "headId": "inlineStyle",
                  "paramType": "boolean",
                  "default": "false",
                  "aliases": "s"
                },
                {
                  "id": "8f313915-a85f-9478-9391-e7bb535da743",
                  "type": "command-param",
                  "head": "inlineTemplate",
                  "description": "Specifies if the template will be in the ts file.",
                  "name": "inlineTemplate",
                  "headId": "inlineTemplate",
                  "paramType": "boolean",
                  "default": "false",
                  "aliases": "t"
                },
                {
                  "id": "cef72097-5d54-e80a-1f3f-5be78e783122",
                  "type": "command-param",
                  "head": "minimal",
                  "description": "Create a barebones project without any testing frameworks.",
                  "headId": "minimal",
                  "name": "minimal",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "7d971293-964d-0f26-8ad3-aa2e56c1b610",
                  "type": "command-param",
                  "head": "prefix",
                  "description": "The prefix to apply to generated selectors.",
                  "name": "prefix",
                  "headId": "prefix",
                  "paramType": "string",
                  "default": "app",
                  "aliases": "p"
                },
                {
                  "id": "555bc5f4-f113-03f5-7264-a6388c459f02",
                  "type": "command-param",
                  "head": "routing",
                  "description": "Generates a routing module.",
                  "name": "routing",
                  "headId": "routing",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "eaeccfda-ba96-d13e-2fcb-305e34529ea6",
                  "type": "command-param",
                  "head": "skipPackageJson",
                  "description": "Do not add dependencies to `package.json`.",
                  "name": "skipPackageJson",
                  "headId": "skipPackageJson",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "94b36cae-ed64-6bf1-a15e-b73b5c5bcdba",
                  "type": "command-param",
                  "head": "skipTests",
                  "description": "Skip creating spec files.",
                  "name": "skipTests",
                  "headId": "skipTests",
                  "paramType": "boolean",
                  "default": "false",
                  "aliases": "S"
                },
                {
                  "id": "b094e78e-57ba-9978-b904-100ebf849b10",
                  "type": "command-param",
                  "head": "style",
                  "description": "The file extension to be used for style files.",
                  "name": "style",
                  "headId": "style",
                  "paramType": "string",
                  "default": "css"
                },
                {
                  "id": "c5d245bc-ba9c-7c40-5ac7-365de7bd5e53",
                  "type": "command-param",
                  "head": "viewEncapsulation",
                  "description": "Specifies the view encapsulation strategy.",
                  "name": "viewEncapsulation",
                  "headId": "viewEncapsulation",
                  "paramType": "string",
                  "values": "Emulated, Native, None",
                  "default": "Emulated"
                }
              ],
              "title": "Application generator",
              "url": "schematic-application"
            },
            {
              "id": "0d49c26e-6382-2bf5-a6a8-fb482d5bb7e8",
              "entries": [
                {
                  "id": "aa2d981a-5943-85fd-3297-dbf5ed842290",
                  "type": "text",
                  "text": "```\nng generate appShell [name] [--[argument]=[value]]\nng generate app-shell\n```"
                },
                {
                  "id": "5463fa31-88a9-bfc0-1f7b-3bcd4f411f57",
                  "type": "text",
                  "text": "Create an app shell.\n"
                },
                {
                  "id": "d4c72bf2-355b-c0c0-ad34-765c49552541",
                  "type": "hint",
                  "text": "App shell is a way to render a portion of your application via a route at build time. This gives users a meaningful first paint of your application because the browser does not need to initialize any JavaScript, just rendering the HTML."
                },
                {
                  "id": "294eefa8-875a-d506-5a1e-b38e6f70fddc",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "App shell documentation in angular-cli repository",
                      "url": "https://github.com/angular/angular-cli/blob/master/docs/documentation/stories/app-shell.md",
                      "lang": "en"
                    },
                    {
                      "label": "Angular App Shell - Boosting Application Startup Performance",
                      "lang": "en",
                      "url": "https://blog.angular-university.io/angular-app-shell/"
                    }
                  ]
                },
                {
                  "id": "2ada8bfc-24c3-0668-7264-6d98b045783b",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "5c495cc5-01f1-71b0-d074-ebeb75acdf08",
                  "type": "toc"
                },
                {
                  "id": "9035e052-5cd1-fbb2-dd1a-02a4d7c6f263",
                  "type": "command-param",
                  "head": "appDir",
                  "description": "The name of the application directory.",
                  "name": "appDir",
                  "headId": "appDir",
                  "paramType": "string",
                  "default": "app"
                },
                {
                  "id": "0e6603d3-2212-0d71-9491-2b323a974ca8",
                  "type": "command-param",
                  "head": "appId",
                  "description": "The appId to use withServerTransition.",
                  "name": "appId",
                  "headId": "appId",
                  "paramType": "string",
                  "default": "serverApp"
                },
                {
                  "id": "322d4626-07a4-43c3-8a84-7fe5e9dd4af3",
                  "type": "command-param",
                  "head": "clientProject",
                  "description": "Name of related client app.",
                  "name": "clientProject",
                  "headId": "clientProject",
                  "paramType": "string"
                },
                {
                  "id": "35d8b9b5-c388-290d-b59a-64123fe0f6cc",
                  "type": "command-param",
                  "head": "index",
                  "description": "Name of the index file.",
                  "name": "index",
                  "headId": "index",
                  "paramType": "string",
                  "default": "index.html"
                },
                {
                  "id": "004b5fea-20fc-f864-70b8-51726f78b42c",
                  "type": "command-param",
                  "head": "main",
                  "description": "The name of the main entry-point file.",
                  "name": "main",
                  "headId": "main",
                  "paramType": "string",
                  "default": "main.server.ts"
                },
                {
                  "id": "f3c8d729-21cc-e20e-4d09-1b97ac0204a1",
                  "type": "command-param",
                  "head": "name",
                  "description": "Name of the app.",
                  "name": "name",
                  "headId": "name",
                  "paramType": "string"
                },
                {
                  "id": "a7870f1f-a4a8-a3b6-ac31-47eb799cb6a8",
                  "type": "command-param",
                  "head": "outDir",
                  "description": "The output directory for build results.",
                  "name": "outDir",
                  "headId": "outDir",
                  "paramType": "string",
                  "default": "dist-server"
                },
                {
                  "id": "b80c13d6-83a0-f64e-4120-11e18bb4c7dc",
                  "type": "command-param",
                  "head": "root",
                  "description": "The root directory of the app.",
                  "name": "root",
                  "headId": "root",
                  "paramType": "string",
                  "default": "src"
                },
                {
                  "id": "037f4062-4828-9ee4-3597-a16994a24f4d",
                  "type": "command-param",
                  "head": "rootModuleClassName",
                  "description": "The name of the root module class.",
                  "name": "rootModuleClassName",
                  "headId": "rootModuleClassName",
                  "paramType": "string",
                  "default": "AppServerModule"
                },
                {
                  "id": "35640ce5-1dce-2f3a-d44f-2378bce3074c",
                  "type": "command-param",
                  "head": "rootModuleFileName",
                  "description": "The name of the root module file.",
                  "name": "rootModuleFileName",
                  "headId": "rootModuleFileName",
                  "paramType": "string",
                  "default": "app.server.module.ts"
                },
                {
                  "id": "1a8d8531-c838-5c64-45ec-500ba34f3cda",
                  "type": "command-param",
                  "head": "route",
                  "description": "Route path used to produce the app shell.",
                  "name": "route",
                  "headId": "route",
                  "paramType": "string",
                  "default": "shell"
                },
                {
                  "id": "c74d1f6a-7f3f-a934-263c-eb36115b8891",
                  "type": "command-param",
                  "head": "sourceDir",
                  "description": "The path of the source directory.",
                  "name": "sourceDir",
                  "headId": "sourceDir",
                  "paramType": "string",
                  "default": "src",
                  "aliases": "D"
                },
                {
                  "id": "1755d247-a7e0-7eb9-6d66-478cef2f26ed",
                  "type": "command-param",
                  "head": "test",
                  "description": "The name of the test entry-point file.",
                  "name": "test",
                  "headId": "test",
                  "paramType": "string"
                },
                {
                  "id": "85d616af-28af-f9c1-eee5-81d9c01ee6e0",
                  "type": "command-param",
                  "head": "testTsconfigFileName",
                  "description": "The name of the TypeScript configuration file for tests.",
                  "name": "testTsconfigFileName",
                  "headId": "testTsconfigFileName",
                  "paramType": "string",
                  "default": "tsconfig.spec"
                },
                {
                  "id": "43004fee-e0ce-5c3a-13b5-ff4494d46fdd",
                  "type": "command-param",
                  "head": "tsconfigFileName",
                  "links": [],
                  "description": "The name of the TypeScript configuration file.",
                  "name": "tsconfigFileName",
                  "headId": "tsconfigFileName",
                  "paramType": "string",
                  "default": "tsconfig.server"
                },
                {
                  "id": "c423d73f-926a-5669-beb4-ed67935bb2f9",
                  "type": "command-param",
                  "head": "universalProject",
                  "description": "Name of related universal app.",
                  "name": "universalProject",
                  "headId": "universalProject",
                  "paramType": "string"
                }
              ],
              "title": "AppShell generator",
              "url": "schematic-app-shell"
            },
            {
              "id": "8ef29f09-000e-23c7-950d-f9799726a582",
              "entries": [
                {
                  "id": "dcc66b64-62e5-2f03-e866-e812878e0694",
                  "type": "text",
                  "text": "```\nng generate class [name] [--[argument]=[value]]\nng generate cl\n```\n"
                },
                {
                  "id": "2fd584b5-f64d-c6a1-f2b5-806c9391aba9",
                  "type": "text",
                  "text": "Create a class.\n\n## Options"
                },
                {
                  "id": "2603d9c5-f448-c5d4-8803-d938ab642d67",
                  "type": "toc"
                },
                {
                  "id": "ac31c175-5719-0d6c-57fb-696e19874c62",
                  "type": "command-param",
                  "head": "lintFix",
                  "headId": "lintFix",
                  "name": "lintFix",
                  "paramType": "boolean",
                  "default": "false",
                  "description": "When true, applies lint fixes after generating the class."
                },
                {
                  "id": "cc648df9-913d-e1ba-9589-d5301ed3364d",
                  "type": "command-param",
                  "head": "project",
                  "description": "The name of the project.",
                  "name": "project",
                  "headId": "project",
                  "paramType": "string",
                  "default": "projectName"
                },
                {
                  "id": "b9c79253-cc54-4900-dc51-67f8109a2bf1",
                  "type": "command-param",
                  "head": "skipTests",
                  "description": "When true, does not create \"spec.ts\" test files for the new class.",
                  "name": "skipTests",
                  "headId": "skipTests",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "6c242dcc-4e9c-d4af-c665-ccd93f66fdb0",
                  "type": "command-param",
                  "head": "type",
                  "description": "Adds a developer-defined type to the filename, in the format `name.type.ts`.",
                  "name": "type",
                  "headId": "type",
                  "paramType": "string"
                }
              ],
              "title": "Class generator",
              "url": "schematic-class"
            },
            {
              "id": "627b4d5c-34ef-96d6-2ea1-c21161490645",
              "entries": [
                {
                  "id": "94fc73f8-6bfd-d6ac-3b68-2e82b1758d88",
                  "type": "text",
                  "text": "```\nng generate component [name] [--[argument]=[value]]\nng generate c\n```\n"
                },
                {
                  "id": "802d5cc2-e41a-042d-672c-d3ee98697f01",
                  "type": "text",
                  "text": "Create an Angular component.\n\n## Options"
                },
                {
                  "id": "0f1791e6-14c6-4606-1268-140f8fbf32b2",
                  "type": "toc"
                },
                {
                  "id": "24f3c676-d01f-4e65-d5a8-cbfc43afdddb",
                  "type": "command-param",
                  "head": "changeDetection",
                  "description": "Specifies the change detection strategy.",
                  "name": "changeDetection",
                  "headId": "changeDetection",
                  "paramType": "string",
                  "values": "Default, OnPush",
                  "default": "Default",
                  "aliases": "c"
                },
                {
                  "id": "18452ead-40b0-db90-8b17-b3fc6d1ae913",
                  "type": "command-param",
                  "head": "export",
                  "description": "Specifies if declaring module exports the component.",
                  "name": "export",
                  "headId": "export",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "1688d8b4-d7c8-bbab-125b-d95f097b858a",
                  "type": "command-param",
                  "head": "flat",
                  "description": "Flag to indicate if a dir is created.",
                  "name": "flat",
                  "headId": "flat",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "52806338-2af5-39c1-b2e5-a5296196d7f6",
                  "type": "command-param",
                  "head": "inlineStyle",
                  "description": "Specifies if the style will be in the ts file.",
                  "name": "inlineStyle",
                  "headId": "inlineStyle",
                  "paramType": "boolean",
                  "default": "false",
                  "aliases": "s"
                },
                {
                  "id": "ecc897e7-c562-6955-e521-844e7b4e0613",
                  "type": "command-param",
                  "head": "inlineTemplate",
                  "description": "Specifies if the template will be in the ts file.",
                  "name": "inlineTemplate",
                  "headId": "inlineTemplate",
                  "paramType": "boolean",
                  "default": "false",
                  "aliases": "t"
                },
                {
                  "id": "a19f9be5-375d-5acc-a58f-94cf873f579b",
                  "type": "command-param",
                  "head": "lintFix",
                  "description": "Specifies whether to apply lint fixes after generating the component.",
                  "name": "lintFix",
                  "headId": "lintFix",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "a2f67ff3-99df-193d-cbe2-68c8f9b6d887",
                  "type": "command-param",
                  "head": "module",
                  "description": "Allows specification of the declaring module.",
                  "name": "module",
                  "headId": "module",
                  "paramType": "string",
                  "aliases": "m"
                },
                {
                  "id": "e4671b7c-2d48-2d1e-9364-a20698ef1b35",
                  "type": "command-param",
                  "head": "prefix",
                  "description": "The prefix to apply to generated selectors.",
                  "name": "prefix",
                  "headId": "prefix",
                  "paramType": "string",
                  "aliases": "p"
                },
                {
                  "id": "8a9e49f4-ff3c-e24a-3ccf-4bd6c49f0aaa",
                  "type": "command-param",
                  "head": "project",
                  "description": "The name of the project.",
                  "name": "project",
                  "headId": "project",
                  "paramType": "string",
                  "default": "projectName"
                },
                {
                  "id": "6ff618d4-d739-2275-930d-fb104ec1f876",
                  "type": "command-param",
                  "head": "selector",
                  "description": "The selector to use for the component.",
                  "name": "selector",
                  "headId": "selector",
                  "paramType": "string"
                },
                {
                  "id": "b8293769-c45f-5700-f30f-a56bf21dfb51",
                  "type": "command-param",
                  "head": "skipImport",
                  "description": "When true, does not import this component into the owning `NgModule`.",
                  "name": "skipImport",
                  "headId": "skipImport",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "921f4373-a670-674e-e960-0a6806dbcea9",
                  "type": "command-param",
                  "head": "skipSelector",
                  "headId": "skipSelector",
                  "name": "skipSelector",
                  "default": "false",
                  "paramType": "boolean",
                  "description": "Specifies if the component should have a selector or not."
                },
                {
                  "id": "54254e5e-3179-2da0-b872-3ed4d4f9ea17",
                  "type": "command-param",
                  "head": "skipTests",
                  "description": "When true, does not create \"spec.ts\" test files for the new component.",
                  "name": "skipTests",
                  "headId": "skipTests",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "845538b8-fde6-39b4-d56a-c5b6b11cc014",
                  "type": "command-param",
                  "head": "style",
                  "description": "The file extension to be used for style files.",
                  "name": "style",
                  "headId": "style",
                  "paramType": "string",
                  "default": "css",
                  "values": "css|scss|sass|less|styl"
                },
                {
                  "id": "b16806ca-2a60-1161-97d5-460669ea5834",
                  "type": "command-param",
                  "head": "type",
                  "headId": "type",
                  "name": "type",
                  "default": "Component",
                  "paramType": "string",
                  "description": "Adds a developer-defined type to the filename, in the format `name.type.ts`."
                },
                {
                  "id": "09194905-e88f-3d7f-a10a-afba98a7af68",
                  "type": "command-param",
                  "head": "viewEncapsulation",
                  "description": "Specifies the view encapsulation strategy.",
                  "name": "viewEncapsulation",
                  "headId": "viewEncapsulation",
                  "paramType": "string",
                  "values": "Emulated, Native, None",
                  "aliases": "v",
                  "default": "Emulated"
                }
              ],
              "title": "Component generator",
              "url": "schematic-component"
            },
            {
              "id": "f4d9d704-47e0-74c8-695c-b02a3f2b5535",
              "entries": [
                {
                  "id": "242b267c-0095-5c2c-ef91-063c4789c81e",
                  "type": "text",
                  "text": "```\nng generate directive [name] [--[argument]=[value]]\nng generate d\n```\n\n"
                },
                {
                  "id": "df6be735-c506-7988-fd09-40216bdcce4b",
                  "type": "text",
                  "text": "Create an Angular directive.\n\n## Options"
                },
                {
                  "id": "d15c41df-524b-7b07-4e74-50a8aa658bec",
                  "type": "toc"
                },
                {
                  "id": "9ce3b4d1-0822-a121-f80d-b8501f9d5da0",
                  "type": "command-param",
                  "head": "export",
                  "description": "Specifies if declaring module exports the directive.",
                  "name": "export",
                  "headId": "export",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "ec0a810f-475f-0469-087d-9d7581920f77",
                  "type": "command-param",
                  "head": "flat",
                  "description": "Flag to indicate if a dir is created.",
                  "name": "flat",
                  "headId": "flat",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "71013da9-d614-cab4-a56b-34c4eb5373d6",
                  "type": "command-param",
                  "head": "lintFix",
                  "description": "Specifies whether to apply lint fixes after generating the directive.",
                  "name": "lintFix",
                  "headId": "lintFix",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "eb46299b-b630-5753-fd55-55f908824bcf",
                  "type": "command-param",
                  "head": "module",
                  "description": "Allows specification of the declaring module.",
                  "name": "module",
                  "headId": "module",
                  "paramType": "string",
                  "aliases": "m"
                },
                {
                  "id": "5a1859bc-6f3b-5732-df8d-1e32bb54f34e",
                  "type": "command-param",
                  "head": "prefix",
                  "description": "The prefix to apply to generated selectors.",
                  "name": "prefix",
                  "headId": "prefix",
                  "paramType": "string",
                  "aliases": "p"
                },
                {
                  "id": "b567328b-2155-998a-b2df-35265087e4b0",
                  "type": "command-param",
                  "head": "project",
                  "description": "The name of the project.",
                  "name": "project",
                  "headId": "project",
                  "paramType": "string",
                  "default": "projectName"
                },
                {
                  "id": "3f3f82e0-57a4-092c-dbdb-5699d2d7c26c",
                  "type": "command-param",
                  "head": "selector",
                  "description": "The selector to use for the directive.",
                  "name": "selector",
                  "headId": "selector",
                  "paramType": "string"
                },
                {
                  "id": "30551906-d954-7856-b56c-f66e96c72345",
                  "type": "command-param",
                  "head": "skipImport",
                  "description": "Flag to skip the module import.",
                  "name": "skipImport",
                  "headId": "skipImport",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "3b3da76b-d300-0b55-f73e-cbcbebb6008b",
                  "type": "command-param",
                  "head": "skipTests",
                  "description": "When true, does not create `spec.ts` test files for the new class.",
                  "name": "skipTests",
                  "headId": "skipTests",
                  "paramType": "boolean",
                  "default": "false"
                }
              ],
              "title": "Directive generator",
              "url": "schematic-directive"
            },
            {
              "id": "8016cdc0-f3e9-e5c7-ab01-f2fc51fa1182",
              "entries": [
                {
                  "id": "86f19387-3ab2-f24e-fc5a-613872469db2",
                  "type": "text",
                  "text": "```\nng generate enum [name] [--[argument]=[value]]\nng generate e\n```\n"
                },
                {
                  "id": "8c0c5d25-2148-a1f9-e889-1c25c895787d",
                  "type": "text",
                  "text": "Create an enumeration."
                },
                {
                  "id": "1d1cb9f6-92ac-cfda-fd79-509e0e904c57",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "d395ea6b-944f-d58a-1d13-165c58c09dce",
                  "type": "toc"
                },
                {
                  "id": "3f9cdd54-a41c-d8f3-632c-27f105777af6",
                  "type": "command-param",
                  "head": "lintFix",
                  "description": "Specifies whether to apply lint fixes after generating the enum.",
                  "name": "lintFix",
                  "headId": "lintFix",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "3ce0ed46-02f2-e8ba-43d0-dfbdb09a2236",
                  "type": "command-param",
                  "head": "project",
                  "description": "The name of the project.",
                  "name": "project",
                  "headId": "project",
                  "paramType": "string",
                  "default": ""
                }
              ],
              "title": "Enum generator",
              "url": "schematic-enum"
            },
            {
              "id": "70808925-0ef3-f7bb-c20b-e1bb971c7d31",
              "entries": [
                {
                  "id": "7f8f0bff-3685-0a07-551d-6021d52066ad",
                  "type": "text",
                  "text": "```\nng generate guard [name] [--[argument]=[value]]\nng generate g\n```\n"
                },
                {
                  "id": "cf49a545-8e72-5a73-f024-5fb49b3212be",
                  "type": "text",
                  "text": "Create a guard.\n\n"
                },
                {
                  "id": "d212abac-ed69-a3e9-83a3-63572d4dbcea",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "88326206-03a6-79f9-47d0-9847f1463b9c",
                  "type": "toc"
                },
                {
                  "id": "97009875-201e-39f1-0f11-747cbad2315f",
                  "type": "command-param",
                  "head": "flat",
                  "description": "Flag to indicate if a dir is created.",
                  "name": "flat",
                  "headId": "flat",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "236502ad-46f3-b400-b33a-ef7f7414b902",
                  "type": "command-param",
                  "head": "implements",
                  "headId": "implements",
                  "name": "implements",
                  "paramType": "string",
                  "description": "Specifies which interfaces to implement.",
                  "values": "CanActivate|CanActivateChild|CanLoad"
                },
                {
                  "id": "b984ec66-5e3e-8a3a-a090-479f2b81c448",
                  "type": "command-param",
                  "head": "lintFix",
                  "description": "Specifies whether to apply lint fixes after generating the guard.",
                  "name": "lintFix",
                  "headId": "lintFix",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "90615816-9f8c-e74b-d732-cb8a8739f2d5",
                  "type": "command-param",
                  "head": "project",
                  "description": "The name of the project.",
                  "name": "project",
                  "headId": "project",
                  "paramType": "string"
                },
                {
                  "id": "598710a6-0dd5-c74f-ff8a-ea497382ea5c",
                  "type": "command-param",
                  "head": "skipTests",
                  "description": "When true, does not create `spec.ts` test files for the new guard.",
                  "name": "skipTests",
                  "headId": "skipTests",
                  "paramType": "boolean",
                  "default": "false"
                }
              ],
              "title": "Guard generator",
              "url": "schematic-guard"
            },
            {
              "id": "221fc7df-8e61-4698-4ea2-9022f4a29614",
              "entries": [
                {
                  "id": "857b06f0-298d-89a8-d116-19b2571da77c",
                  "type": "text",
                  "text": "```\nng generate interceptor <name> [--[option]=[value]]\n```\n\nCreates a new, generic interceptor definition in the given or default project."
                },
                {
                  "id": "c8ef64ec-9cca-1d91-04e3-d524d64cfc6e",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "0ecbaa1b-bae2-0c9c-65a5-6516deb65c89",
                  "type": "command-param",
                  "head": "flat",
                  "headId": "flat",
                  "name": "flat",
                  "paramType": "boolean",
                  "default": "true",
                  "description": "When true (the default), creates files at the top level of the project."
                },
                {
                  "id": "51611464-df31-2c69-2bc7-52d7c2b35f77",
                  "type": "command-param",
                  "head": "lintFix",
                  "headId": "lintFix",
                  "name": "lintFix",
                  "paramType": "boolean",
                  "default": "false",
                  "description": "When true, applies lint fixes after generating the interceptor."
                },
                {
                  "id": "9dbb2d0f-ac42-ef36-c180-d20c5f7d7d32",
                  "type": "command-param",
                  "head": "project",
                  "headId": "project",
                  "name": "project",
                  "paramType": "string",
                  "description": "The name of the project."
                },
                {
                  "id": "3cecef57-d562-f327-62a7-32d6b24d4809",
                  "type": "command-param",
                  "head": "skipTests",
                  "headId": "skipTests",
                  "name": "skipTests",
                  "paramType": "boolean",
                  "default": "false",
                  "description": "When true, does not create `spec.ts` test files for the new interceptor."
                }
              ],
              "title": "Interceptor generator\n",
              "url": "schematic-interceptor",
              "generationType": "none"
            },
            {
              "id": "95838a85-af0c-8e13-30eb-6a15af329cc9",
              "entries": [
                {
                  "id": "e5a934c1-02bd-9802-4294-03b0dcd2d472",
                  "type": "text",
                  "text": "```\nng generate interface [name] [type] [--[argument]=[value]]\nng generate i\n```\n"
                },
                {
                  "id": "0499b08f-4abb-19c0-90b2-66c3e3cbce00",
                  "type": "text",
                  "text": "Create an interface.\n"
                },
                {
                  "id": "a9b58460-8ea0-d632-036b-39bab534e8a9",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "49970d26-cba5-0c7f-56fa-66dcda0e42d9",
                  "type": "toc"
                },
                {
                  "id": "ce00fe7c-9bbf-c7ab-c32a-a8e229b550d7",
                  "type": "command-param",
                  "head": "lintFix",
                  "description": "Specifies whether to apply lint fixes after generating.",
                  "name": "lintFix",
                  "headId": "lintFix",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "8239b8c7-37c9-6797-071b-23076d9d161a",
                  "type": "command-param",
                  "head": "prefix",
                  "description": "Specifies the prefix to use.",
                  "name": "prefix",
                  "headId": "prefix",
                  "paramType": "string"
                },
                {
                  "id": "af1e26f8-5ec5-f848-c25f-afdb32244567",
                  "type": "command-param",
                  "head": "project",
                  "description": "The name of the project.",
                  "name": "project",
                  "headId": "project",
                  "paramType": "string"
                }
              ],
              "title": "Interface generator",
              "url": "schematic-interface"
            },
            {
              "id": "7de86038-99fe-9807-e24b-eaebc86413bb",
              "entries": [
                {
                  "id": "df41f9cf-921f-c0cf-4602-9f653fb86549",
                  "type": "text",
                  "text": "```\nng generate library [name] [--[argument]=[value]]\nng generate lib\n```"
                },
                {
                  "id": "5dd00399-a640-b1e6-bf01-f78765dae6ea",
                  "type": "text",
                  "text": "Generate a library project for Angular.\n\n"
                },
                {
                  "id": "fc9ba922-818f-a991-ac8e-143f32d94125",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "The Angular Library Series - Creating a Library with the Angular CLI",
                      "url": "https://blog.angularindepth.com/creating-a-library-in-angular-6-87799552e7e5",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "f0387384-6035-e8dc-d5e8-ebf0a22ac144",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "0424a765-2ce9-570e-ecfd-6744fb01e419",
                  "type": "toc"
                },
                {
                  "id": "b3bb7eda-7ea6-1e59-d582-46523cf274fb",
                  "type": "command-param",
                  "head": "entryFile",
                  "description": "The path to create the library's public API file.",
                  "name": "entryFile",
                  "headId": "entryFile",
                  "paramType": "string",
                  "default": "public_api"
                },
                {
                  "id": "61769c5f-2c3b-5891-e38d-a40508f04e40",
                  "type": "command-param",
                  "head": "lintFix",
                  "headId": "lintFix",
                  "name": "lintFix",
                  "paramType": "boolean",
                  "default": "false",
                  "description": "When true, applies lint fixes after generating the library."
                },
                {
                  "id": "42f5bba7-9507-690d-82e5-9cdf51b868db",
                  "type": "command-param",
                  "head": "prefix",
                  "description": "The prefix to apply to generated selectors.",
                  "name": "prefix",
                  "headId": "prefix",
                  "paramType": "string",
                  "default": "lib",
                  "aliases": "p"
                },
                {
                  "id": "65901907-0b2c-bfc7-95ee-1f23b0bedea2",
                  "type": "command-param",
                  "head": "skipInstall",
                  "description": "Skip installing dependency packages.",
                  "headId": "skipInstall",
                  "name": "skipInstall",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "02ff13e3-c953-a80d-f847-ed7705e1888b",
                  "type": "command-param",
                  "head": "skipPackageJson",
                  "description": "Do not add dependencies to `package.json`.",
                  "name": "skipPackageJson",
                  "headId": "skipPackageJson",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "41c0c3c1-2967-e360-989c-a9baeba1463f",
                  "type": "command-param",
                  "head": "skipTsConfig",
                  "description": "When true, does not update `tsconfig.json` to add a path mapping for the new library. The path mapping is needed to use the library in an app, but can be disabled here to simplify development.",
                  "name": "skipTsConfig",
                  "headId": "skipTsConfig",
                  "paramType": "boolean",
                  "default": "false"
                }
              ],
              "title": "Library generator",
              "url": "schematic-library"
            },
            {
              "id": "f2e73349-e8fe-1091-93ae-760638b781e7",
              "entries": [
                {
                  "id": "8371afd6-ce80-4f09-778c-a59542b85a04",
                  "type": "text",
                  "text": "```\nng generate module [name] [--[argument]=[value]]\nng generate m\n```\n"
                },
                {
                  "id": "9104a14d-d2ad-4716-e23e-512015376d25",
                  "type": "text",
                  "text": "Create an Angular module.\n"
                },
                {
                  "id": "0b0ace55-d851-d21e-0ab2-52d40b21e079",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "7664df4a-11b5-2a52-43d6-2180deed6f4a",
                  "type": "toc"
                },
                {
                  "id": "d8e2cdf2-ce2f-77a2-c1db-b1b7c35d9bb8",
                  "type": "command-param",
                  "head": "flat",
                  "description": "Flag to indicate if a dir is created.",
                  "name": "flat",
                  "headId": "flat",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "dbb9cedd-31dc-38fe-f044-4be2b7ef505d",
                  "type": "command-param",
                  "head": "lintFix",
                  "headId": "lintFix",
                  "name": "lintFix",
                  "paramType": "boolean",
                  "default": "false",
                  "description": "When true, applies lint fixes after generating the module."
                },
                {
                  "id": "1836733c-74d5-3385-22b4-e8f38e98f1ca",
                  "type": "command-param",
                  "head": "module",
                  "description": "Allows specification of the declaring module.",
                  "name": "module",
                  "headId": "module",
                  "paramType": "string",
                  "default": "",
                  "aliases": "m"
                },
                {
                  "id": "f8e8a541-6606-3dc1-3706-a6070985a822",
                  "type": "command-param",
                  "head": "project",
                  "description": "The name of the project.",
                  "name": "project",
                  "headId": "project",
                  "paramType": "string",
                  "aliases": ""
                },
                {
                  "id": "d1c5b2f2-338f-7cc5-4e91-f6fb7c19d75d",
                  "type": "command-param",
                  "head": "route",
                  "headId": "route",
                  "name": "route",
                  "paramType": "string",
                  "description": "The route path for a lazy-loaded module. When supplied, creates a component in the new module, and adds the route to that component in the `Routes` array declared in the module provided in the `--module` option."
                },
                {
                  "id": "e2d15cf2-f261-0e34-72cb-c9d9e8ee0d6f",
                  "type": "command-param",
                  "head": "routing",
                  "description": "Generates a routing module.",
                  "name": "routing",
                  "headId": "routing",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "82902672-c65e-ff26-5b17-e9bda1999b35",
                  "type": "command-param",
                  "head": "routingScope",
                  "description": "The scope for the generated routing.",
                  "name": "routingScope",
                  "headId": "routingScope",
                  "paramType": "string",
                  "values": "Child|Root",
                  "default": "Child"
                }
              ],
              "title": "Module generator",
              "url": "schematic-module"
            },
            {
              "id": "fccb6074-443d-2ec3-099a-34fba0d906d5",
              "entries": [
                {
                  "id": "5f0cd5c3-3be9-eb58-8668-70b246eaf848",
                  "type": "text",
                  "text": "```\nng generate pipe [name] [--[argument]=[value]]\nng generate p\n```"
                },
                {
                  "id": "360424d7-9851-ab00-53fb-e0396569e92a",
                  "type": "text",
                  "text": "Create an Angular pipe.\n"
                },
                {
                  "id": "3d35a137-fc2c-6558-3c91-4a2b51c1e96f",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "4c18249f-d07f-3917-bd70-55f2c2205b5a",
                  "type": "toc"
                },
                {
                  "id": "9f4be75f-b99e-ea64-bac0-88c44fd4f521",
                  "type": "command-param",
                  "head": "export",
                  "description": "Specifies if declaring module exports the pipe.",
                  "name": "export",
                  "headId": "export",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "a48db271-ff50-7a3c-fdf6-d51756daab18",
                  "type": "command-param",
                  "head": "flat",
                  "description": "Flag to indicate if a dir is created.",
                  "name": "flat",
                  "headId": "flat",
                  "default": "true",
                  "paramType": "boolean"
                },
                {
                  "id": "cb65c393-dbef-b3a2-7ff7-dc8f29053bd2",
                  "type": "command-param",
                  "head": "lintFix",
                  "description": "Specifies whether to apply lint fixes after generating the pipe.",
                  "name": "lintFix",
                  "headId": "lintFix",
                  "paramType": "boolean",
                  "values": "",
                  "default": "false"
                },
                {
                  "id": "ecb5d0b0-f9b6-4235-0c3e-9e8a70e36386",
                  "type": "command-param",
                  "head": "module",
                  "description": "Allows specification of the declaring module.",
                  "name": "module",
                  "headId": "module",
                  "paramType": "string",
                  "aliases": "m"
                },
                {
                  "id": "e19d3159-49a9-edd5-6873-11069feb02d8",
                  "type": "command-param",
                  "head": "project",
                  "description": "The name of the project.",
                  "name": "project",
                  "headId": "project",
                  "paramType": "string"
                },
                {
                  "id": "4836b0ae-d7f4-773f-dade-df21226e0263",
                  "type": "command-param",
                  "head": "skipImport",
                  "description": "Allows for skipping the module import.",
                  "name": "skipImport",
                  "headId": "skipImport",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "58366bde-b9ff-18d2-df52-1d41c8d8e912",
                  "type": "command-param",
                  "head": "skipTests",
                  "description": "When true, does not create `spec.ts` test files for the new pipe.",
                  "name": "skipTests",
                  "headId": "skipTests",
                  "paramType": "boolean",
                  "default": "false"
                }
              ],
              "title": "Pipe generator",
              "url": "schematic-pipe"
            },
            {
              "id": "5b998e77-595c-83bd-4a8c-377442548687",
              "entries": [
                {
                  "id": "9db471f2-8bf8-99fc-326f-18e68bbd543b",
                  "type": "text",
                  "text": "```\nng generate service [name] [--[argument]=[value]]\nng generate s\n```\n"
                },
                {
                  "id": "e89a9a00-b42f-4d85-9b0e-4e33ea632a96",
                  "type": "text",
                  "text": "Create an Angular service.\n"
                },
                {
                  "id": "d54b4c00-f88b-e8b1-cb7f-93b53c43af76",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "0626e710-622a-9ef5-dfdb-e826740158d0",
                  "type": "toc"
                },
                {
                  "id": "013ad01c-5c3f-fb0a-542b-3a69aefc4872",
                  "type": "command-param",
                  "head": "flat",
                  "description": "Flag to indicate if a dir is created.",
                  "name": "flat",
                  "headId": "flat",
                  "paramType": "boolean",
                  "default": "true"
                },
                {
                  "id": "11b43851-9709-3ba0-105b-6b732862cf59",
                  "type": "command-param",
                  "head": "lintFix",
                  "description": "Specifies whether to apply lint fixes after generating.",
                  "name": "lintFix",
                  "headId": "lintFix",
                  "paramType": "boolean",
                  "default": "false"
                },
                {
                  "id": "9f463ea3-8ce8-a690-53a2-bd31a272db94",
                  "type": "command-param",
                  "head": "project",
                  "description": "The name of the project.",
                  "name": "project",
                  "headId": "project",
                  "paramType": "string"
                },
                {
                  "id": "86a19f68-d7fd-f196-8d47-4468f05be98e",
                  "type": "command-param",
                  "head": "skipTests",
                  "description": "When true, does not create `spec.ts` test files for the new service.",
                  "name": "skipTests",
                  "headId": "skipTests",
                  "paramType": "boolean",
                  "default": "false"
                }
              ],
              "title": "Service generator",
              "url": "schematic-service"
            },
            {
              "id": "c778189a-11e1-fafc-2377-f9dfb0c99b05",
              "entries": [
                {
                  "id": "1af1e549-7b98-7be1-314c-c7492f077095",
                  "type": "text",
                  "text": "```\nng generate serviceWorker [--[option]=[value]]\n```\n\nPass this schematic to the \"run\" command to create a service worker."
                },
                {
                  "id": "65ebe6f7-33c1-edac-77e8-4997de841d34",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "03975243-9f43-dac1-6f64-518f48285df0",
                  "type": "command-param",
                  "head": "configuration",
                  "headId": "configuration",
                  "name": "configuration",
                  "paramType": "string",
                  "default": "production",
                  "description": "The configuration to apply service worker to."
                },
                {
                  "id": "1f15ec15-4fc5-f930-a01f-a516b342e301",
                  "type": "command-param",
                  "head": "project",
                  "headId": "project",
                  "name": "project",
                  "paramType": "string",
                  "description": "The name of the project."
                },
                {
                  "id": "72f0a1a0-d1ad-6c39-5176-6e9626c4febe",
                  "type": "command-param",
                  "head": "target",
                  "headId": "target",
                  "name": "target",
                  "paramType": "string",
                  "description": "The target to apply service worker to.",
                  "default": "build"
                }
              ],
              "title": "ServiceWorker generator\n",
              "url": "schematic-service-worker"
            },
            {
              "id": "49ff8acf-d455-b060-8e4c-af3d9c674676",
              "entries": [
                {
                  "id": "59d8c907-ea4c-8d2c-2d40-10ec4bede9a3",
                  "type": "text",
                  "text": "```\nng generate webWorker <name> [--[option]=[value]]\n```\n\nCreates a new generic web worker definition in the given or default project."
                },
                {
                  "id": "13181699-93ab-d215-a0f3-ba5e014c4c1c",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "fa3da102-dbec-f84b-9350-31f721c7abff",
                  "type": "command-param",
                  "text": "",
                  "head": "project",
                  "headId": "project",
                  "name": "project",
                  "paramType": "string",
                  "description": "The name of the project."
                },
                {
                  "id": "8c628285-e1bc-9c08-6ad7-e70c331cca19",
                  "type": "command-param",
                  "head": "snippet",
                  "headId": "snippet",
                  "name": "snippet",
                  "paramType": "boolean",
                  "default": "true",
                  "description": "Add a worker creation snippet in a sibling file of the same name."
                },
                {
                  "id": "51025a35-657d-32dc-b293-2bfa5a31b26c",
                  "type": "command-param",
                  "head": "target",
                  "headId": "target",
                  "name": "target",
                  "paramType": "string",
                  "default": "build",
                  "description": "The target to apply web worker to."
                }
              ],
              "title": "WebWorker generator\n",
              "url": "schematic-web-worker"
            }
          ],
          "title": "CLI",
          "color": "rgb(234, 37, 37)",
          "url": "cli",
          "langs": {
            "en": true,
            "ru": true
          }
        },
        {
          "id": "9705d447-3d27-8405-f165-c67e410846f6",
          "menu": {
            "items": [
              {
                "id": "0dcf22f5-7e23-cddf-76ec-8baf43a643c8",
                "label": "Introduction",
                "url": "intro"
              },
              {
                "id": "5a6e18d3-92c9-9a6c-6220-a3c70399510b",
                "label": "Interpolation {{...}}",
                "url": "interpolation"
              },
              {
                "id": "2b2819e2-42fb-1627-7b5f-09471ba2bfda",
                "label": "@Directive",
                "url": "directive",
                "separatedFromTop": true
              },
              {
                "id": "fdfe197d-eebc-68a5-ebbc-59abb040c3af",
                "label": "@Component",
                "url": "component"
              },
              {
                "id": "99042531-4b41-2ca5-7750-e001880c35ee",
                "label": "Property binding []",
                "sub": {
                  "items": [
                    {
                      "id": "32e77141-e75d-02e0-b04d-e56f8b26de03",
                      "label": "@Input",
                      "url": "input-binding"
                    },
                    {
                      "id": "81749af7-796d-4241-b42b-75599e8b9ad2",
                      "label": "[attr.]",
                      "url": "attr-binding"
                    },
                    {
                      "id": "1f8c6cf0-acdb-4c0b-fad9-afce6d58ac73",
                      "label": "[class.]",
                      "url": "class-binding"
                    },
                    {
                      "id": "19f3a698-6c4e-73c1-c20f-57c4f67c423e",
                      "label": "[ngClass]",
                      "url": "ngclass-directive"
                    },
                    {
                      "id": "7d7b7a86-d014-b99a-decd-1ea1e231b512",
                      "label": "[style.]",
                      "url": "style-binding"
                    },
                    {
                      "id": "95578183-1fa5-1e34-3ad3-3c5265f66469",
                      "label": "[ngStyle]",
                      "url": "ngstyle-directive"
                    }
                  ]
                },
                "url": "property-binding",
                "asGroup": true
              },
              {
                "id": "e4da7ee7-18aa-c54f-a249-aa4bbe0a2c8b",
                "label": "Event binding ()",
                "sub": {
                  "items": [
                    {
                      "id": "08c13919-eddc-0e3a-98ee-8778362f6870",
                      "label": "@Output",
                      "url": "output-binding"
                    },
                    {
                      "id": "bfdd1cb8-fa31-09ed-063d-b28988add5f9",
                      "label": "Pseudo-events",
                      "url": "pseudo-events"
                    },
                    {
                      "id": "423ee9ba-3e8e-2f82-fce2-e42f648be383",
                      "label": "Touch events",
                      "url": "touch-events"
                    }
                  ]
                },
                "url": "event-binding",
                "asGroup": true
              },
              {
                "id": "cfdd34fe-5979-d9f6-7b68-5ce49d18e000",
                "label": "Two-way binding [()]",
                "sub": {
                  "items": [
                    {
                      "id": "ff059e36-699f-a8ee-3749-8519d92cbcab",
                      "label": "[(ngModel)]",
                      "url": "ngmodel-directive"
                    }
                  ]
                },
                "url": "two-way-binding",
                "asGroup": true
              },
              {
                "id": "149af258-122a-25b5-e525-c71e28c0b2f4",
                "label": "Structural directive *",
                "sub": {
                  "items": [
                    {
                      "id": "8bb3ee24-101b-f63c-6cab-596a666659cf",
                      "label": "ngIf",
                      "url": "ngif-directive"
                    },
                    {
                      "id": "d4cb3fb7-ece0-5458-8c35-a484d806385b",
                      "label": "ngFor",
                      "url": "ngfor-directive"
                    },
                    {
                      "id": "0760c388-10d2-e3c5-6679-fdfd8f4c0f7a",
                      "label": "ngSwitch",
                      "url": "ngswitch-directive"
                    },
                    {
                      "id": "67cc3ae3-c741-4fc2-c901-9c3415776c26",
                      "label": "ngPlural",
                      "url": "ngplural-directive"
                    },
                    {
                      "id": "16174523-8cc1-c3c9-1e1b-1a4246169205",
                      "label": "ngTemplateOutlet",
                      "url": "ngtemplateoutlet-directive"
                    },
                    {
                      "id": "6ae56df9-180f-2768-621e-9c9c60971cb3",
                      "label": "ngComponentOutlet",
                      "url": "ngcomponentoutlet-directive"
                    }
                  ]
                },
                "url": "structural-directive",
                "asGroup": true
              },
              {
                "id": "e2bb4164-46e2-b3ba-7b4f-e8feb5f16ef8",
                "label": "<ng-template>",
                "url": "ng-template",
                "separatedFromTop": true
              },
              {
                "id": "9c5455e0-4809-af42-e4eb-f1b874c0b036",
                "label": "<ng-container>",
                "url": "ng-container"
              },
              {
                "id": "a14aa155-a74a-c54e-8af5-d1156e8b1515",
                "label": "<ng-content>",
                "sub": {
                  "items": []
                },
                "url": "ng-content"
              },
              {
                "id": "b811a104-4212-fd09-4d92-d392ecf19b8b",
                "label": "Reference #",
                "sub": {
                  "items": []
                },
                "url": "reference",
                "asGroup": false
              },
              {
                "id": "785ddaf2-30e0-94c3-a150-287ab27c0b49",
                "label": "Pipe |",
                "url": "pipe",
                "separatedFromTop": true
              },
              {
                "id": "48182894-a972-ab8a-fe60-2e3e2c2dc67c",
                "label": "@Pipe",
                "url": "custom-pipe"
              },
              {
                "id": "27f56815-6273-cdcf-2970-48459537f45e",
                "label": "Built-in pipes",
                "sub": {
                  "items": [
                    {
                      "id": "6182051a-7cdb-2980-0f00-515406a9fc5e",
                      "label": "keyvalue",
                      "url": "keyvalue-pipe",
                      "separatedFromTop": false
                    },
                    {
                      "id": "965165ad-bf70-df3f-e212-3b45142af386",
                      "label": "slice",
                      "url": "slice-pipe"
                    },
                    {
                      "id": "6f0ab200-7755-55c5-458e-a2394cc08bad",
                      "label": "async",
                      "url": "async-pipe"
                    },
                    {
                      "id": "46397892-a1f9-94cf-8c48-e81b22cd1752",
                      "label": "lowerCase",
                      "url": "lowercase-pipe"
                    },
                    {
                      "id": "d7fbbc38-98c9-b90f-9f01-94ccd76f1057",
                      "label": "upperCase",
                      "url": "uppercase-pipe"
                    },
                    {
                      "id": "9c9fa9e6-67ff-4c28-9e0c-758145d62bbd",
                      "label": "titleCase",
                      "url": "titlecase-pipe"
                    },
                    {
                      "id": "97d5a192-5e3b-1108-3bbb-36eb183581fe",
                      "label": "date",
                      "url": "date-pipe"
                    },
                    {
                      "id": "1b7a998d-ec80-df15-e45a-1978509ae21d",
                      "label": "number",
                      "url": "number-pipe"
                    },
                    {
                      "id": "fad1daf7-96a0-21a7-d30e-c973bdfbd3a4",
                      "label": "currency",
                      "url": "currency-pipe"
                    },
                    {
                      "id": "4f7571a6-e137-9aa3-d8c9-e9eea4572ef2",
                      "label": "percent",
                      "url": "percent-pipe"
                    },
                    {
                      "id": "5b8fbcf7-a2d8-a597-cd7f-f7e697dc4968",
                      "label": "i18nPlural",
                      "url": "plural-pipe"
                    },
                    {
                      "id": "ec9d5480-af0e-4734-3d6f-2955c85ff031",
                      "label": "json",
                      "url": "json-pipe"
                    }
                  ]
                },
                "url": "",
                "asGroup": false
              },
              {
                "id": "8be848f3-2dcf-d521-481a-b9ebf8adc8e4",
                "label": "Operators",
                "sub": {
                  "items": [
                    {
                      "id": "30d8e85b-dffe-3f71-317b-bfce2558c02b",
                      "label": "Safe navigation ?.",
                      "url": "safe-navigation-operator"
                    },
                    {
                      "id": "449e5d5a-5e6d-a1c0-4e05-5e726e1e0046",
                      "label": "Non-null assertion !.",
                      "url": "non-null-assertion-operator"
                    }
                  ]
                },
                "asGroup": true
              },
              {
                "id": "41c74daa-5513-858a-d164-ea9bb9af0902",
                "label": "Animation @",
                "url": "animation-binding",
                "separatedFromTop": true
              },
              {
                "id": "991fbf20-fe87-a902-71b8-de43dfc5f2b5",
                "label": "svg: prefix",
                "url": "svg-prefix"
              },
              {
                "id": "8c5254b3-a4e6-3058-9fd7-80cdb0bb2083",
                "label": "ngNonBindable",
                "url": "ngnonbindable"
              },
              {
                "id": "4816c151-da33-44fa-7efb-919b115043b8",
                "label": "$any() type cast",
                "url": "any-type-cast"
              }
            ]
          },
          "pages": [
            {
              "id": "2d85ddc6-ca29-9c79-7367-f688da4df84b",
              "entries": [
                {
                  "id": "c3413bcc-f5a2-8ec3-cbbc-af86aa408f99",
                  "type": "text",
                  "text": "This simple Angular reference for developers describes templates syntax and built-in directives and pipes.\n"
                },
                {
                  "id": "585e6ca8-a67d-e946-0c07-893109e591d4",
                  "type": "text",
                  "text": "## Additional information\n\nExample of hints and tutorials links. You can switch off these panels in the sidebar."
                },
                {
                  "id": "91db7b6c-a9d4-2a88-3415-307f938be267",
                  "type": "hint",
                  "text": "Hint with additional explanation."
                },
                {
                  "id": "0629d5d6-6e68-55ed-4ddd-d19713f1d23d",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Quick Start",
                      "url": "https://angular.io/guide/quickstart",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Introduction",
              "url": "intro"
            },
            {
              "id": "606d308f-47a1-573b-4367-5d5db816dc14",
              "entries": [
                {
                  "id": "de89be41-67dc-851f-d5cd-641a488acacd",
                  "type": "text",
                  "text": "HTML is the language of the Angular template. Almost all HTML syntax is valid template syntax."
                },
                {
                  "id": "68d20a21-c90f-97e0-94d3-b4dcdae68bef",
                  "type": "demo",
                  "source": "```typescript\nJust a regular <strong>html</strong>!\n```\n",
                  "demo": "v6-templates-interpolation1-demo"
                },
                {
                  "id": "393bfe1e-89f7-c808-02b5-c1bf777b791a",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Template Syntax",
                      "url": "https://angular.io/guide/template-syntax",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "e4f825b0-84d5-6c71-2c5a-7afda03b60a1",
                  "type": "text",
                  "text": "You use interpolation to weave calculated strings into the text between HTML element tags and within attribute assignments."
                },
                {
                  "id": "b141f438-43ac-bf33-2ce6-44f91d819394",
                  "type": "demo",
                  "source": "```html\n{{title}}\n<div>\n  <img src=\"{{imageUrl}}\" style=\"height:150px\">\n</div>\n```\n\n```typescript\nexport class MyComponent {\n  title = 'Angular';\n  imageUrl = 'https://angular.io/assets/images/logos/angular/angular.svg';\n}\n```\n",
                  "demo": "v6-templates-interpolation2-demo"
                },
                {
                  "id": "35e0a343-d5a9-3523-bc77-2d1dcf41f299",
                  "type": "text",
                  "text": "More generally, the text between the braces is a template expression that Angular first evaluates and then converts to a string. "
                },
                {
                  "id": "5a7aff02-d300-fc81-513c-b130f5ffedda",
                  "type": "demo",
                  "source": "```html\nThe sum of 1 + 1 is {{1 + 1}}\n```",
                  "demo": "v6-templates-interpolation3-demo"
                },
                {
                  "id": "45ae2172-8163-40c6-8168-941177cdf3b2",
                  "type": "text",
                  "text": "The expression can invoke methods of the host component such as `getVal()`, seen here:"
                },
                {
                  "id": "a86d657f-26dd-f918-bbc6-82e5d284c29a",
                  "type": "demo",
                  "source": "```html\nThe sum of 1 + 1 is not {{1 + 1 + getVal()}}\n```\n\n```typescript\nexport class MyComponent {\n  getVal() {\n    return 2;\n  }\n}\n```\n",
                  "demo": "v6-templates-interpolation4-demo"
                },
                {
                  "id": "33c82ba4-af51-4b4d-e514-98e4c5e21c6f",
                  "type": "text",
                  "text": "You write these template expressions in a language that looks like JavaScript. Many JavaScript expressions are legal template expressions, but not all.\n\nJavaScript expressions that have or promote side effects are prohibited, including:\n\n  * assignments (`=`, `+=`, `-=`, ...)\n  * `new`\n  * chaining expressions with `;` or `,`\n  * increment and decrement operators (`++` and `--`)\n\nOther notable differences from JavaScript syntax include:\n\n  * no support for the bitwise operators `|` and `&`\n  * new template expression operators, such as `|`, `?.` and `!`."
                }
              ],
              "title": "Interpolation",
              "url": "interpolation"
            },
            {
              "id": "c86cb33a-c11d-6fe4-088e-6e504b905c98",
              "entries": [
                {
                  "id": "c0468b4a-3a04-d2dd-0607-0fd823e2369a",
                  "type": "text",
                  "text": "You can define your own directives to attach custom behavior to elements in the DOM."
                },
                {
                  "id": "ebeb4885-15ef-4497-7f39-b3df8b169ac0",
                  "type": "text",
                  "text": "In the following example we create a directive that extends a button to show an alert on click.\n"
                },
                {
                  "id": "49b38ae7-d9e7-b5b1-64be-e1f6618d549f",
                  "type": "demo",
                  "source": "```html\n<button clickAlert>Click me</button>\n```\n\n```typescript\n@Directive({\n  selector: 'button[clickAlert]',\n})\nexport class ClickAlertDirective {\n  @HostListener('click') clickHandler() {\n    alert('Clicked');\n  }\n}\n```\n",
                  "demo": "V6TemplatesDirective1DemoComponent"
                },
                {
                  "id": "c7bd63f7-672d-cab7-12c8-6aba1d7bf0c0",
                  "type": "text",
                  "text": "### Selector\n\nThe `selector` property of `@Directive` declaration identifies this directive in a template and triggers instantiation of the directive.\n\nDeclare as one of the following:\n\n- `element-name`: Select by element name.\n- `.class`: Select by class name.\n- `[attribute]`: Select by attribute name.\n- `[attribute=value]`: Select by attribute name and value.\n- `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.\n- `selector1, selector2`: Select if either `selector1` or `selector2` matches.\n\nAngular only allows directives to apply on CSS selectors that do not cross\nelement boundaries."
                }
              ],
              "title": "@Directive",
              "url": "directive"
            },
            {
              "id": "b6da2c5d-82be-3621-5f7e-888ba9bf6ff8",
              "entries": [
                {
                  "id": "8a22493e-66c9-9bab-8c76-a12268384977",
                  "type": "text",
                  "text": "You can extend the HTML vocabulary of your templates with components that appear as new elements and attributes.\n\nAngular components are a subset of [directives](../directive), always associated with a template. Unlike other directives, only one component can be instantiated per an element in a template."
                },
                {
                  "id": "c4c39e25-444c-9fd7-4668-297f0b550f34",
                  "type": "demo",
                  "source": "```html\nComponent: <my-component></my-component>\n```\n\n```typescript\n@Component({\n  selector: 'my-component',\n  template: `Hello there!`\n})\nexport class MyComponent {\n}\n```",
                  "demo": "V6TemplatesComponent1DemoComponent"
                },
                {
                  "id": "c9fe461b-30fd-3568-16a7-98c31a1b9151",
                  "type": "text",
                  "text": "### Selector\n\nThe `selector` property of `@Component` declaration identifies this component in a template and triggers instantiation of the component.\n\nDeclare as one of the following:\n\n- `element-name`: Select by element name.\n- `.class`: Select by class name.\n- `[attribute]`: Select by attribute name.\n- `[attribute=value]`: Select by attribute name and value.\n- `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.\n- `selector1, selector2`: Select if either `selector1` or `selector2` matches.\n\nAngular only allows component to apply on CSS selectors that do not cross\nelement boundaries."
                }
              ],
              "title": "@Component",
              "url": "component"
            },
            {
              "id": "8c032fed-d145-7cf0-44e5-8089c247c1bc",
              "entries": [
                {
                  "id": "72637089-0aaf-aec6-ecf8-c8e351a48f11",
                  "type": "text",
                  "text": "Write a template property binding to set a property of a view element. The binding sets the property to the value of a template expression.\n\nThe most common property binding sets an element property to a component property value:"
                },
                {
                  "id": "c328c82d-9b76-256a-93ed-44c907639b03",
                  "type": "text",
                  "text": "```typescript\n<img [src]=\"imageUrl\" style=\"height:150px\">\n```",
                  "source": "\n"
                },
                {
                  "id": "10eb04a0-8be3-5b04-d95d-1cc869563ac0",
                  "type": "text",
                  "text": "Another is setting a property of a directive:"
                },
                {
                  "id": "f3ea2aef-f31d-8c2f-d564-c8d73dac81df",
                  "type": "text",
                  "text": "```html\n<div [ngClass]=\"classes\">\n  [ngClass] binding to the classes property\n</div>\n```\n"
                },
                {
                  "id": "c107fa8d-b06b-4f02-13cd-5a010000e862",
                  "type": "text",
                  "text": "Or setting the model property of a custom component (a great way for parent and child components to communicate):"
                },
                {
                  "id": "0d9edd6c-d024-509a-8560-bdeba6c179c4",
                  "type": "text",
                  "text": "```html\n<user-panel [name]=\"userName\"></user-panel>\n```"
                },
                {
                  "id": "ce81097f-5ccb-7096-db2e-a41799775714",
                  "type": "text",
                  "text": "Some people prefer the `bind-` prefix alternative, known as the _canonical form_:"
                },
                {
                  "id": "f85562f5-7e0e-568e-026c-943b08c6c032",
                  "type": "text",
                  "text": "```html\n<user-panel bind-name=\"userName\"></user-panel>\n```"
                }
              ],
              "title": "Property binding []",
              "url": "property-binding"
            },
            {
              "id": "88ffed75-71ab-3093-6594-ff247705cd31",
              "entries": [
                {
                  "id": "ae8e6764-9c4d-18dd-b124-0e628174a9db",
                  "type": "text",
                  "text": "An Input property is a settable property annotated with an `@Input` decorator. Values flow into the property when it is data bound with a property binding.\n\n```typescript\n@Input() testInput: string;\n```"
                },
                {
                  "id": "dcc61a86-f263-dc2c-93d7-dc7768c92d18",
                  "type": "text",
                  "text": "Setting a property of a directive (the same mechanic for components):"
                },
                {
                  "id": "b97309a2-a4cf-9e27-bd48-446427b9fb2e",
                  "type": "demo",
                  "source": "##### app.component.html\n\n```html\n<button clickAlert [message]=\"alertMessage\">Click me!</button>\n```\n\n##### app.component.ts\n\n```\nexport class AppComponent {\n  alertMessage = 'Hi, there.';\n}\n```\n\n##### click-alert.directive.ts\n\n```typescript\n@Directive({\n  selector: '[clickAlert]',\n})\nexport class ClickAlertDirective {\n  @Input message: string;\n\n  @HostListener('click') clickHandler() {\n    alert(this.message);\n  }\n}\n```\n",
                  "demo": "V6TemplatesInputComponent"
                },
                {
                  "id": "33ef9458-7aed-57ca-3212-6692d70f09f8",
                  "type": "text",
                  "text": "Alternatively, you can identify members in the inputs array of the directive metadata:\n\n```typescript\n@Directive({\n  ...\n  inputs: ['message'],\n})\nexport class ClickAlertDirective {\n  message: string;\n}\n```\n"
                }
              ],
              "title": "@Input binding",
              "url": "input-binding"
            },
            {
              "id": "dbd26e6d-061d-3536-2594-47d081a41cf1",
              "entries": [
                {
                  "id": "cd6d1fc4-afd8-0570-a638-557fb9b04cea",
                  "type": "text",
                  "text": "You can set the value of an attribute directly with an attribute binding.\n\nInterpolation and property binding can set only properties, not attributes. You can check out list of registered properties in [the element schema registry](https://github.com/angular/angular/blob/master/packages/compiler/src/schema/dom_element_schema_registry.ts#L78).\n\nYou need attribute bindings to create and bind to custom attributes:"
                },
                {
                  "id": "10b1338d-972d-b85b-b954-751cb8fbfc29",
                  "type": "text",
                  "text": "```html\n<button [attr.aria-label]=\"actionName\">{{actionName}} with Aria</button>\n```"
                }
              ],
              "title": "[attr.] binding",
              "url": "attr-binding"
            },
            {
              "id": "f6e90d6f-844e-95df-9e4c-8946cd25fcb0",
              "entries": [
                {
                  "id": "8b7b13ed-187c-094b-6940-7f719ac8ce48",
                  "type": "text",
                  "text": "You can add and remove CSS class names from an element's `class` attribute with a class binding.\n\nClass binding syntax resembles property binding. Instead of an element property between brackets, start with the prefix `class`, optionally followed by a dot (`.`) and the name of a CSS class: `[class.class-name]`."
                },
                {
                  "id": "c9fdd052-74c6-96aa-25af-dc18e922c6cd",
                  "type": "text",
                  "text": "You can replace that with a binding to a string of the desired class names; this is an all-or-nothing, replacement binding:"
                },
                {
                  "id": "2b37506b-5d11-7f2f-532f-2100f7eee82a",
                  "type": "demo",
                  "source": "```html\n<div class=\"bold italic red\"\n     [class]=\"textClass\">\n  Demo text\n</div>\n```\n\n```typescript\nexport class AppComponent {\n  textClass = 'bold italic';\n}\n```\n\n```css\n.bold {\n  font-weight: 600;\n}\n\n.italic {\n  font-style: italic;\n}\n```",
                  "demo": "V6TemplatesClass1DemoComponent"
                },
                {
                  "id": "4e681ae5-5bbd-67d7-9194-4fa78845991b",
                  "type": "text",
                  "text": "Finally, you can bind to a specific class name. Angular adds the class when the template expression evaluates to truthy. It removes the class when the expression is falsy."
                },
                {
                  "id": "65fe73cc-f45d-c00a-9b00-c564876cc5f2",
                  "type": "demo",
                  "source": "```html\n<div [class.special]=\"isSpecial\">\n  The class binding is special\n</div>\n\n<div class=\"special\"\n     [class.special]=\"!isSpecial\">\n  This one is not so special\n</div>\n```\n\n```typescript\nexport class AppComponent {\n  isSpecial = true;\n}\n```\n\n```css\n.special {\n  background: #36cadb;\n  color: #ffffff;\n}\n```",
                  "demo": "V6TemplatesClass2DemoComponent"
                },
                {
                  "id": "cc8a6805-6906-d632-be15-0acdd505c62a",
                  "type": "text",
                  "text": "While this is a fine way to toggle a single class name, the [NgClass directive](../ngclass-directive) is usually preferred when managing multiple class names at the same time."
                }
              ],
              "title": "[class.] binding",
              "url": "class-binding"
            },
            {
              "id": "bbf7a902-b4db-e936-2ad1-5fc36a66c99f",
              "entries": [
                {
                  "id": "c5da6b5c-2fd2-2bfe-8ba2-8d79f907fcaa",
                  "type": "text",
                  "text": "Adds and removes CSS classes on an HTML element.\n\nThe CSS classes are updated depending on the type of the expression evaluation."
                },
                {
                  "id": "bd33fa88-273e-cdb8-5229-e1417d990bbe",
                  "type": "text",
                  "text": "### String\n\nThe CSS classes listed in the string (space delimited) are added."
                },
                {
                  "id": "927c9289-ef66-47b7-193d-f863260dc67e",
                  "type": "demo",
                  "source": "```html\n<div [ngClass]=\"'bold italic'\">\n  Text in this div is bold and italic.\n</div>\n```\n\n```css\n.bold {\n  font-weight: 600;\n}\n\n.italic {\n  font-style: italic;\n}\n```",
                  "demo": "V6TemplatesNgclass1DemoComponent"
                },
                {
                  "id": "5ae8d7a5-58dd-d54c-c0c6-954a7b68d047",
                  "type": "text",
                  "text": "### Array\n\nThe CSS classes declared as Array elements are added."
                },
                {
                  "id": "a02b0b78-75bc-22d3-d446-bad85f97217e",
                  "type": "demo",
                  "source": "```html\n<div [ngClass]=\"['bold', 'italic']\">\n  Text in this div is bold and italic.\n</div>\n```\n\n```css\n.bold {\n  font-weight: 600;\n}\n\n.italic {\n  font-style: italic;\n}\n```",
                  "demo": "V6TemplatesNgclass2DemoComponent"
                },
                {
                  "id": "f5c91c71-0219-c214-536b-215b199e7355",
                  "type": "text",
                  "text": "### Object\n\nKeys are CSS classes that get added when the expression given in the value evaluates to a truthy value, otherwise they are removed."
                },
                {
                  "id": "1d7326e5-b193-b212-8405-cfd2eeb65e21",
                  "type": "demo",
                  "source": "```html\n<div [ngClass]=\"{bold: true, italic: false}\">\n  Text in this div is bold and not italic.\n</div>\n```\n\n```css\n.bold {\n  font-weight: 600;\n}\n\n.italic {\n  font-style: italic;\n}\n```",
                  "demo": "V6TemplatesNgclass3DemoComponent"
                }
              ],
              "title": "[ngClass] directive",
              "url": "ngclass-directive"
            },
            {
              "id": "2bc85b8e-85b2-77e3-e81c-1af1909627a2",
              "entries": [
                {
                  "id": "6fe27529-8d39-1963-047a-229934cc5a0b",
                  "type": "text",
                  "text": "You can set inline styles with a style binding.\n"
                },
                {
                  "id": "9c09bfb7-8758-647d-9fbe-4775885251aa",
                  "type": "text",
                  "text": "Style binding syntax resembles property binding. Instead of an element property between brackets, start with the prefix `style`, followed by a dot (`.`) and the name of a CSS style property: `[style.style-property]`.\n"
                },
                {
                  "id": "d3ffb630-9814-72eb-c058-aab0b705ec5a",
                  "type": "demo",
                  "source": "```html\n<button [style.color]=\"isSpecial ? 'red': 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan': 'grey'\" >Save</button>\n```\n\n```typescript\nexport class AppComponent {\n  isSpecial = true;\n  canSave = false;\n}\n```",
                  "demo": "V6TemplateStyle1DemoComponent"
                },
                {
                  "id": "1a3d21bc-c96d-9114-483a-69d07ba6c285",
                  "type": "text",
                  "text": "Some style binding styles have a unit extension. The following example conditionally sets the font size in “em” and “%” units ."
                },
                {
                  "id": "96c58bc4-079c-d168-31c3-b188cc531d9d",
                  "type": "demo",
                  "source": "```html\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\" >Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\" >Small</button>\n```\n\n```typescript\nexport class AppComponent {\n  isSpecial = true;\n}\n```\n",
                  "demo": "V6TemplateStyle2DemoComponent"
                },
                {
                  "id": "a97c5436-2308-b9cc-942e-698bace4d3f1",
                  "type": "text",
                  "text": "Note that a style property name can be written in either dash-case, as shown above, or camelCase, such as `fontSize`.\n\nWhile this is a fine way to set a single style, the [NgStyle directive](../ngstyle-directive) is generally preferred when setting several inline styles at the same time."
                }
              ],
              "title": "[style.] binding",
              "url": "style-binding"
            },
            {
              "id": "d737c0cd-33aa-b88b-ff66-acae52f35d34",
              "entries": [
                {
                  "id": "e167a2d8-0ea5-e7d5-b650-e18d2a88fa02",
                  "type": "text",
                  "text": "Update an HTML element styles.\n\nThe styles are updated according to the value of the expression evaluation:\n  - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n  - values are the values assigned to those properties (expressed in the given unit)."
                },
                {
                  "id": "3292e202-deb8-61d2-2f4a-fa663e693b52",
                  "type": "demo",
                  "source": "```html\n<div [ngStyle]=\"{'font-size.px': 20, color: 'white', background: 'red'}\">\n  Text in this div is 20px size, white color on red background.\n</div>\n```",
                  "demo": "V6TemplatesNgstyleDemoComponent"
                }
              ],
              "title": "[ngStyle] directive",
              "url": "ngstyle-directive"
            },
            {
              "id": "c4ad497f-9e9a-d20d-9d20-4cc247d0ff90",
              "entries": [
                {
                  "id": "cfebae6d-c2c5-6b8e-112b-e014b5fe6c68",
                  "type": "text",
                  "text": "Event binding syntax consists of a target event name within parentheses on the left of an equal sign, and a quoted template statement on the right. The following event binding listens for the button's click events, calling the component's `onSave()` method whenever a click occurs:\n\n```html\n<button (click)=\"onSave()\">Save</button>\n```"
                },
                {
                  "id": "6172e897-0ece-ef5e-351a-2c28c769fffd",
                  "type": "text",
                  "text": "You can also bind an unlimited number of event handlers on the same event by separating them with a semi-colon:\n\n```html\n<button (click)=\"onSave1(); onSave2(); …\">Save</button>\n```"
                },
                {
                  "id": "ada9b887-70f6-fba3-5698-0c9a8c931169",
                  "type": "text",
                  "text": "In an event binding, Angular sets up an event handler for the target event.\n\nWhen the event is raised, the handler executes the template statement. The template statement typically involves a receiver, which performs an action in response to the event, such as storing a value from the HTML control into a model.\n\nThe binding conveys information about the event, including data values, through an event object named `$event`.\n\n```html\n<input [value]=\"currentHero.name\"\n       (input)=\"currentHero.name=$event.target.value\">\n```"
                },
                {
                  "id": "820fafea-82a9-44f5-2ba9-be36c6fa7f37",
                  "type": "text",
                  "text": "Some people prefer the `on-` prefix alternative, known as the canonical form:\n\n```html\n<button on-click=\"onSave()\">On Save</button>\n```"
                }
              ],
              "title": "Event binding ()",
              "url": "event-binding"
            },
            {
              "id": "fe9bc1c6-62bd-3a7f-b09a-f6cdb0ad9abd",
              "entries": [
                {
                  "id": "c7355e36-1b0a-8b36-71e0-56d6b54a3367",
                  "type": "text",
                  "text": "An Output property is an observable property annotated with an `@Output` decorator. The property almost always returns an Angular `EventEmitter`. Values flow out of the component as events bound with an event binding.\n\n```typescript\n@Output() testEvent = new EventEmitter<any>();\n```"
                },
                {
                  "id": "3f671af9-b6fe-6968-6644-22a3d52280df",
                  "type": "demo",
                  "source": "##### test-output.component.html\n\n```html\n<button (click)=\"emitTest()\">Click me!</button>\n```\n\n##### test-output.component.ts\n\n```typescript\n@Component({\n  selector: 'test-output',\n  ...\n})\nexport component TestOutputComponent {\n  @Output() test = new EventEmitter();\n\n  emitTest() {\n    this.test.emit('test');\n  }\n}\n```\n\n##### app.component.html\n\n```html\n<test-output (test)=\"handleTest($event)\"></test-output>\n```\n\n##### app.component.ts\n\n```typescript\nexport class AppComponent {\n  handleTest(value) {\n    alert(`Test event handled with value: ${value}`);\n  }\n}\n```",
                  "demo": "V6TemplatesOutputDemoComponent"
                },
                {
                  "id": "235b3527-cc33-9630-8219-b8b1a8ba4138",
                  "type": "text",
                  "text": "Alternatively, you can identify members in the outputs array of the directive metadata, as in this example:\n\n```typescript\n@Component({\n  ...\n  outputs: ['test'],\n})\nexport class TestOutputComponent {\n  test = new EventEmitter();\n}\n```"
                }
              ],
              "title": "@Output binding",
              "url": "output-binding"
            },
            {
              "id": "44f43536-cab7-8f6d-9b6f-407722a19d5f",
              "entries": [
                {
                  "id": "a28d013a-8192-f2b0-672a-44686da91dd9",
                  "type": "text",
                  "text": "You can filter keyboard events in a template by [event key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values).\n\nAngular allows you to directly bind to a specific keystroke or keystroke combination. That means a keyboard event will be only fired on that specific key or key combination instead of on all key events.\n\n"
                },
                {
                  "id": "1fd97e17-577a-bbd0-4701-1359c611e4b6",
                  "type": "demo",
                  "source": "```html\n<input (keyup.enter)=\"enterHandler()\">\n<input (keydown.esc)=\"escHandler()\">\n<input (keyup.shift.f)=\"shiftFHandler()\">\n```\n\n```typescript\nexport class AppComponent {\n  enterHandler() {\n    alert('Enter pressed!');\n  }\n\n  escHandler() {\n    alert('ESC pressed!');\n  }\n\n  shiftFHandler() {\n    alert('Shift+F pressed!');\n  }\n}\n```\n",
                  "demo": "V6TemplatesPseudoEventsDemoComponent"
                },
                {
                  "id": "55ceca5d-961e-f2c5-0b72-c6036c53fcc0",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Pseudo-Events",
                      "url": "https://medium.com/claritydesignsystem/angular-pseudo-events-d4e7f89247ee",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Pseudo-events",
              "url": "pseudo-events"
            },
            {
              "id": "abe0dcb1-366d-a2f9-7845-0ef7054c6fac",
              "entries": [
                {
                  "id": "07fcaca9-5425-5ec3-32f5-6848b73a303d",
                  "type": "text",
                  "text": "Angular supports [Hammer.JS](https://hammerjs.github.io/) gestures. \n\nApplications need to include the HammerJS script itself.\n\n```\nnpm install hammerjs\n```\n\nImport [`HammerModule`](https://angular.io/api/platform-browser/HammerModule) at the root of your application so that Angular can work with HammerJS to detect gesture events.\n\nDefine lazy Hammer loader provider:\n\n```typescript\nproviders: [\n  {\n    provide: HAMMER_LOADER,\n    useValue: async () => {\n      return import('hammerjs/hammer');\n    },\n  },\n...\n```\n\nOr import the library directly to `main.ts` file:\n\n```\nimport 'hammerjs';\n```\n\nAfter that you will be able to bind gesture events."
                },
                {
                  "id": "770e2f21-82b2-92f7-9cb0-f0a60e9816d3",
                  "type": "demo",
                  "source": "```html\n<div (swipe)=\"swipeHandler()\">\n  Swipe me!\n</div>\n```\n\n```typescript\nexport class AppComponent {\n  swipeHandler() {\n    alert('Swipe handled!');\n  }\n}\n```",
                  "demo": "V6TemplatesTouchEventsDemoComponent"
                },
                {
                  "id": "64de618c-c707-b205-e741-2941af2696cb",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Gestures in an Angular Application",
                      "url": "https://medium.com/angular-in-depth/gestures-in-an-angular-application-dde71804c0d0",
                      "lang": "en"
                    },
                    {
                      "url": "https://github.com/angular/components/blob/master/guides/v9-hammerjs-migration.md",
                      "label": "Angular Material - V9 HammerJS migration"
                    }
                  ]
                }
              ],
              "title": "Touch events / Gestures",
              "url": "touch-events"
            },
            {
              "id": "c9cebaac-5148-37a9-0012-3cd4e7a11dc3",
              "entries": [
                {
                  "id": "d3527a28-c94a-5e05-9d10-a07b59006ec7",
                  "type": "text",
                  "text": "The `[(x)]` syntax is easy to demonstrate when the element has a settable property called `x` and a corresponding event named `xChange`."
                },
                {
                  "id": "03ec2dad-ffad-689e-c0dc-dad1965f5c47",
                  "type": "demo",
                  "source": "##### sizer.component.html\n\n```html\n<button (click)=\"dec()\" title=\"smaller\">-</button>\n<button (click)=\"inc()\" title=\"bigger\">+</button>\n```\n\n##### sizer.component.ts\n\n```\nexport class SizerComponent {\n  @Input() size: number;\n\n  @Output() sizeChange = new EventEmitter<number>();\n \n  dec() { \n    this.resize(-1); \n  }\n\n  inc() { \n    this.resize(+1); \n  }\n \n  resize(delta: number) {\n    this.size = this.size + delta;\n    this.sizeChange.emit(this.size);\n  }\n}\n```\n\n##### app.component.html\n\n```html\n<sizer [(size)]=\"size\"></sizer>\n<label [style.font-size.px]=\"size\">FontSize: {{size}}px</label>\n```\n\n##### app.component.ts\n\n```typescript\nexport class AppComponent {\n  size = 13;\n}\n```",
                  "demo": "V6TemplatesTwoWayDemoComponent"
                },
                {
                  "id": "7aba8671-d32c-5f7f-f724-6051566220e8",
                  "type": "text",
                  "text": "It would be convenient to use two-way binding with HTML form elements like `<input>` and `<select>`. However, no native HTML element follows the `x` value and `xChange` event pattern.\n\nFortunately, the Angular [NgModel directive](../ngmodel-directive) is a bridge that enables two-way binding to form elements."
                }
              ],
              "title": "Two-way binding [()]",
              "url": "two-way-binding"
            },
            {
              "id": "7d763ecd-7d99-f82f-325e-7d9298387817",
              "entries": [
                {
                  "id": "ce389c30-ea80-f8c0-46b6-17853676218a",
                  "type": "text",
                  "text": "Two-way data binding with the `NgModel` directive makes easy to display a data property and update that property when the user makes changes."
                },
                {
                  "id": "42f15ddd-249e-d690-220a-2f5cf2b49fe6",
                  "type": "demo",
                  "source": "```html\n<input [(ngModel)]=\"name\">\n{{ name }}\n```\n",
                  "demo": "V6TemplatesNgmodel1DemoComponent"
                },
                {
                  "id": "30583de1-4559-d2df-a0c0-a243b1a7f47d",
                  "type": "text",
                  "text": "Before using the `ngModel` directive in a two-way data binding, you must import the `FormsModule` and add it to the `NgModule` imports list."
                },
                {
                  "id": "b28428b2-3717-2080-8efd-77639dc2245c",
                  "type": "text",
                  "text": "The `[(ngModel)]` syntax can only set a data-bound property. If you need to do something more or something different, you can write the expanded form.\n\nThe following contrived demo forces the input value to uppercase."
                },
                {
                  "id": "a70df14e-6706-d8e0-3826-890cdf6aa987",
                  "type": "demo",
                  "source": "```html\n<input [ngModel]=\"name\"\n       (ngModelChange)=\"setUppercaseName($event)\">\n{{ name }}\n```\n\n```typescript\nexport class AppComponent {\n  name: string;\n\n  setUppercaseName(name: string) {\n    this.name = name.toUpperCase();\n  }\n}\n```",
                  "demo": "V6TemplatesNgmodel2DemoComponent"
                }
              ],
              "title": "[(ngModel)] directive",
              "url": "ngmodel-directive"
            },
            {
              "id": "7f7601c0-7b1e-edad-fe25-ca6e25dfc4ab",
              "entries": [
                {
                  "id": "50ef109c-5229-4a15-c906-1258ef62c8e1",
                  "type": "text",
                  "text": "Structural directives are responsible for HTML layout. They shape or reshape the DOM's structure, typically by adding, removing, and manipulating the host elements to which they are attached.\n\nStructural directives are easy to recognize. An asterisk (*) precedes the directive attribute name as in this example.\n\n```html\n<div *ngIf=\"hero\" class=\"name\">{{hero.name}}</div>\n```"
                },
                {
                  "id": "18b89590-27a0-b143-5223-fe18efc61be5",
                  "type": "text",
                  "text": "### The asterisk (*) prefix\n\nSurely you noticed the asterisk (*) prefix to the directive name and wondered why it is necessary and what it does.\n\nHere is `*ngIf` displaying the hero's name if hero exists.\n\n```html\n<div *ngIf=\"hero\" class=\"name\">{{hero.name}}</div>\n```\n\nThe asterisk is \"syntactic sugar\" for something a bit more complicated. Internally, Angular translates the `*ngIf` attribute into a `<ng-template>` element, wrapped around the host element, like this.\n\n```html\n<ng-template [ngIf]=\"hero\">\n  <div class=\"name\">{{hero.name}}</div>\n</ng-template>\n```\n\nHere's a full-featured application of NgFor, written both ways:\n\n```html\n<div *ngFor=\"let hero of heroes; let i=index; let odd=odd; trackBy: trackById\" [class.odd]=\"odd\">\n  ({{i}}) {{hero.name}}\n</div>\n\n<ng-template ngFor let-hero [ngForOf]=\"heroes\" let-i=\"index\" let-odd=\"odd\" [ngForTrackBy]=\"trackById\">\n  <div [class.odd]=\"odd\">({{i}}) {{hero.name}}</div>\n</ng-template>\n```"
                },
                {
                  "id": "666652b0-a342-4bc8-ed32-af1ed660874d",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular — Structural Directives",
                      "url": "https://angular.io/guide/structural-directives",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Structural directive *",
              "url": "structural-directive"
            },
            {
              "id": "3175bbda-477b-5f6d-1328-1064b3ab5ce7",
              "entries": [
                {
                  "id": "bf80f1fd-cb44-d4a4-cfd2-756eac99d6c9",
                  "type": "text",
                  "text": "You can add or remove an element from the DOM by applying an NgIf directive to that element (called the host element). Bind the directive to a condition expression like `isActive` in this demo."
                },
                {
                  "id": "f9e2b82d-e78c-b61d-84b6-f1bc3f2d5c45",
                  "type": "demo",
                  "source": "```html\n<div *ngIf=\"isActive\">\n  This text is displayed when active.\n</div>\n<div *ngIf=\"!isActive\">\n  This text is displayed when not active.\n</div>\n\n<label>\n  <input type=\"checkbox\" [(ngModel)]=\"isActive\">\n  Is active\n</label>\n```\n\n```typescript\nexport class AppComponent {\n  isActive = true;\n}\n```",
                  "demo": "V6TemplatesNgif1DemoComponent"
                },
                {
                  "id": "aae0a71c-2070-ecab-9f7f-efb7af64bbdf",
                  "type": "text",
                  "text": "The `ngIf` directive doesn't hide elements with CSS. It adds and removes them physically from the DOM.\n\nWhen the `isActive` expression returns a truthy value, `NgIf` adds the `div` to the DOM. When the expression is falsy, `NgIf` removes the `div` from the DOM, destroying that element."
                },
                {
                  "id": "1f41247b-5d42-b0ab-6ec3-e38a40e1e3d1",
                  "type": "text",
                  "text": "### *ngIf with else\n"
                },
                {
                  "id": "de91a481-4a04-c0f7-025b-58ea34369d34",
                  "type": "demo",
                  "source": "```html\n<div *ngIf=\"isActive; else elseBlock\">\n  This text is displayed when active.\n</div>\n<ng-template #elseBlock>\n  This text is displayed when not active.\n</ng-template>\n\n<label>\n  <input type=\"checkbox\" [(ngModel)]=\"isActive\">\n  Is active\n</label>\n```\n\n```typescript\nexport class AppComponent {\n  isActive = true;\n}\n```",
                  "demo": "V6TemplatesNgif2DemoComponent"
                },
                {
                  "id": "c480b6cd-5419-194d-b513-9f9368ed49bf",
                  "type": "text",
                  "text": "### *ngIf with then/else\n"
                },
                {
                  "id": "d546eb01-1ab6-3172-861e-a1a7e22f0633",
                  "type": "demo",
                  "source": "```html\n<div *ngIf=\"isActive; then thenBlock else elseBlock\"></div>\n<ng-template #thenBlock>\n  This text is displayed when active.\n</ng-template>\n<ng-template #elseBlock>\n  This text is displayed when not active.\n</ng-template>\n\n<label>\n  <input type=\"checkbox\" [(ngModel)]=\"isActive\">\n  Is active\n</label>\n```\n\n```typescript\nexport class AppComponent {\n  isActive = true;\n}\n```\n",
                  "demo": "V6TemplatesNgif3DemoComponent"
                },
                {
                  "id": "cc4c7bba-b66b-a550-8af1-7609f771e6d8",
                  "type": "text",
                  "text": "### *ngIf with as\n\nStore the value locally. Handy when you check value or get it from `async` pipe."
                },
                {
                  "id": "93b0eb08-c42c-6d20-9990-3905269fb799",
                  "type": "demo",
                  "source": "```html\n<div *ngIf=\"data?.user as user\">\n  User name: {{ user.name }}\n</div>\n```\n\n```typescript\nexport class AppComponent {\n  data = {\n    user: {\n      name: 'Superman',\n    },\n  };\n}\n```\n",
                  "demo": "V6TemplatesNgif4DemoComponent"
                }
              ],
              "title": "ngIf directive",
              "url": "ngif-directive"
            },
            {
              "id": "ec381611-0cb3-214c-d941-f094f3e22d2a",
              "entries": [
                {
                  "id": "81083af0-2660-24d0-b12b-2b540ee75514",
                  "type": "text",
                  "text": "NgForOf is a repeater directive — a way to present a list of items. You define a block of HTML that defines how a single item should be displayed. You tell Angular to use that block as a template for rendering each item in the list."
                },
                {
                  "id": "dc33c809-f6a6-86fd-be1b-f82db2aca207",
                  "type": "demo",
                  "source": "```html\n<div *ngFor=\"let item of items\">\n  {{ item }}\n</div>\n```\n\n```typescript\nexport class AppComponent {\n  items = ['One', 'Two', 'Three'];\n}\n```\n",
                  "demo": "V6TemplatesNgfor1DemoComponent"
                },
                {
                  "id": "25e36fe9-13bc-7704-7bbb-63d8b3c05a13",
                  "type": "text",
                  "text": "You can also apply an `NgForOf` to a component element, as in this demo:"
                },
                {
                  "id": "f3b80538-2b28-02fa-db7f-1bcbebc7cc56",
                  "type": "demo",
                  "source": "##### app.component.ts\n\n```html\n<my-component *ngFor=\"let item of items\" \n              [item]=\"item\">\n</my-component>\n```\n\n##### app.component.ts\n\n```typescript\nexport class AppComponent {\n  items = ['One', 'Two', 'Three'];\n}\n```\n\n##### my.component.html\n\n```html\n<div>{{ item }}</div> \n```\n\n##### my.component.ts\n\n```typescript\nexport class MyComponent {\n  @Input() item: string;\n}\n```\n\n",
                  "demo": "V6TemplatesNgfor1DemoComponent"
                },
                {
                  "id": "e8ad75a0-91ed-9843-b58f-274425e586e8",
                  "type": "text",
                  "text": "### Local Variables\n\n`NgForOf` provides several exported values that can be aliased to local variables:\n\n- `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n- `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is more complex then a property access, for example when using the async pipe (`userStreams | async`).\n- `index: number`: The index of the current item in the iterable.\n- `first: boolean`: True when the item is the first item in the iterable.\n- `last: boolean`: True when the item is the last item in the iterable.\n- `even: boolean`: True when the item has an even index in the iterable.\n- `odd: boolean`: True when the item has an odd index in the iterable."
                },
                {
                  "id": "9f90d108-f969-18fe-4553-f132f082d795",
                  "type": "demo",
                  "source": "```html\n<li *ngFor=\"let item of itemsObservable | async as items; index as i; first as isFirst\">\n  {{i}}/{{items.length}}. {{ item }} <span *ngIf=\"isFirst\">default</span>\n</li>\n```\n\n```typescript\nexport class AppComponent {\n  itemsObservable = from([['One', 'Two', 'Three']]);\n}\n```\n",
                  "demo": "V6TemplatesNgfor2DemoComponent"
                },
                {
                  "id": "d5178e2a-bb9d-7999-f276-eb1648ad0434",
                  "type": "text",
                  "text": "### *ngFor with trackBy\n\nThe `NgForOf` directive may perform poorly, especially with large lists. A small change to one item, an item removed, or an item added can trigger a cascade of DOM manipulations.\n\nAngular can avoid this churn with `trackBy`. Add a method to the component that returns the value `NgForOf` should track."
                },
                {
                  "id": "d7be2194-141d-46cf-dde2-bac289091c3a",
                  "type": "demo",
                  "source": "```html\n<div *ngFor=\"let item of items; trackBy: trackById\">\n  ({{item.id}}) {{item.title}}\n</div>\n```\n\n```typescript\nexport class AppComponent {\n  items = [\n    {id: 1, title: 'One'},\n    {id: 2, title: 'Two'},\n    {id: 3, title: 'Three'},\n  ];\n\n  trackById(index: number, item: any): number {\n    return item.id;\n  }\n}\n```\n",
                  "demo": "V6TemplatesNgfor3DemoComponent"
                },
                {
                  "id": "93f91bda-8b3d-bb48-8444-9e3b095e699a",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular 2 — Improve performance with trackBy",
                      "url": "https://netbasal.com/angular-2-improve-performance-with-trackby-cc147b5104e5",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "ngFor directive",
              "url": "ngfor-directive"
            },
            {
              "id": "3b6bc9ec-9fb5-6540-ca85-cedd1e56ad59",
              "entries": [
                {
                  "id": "5403fa00-7041-3224-3d0c-f37d49601d7b",
                  "type": "text",
                  "text": "`NgSwitch` is like the JavaScript `switch` statement. It can display one element from among several possible elements, based on a `switch` condition. Angular puts only the selected element into the DOM.\n\n`NgSwitch` is actually a set of three, cooperating directives: `NgSwitch`, `NgSwitchCase`, and `NgSwitchDefault` as seen in this demo."
                },
                {
                  "id": "40258f74-1f54-0fb2-ab80-f24f167bc5fb",
                  "type": "demo",
                  "source": "```html\n<select [(ngModel)]=\"type\">\n  <option [value]=\"1\">First</option>\n  <option [value]=\"2\">Second</option>\n  <option [value]=\"3\">Third</option>\n  <option [value]=\"99\">Other</option>\n</select>\n\n<div [ngSwitch]=\"type\">\n  <div *ngSwitchCase=\"1\">First</div>\n  <div *ngSwitchCase=\"2\">Second</div>\n  <div *ngSwitchCase=\"3\">Third</div>\n  <div *ngSwitchDefault>Default</div>\n</div>\n```",
                  "demo": "V6TemplatesSwitchDemoComponent"
                }
              ],
              "title": "ngSwitch directive",
              "url": "ngswitch-directive"
            },
            {
              "id": "be545b36-dcdc-2122-cb68-2cb76226b35e",
              "entries": [
                {
                  "id": "32a040a5-5318-c3b9-27b6-4cf1d6cda243",
                  "type": "text",
                  "text": "Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n\nTo use this directive you must provide a container element that sets the `[ngPlural]` attribute to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their expression:\n- if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value matches the switch expression exactly,\n- otherwise, the view will be treated as a \"category match\", and will only display if exact value matches aren't found and the value maps to its category for the defined locale.\n\nSee [CLDR — Plural Rules](http://cldr.unicode.org/index/cldr-spec/plural-rules)."
                },
                {
                  "id": "8445b3a6-75f5-85f9-9b26-319848f26b62",
                  "type": "demo",
                  "source": "```html\n<input [(ngModel)]=\"value\" name=\"value\">\n\n<div [ngPlural]=\"value\">\n  <ng-template ngPluralCase=\"=0\">No messages</ng-template>\n  <ng-template ngPluralCase=\"=1\">One message</ng-template>\n  <ng-template ngPluralCase=\"other\">{{ value }} messages</ng-template>\n</div>\n```\n\n```typescript\nexport class AppComponent {\n  value = 1;\n}\n```",
                  "demo": "V6TemplatesNgpluralDemoComponent"
                }
              ],
              "title": "ngPlural directive",
              "url": "ngplural-directive"
            },
            {
              "id": "240a820f-3702-d71e-4bb7-8a935d5899ca",
              "entries": [
                {
                  "id": "1b3b8d0b-0568-bfd9-0c23-454fa9efb802",
                  "type": "text",
                  "text": "Inserts an embedded view from a prepared TemplateRef."
                },
                {
                  "id": "3f431e5f-cbb7-7abb-1ddf-1eac04f799c4",
                  "type": "demo",
                  "source": "```html\n<ng-container *ngTemplateOutlet=\"greet\"></ng-container>\n<hr>\n<ng-container *ngTemplateOutlet=\"eng; context: myContext\"></ng-container>\n<hr>\n<ng-container *ngTemplateOutlet=\"svk; context: myContext\"></ng-container>\n<hr>\n    \n<ng-template #greet>\n  <span>Hello</span>\n</ng-template>\n<ng-template #eng let-name>\n  <span>Hello {{name}}!</span>\n</ng-template>\n<ng-template #svk let-person=\"localSk\">\n  <span>Ahoj {{person}}!</span>\n</ng-template>\n```\n\n```typescript\nexport class AppComponent {\n  myContext = {$implicit: 'World', localSk: 'Svet'};\n}\n```\n",
                  "demo": "V6TemplatesNgtemplateoutletDemoComponent"
                },
                {
                  "id": "efebe3cc-34ad-3b0e-ec95-6e9200c90a3b",
                  "type": "text",
                  "text": "Using the key `$implicit` in the context object will set its value as default."
                }
              ],
              "title": "ngTemplateOutlet directive",
              "url": "ngtemplateoutlet-directive"
            },
            {
              "id": "fc3a146d-e7e5-cfd3-8348-254ee1b73249",
              "entries": [
                {
                  "id": "5edc85b6-260c-9e74-c461-4a226add6653",
                  "type": "text",
                  "text": "Instantiates a single Component type and inserts its Host View into current View. `NgComponentOutlet` provides a declarative approach for dynamic component creation."
                },
                {
                  "id": "028090d8-e22f-1c18-a7ce-9420f04ec538",
                  "type": "text",
                  "text": "```typescript\n@Component({selector: 'hello-world', template: 'Hello World!'})\nclass HelloWorld {\n}\n \n@Component({\n  selector: 'ng-component-outlet-simple-example',\n  template: `<ng-container *ngComponentOutlet=\"HelloWorld\"></ng-container>`\n})\nclass NgTemplateOutletSimpleExample {\n  // This field is necessary to expose HelloWorld to the template.\n  HelloWorld = HelloWorld;\n}\n```"
                },
                {
                  "id": "2da8985d-8240-bc18-352a-fed94c0ddf93",
                  "type": "text",
                  "text": "You can control the component creation process by using the following optional attributes:\n\n* `ngComponentOutletInjector`: Optional custom Injector that will be used as parent for the Component. Defaults to the injector of the current view container.\n* `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content section of the component, if exists.\n* `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other module, then load a component from that module."
                },
                {
                  "id": "9d9e713f-63aa-014a-8c1e-4be5dec0d7cf",
                  "type": "text",
                  "text": "```typescript\n@Injectable()\nclass Greeter {\n  suffix = '!';\n}\n \n@Component({\n  selector: 'complete-component',\n  template: `Complete: <ng-content></ng-content> <ng-content></ng-content>{{ greeter.suffix }}`\n})\nclass CompleteComponent {\n  constructor(public greeter: Greeter) {}\n}\n \n@Component({\n  selector: 'ng-component-outlet-complete-example',\n  template: `\n    <ng-container *ngComponentOutlet=\"CompleteComponent; \n                                      injector: myInjector; \n                                      content: myContent\"></ng-container>`\n})\nclass NgTemplateOutletCompleteExample {\n  // This field is necessary to expose CompleteComponent to the template.\n  CompleteComponent = CompleteComponent;\n  myInjector: Injector;\n \n  myContent = [[document.createTextNode('Ahoj')], [document.createTextNode('Svet')]];\n \n  constructor(injector: Injector) {\n    this.myInjector = ReflectiveInjector.resolveAndCreate([Greeter], injector);\n  }\n}\n```"
                },
                {
                  "id": "72f59091-bcda-2b8d-7ccb-0bc4dca0981f",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Dynamic component rendering in Angular 5 with NgComponentOutlet",
                      "url": "https://medium.com/@symposia/dynamic-component-rendering-in-angular-5-with-ngcomponentoutlet-410bec3ece75",
                      "lang": "en"
                    },
                    {
                      "label": "Here is what you need to know about dynamic components in Angular",
                      "url": "https://blog.angularindepth.com/here-is-what-you-need-to-know-about-dynamic-components-in-angular-ac1e96167f9e",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "ngComponentOutlet directive",
              "url": "ngcomponentoutlet-directive"
            },
            {
              "id": "649a3050-f2eb-2a87-0222-ce7ca88b4a39",
              "entries": [
                {
                  "id": "362dc4dd-6573-feb5-6b98-9111c8cb8aba",
                  "type": "text",
                  "text": "The `<ng-template>` is an Angular element for rendering HTML. It is never displayed directly. In fact, before rendering the view, Angular replaces the `<ng-template>` and its contents with a comment.\n\nIf there is no structural directive and you merely wrap some elements in a `<ng-template>`, those elements disappear."
                },
                {
                  "id": "318701fd-bf9a-4248-5b13-99862d7e96fe",
                  "type": "demo",
                  "source": "```html\n<p>Hip!</p>\n<ng-template>\n  <p>Hip!</p>\n</ng-template>\n<p>Hooray!</p>\n```",
                  "demo": "V6TemplatesNgtemplate1DemoComponent"
                },
                {
                  "id": "1096b87e-330f-bd74-d714-099d8748ce90",
                  "type": "text",
                  "text": "### ng-template with *ngTemplateOutlet\n\nSave template to a `ref` and then output with `*ngTemplateOutlet` directive."
                },
                {
                  "id": "7aa5d552-bf2c-cef8-66da-9079be676fad",
                  "type": "demo",
                  "source": "```html\n<ng-template #templateRef>Hello!</ng-template>\n<div *ngTemplateOutlet=\"templateRef\"></div>\n```",
                  "demo": "V6TemplatesNgtemplate2DemoComponent"
                },
                {
                  "id": "fa90df9f-997e-0b3e-3e73-982aa43483e8",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular ng-template, ng-container and ngTemplateOutlet - The Complete Guide To Angular Templates",
                      "lang": "en",
                      "url": "https://blog.angular-university.io/angular-ng-template-ng-container-ngtemplateoutlet/"
                    },
                    {
                      "label": "Use <ng-template>",
                      "url": "https://blog.angularindepth.com/use-ng-template-c72852c37fba",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "ng-template",
              "url": "ng-template"
            },
            {
              "id": "dad50ffc-c7dc-e8a6-ddac-c6faf06881e3",
              "entries": [
                {
                  "id": "d3503990-12fb-5def-fe19-b8fd2769fa75",
                  "type": "text",
                  "text": "The Angular `<ng-container>` is a grouping element that doesn't interfere with styles or layout because Angular doesn't put it in the DOM."
                },
                {
                  "id": "d5241d89-c0c2-4571-092d-58a61c0089b7",
                  "type": "text",
                  "text": "```html\n<p>\n  I turned the corner\n  <ng-container *ngIf=\"hero\">\n    and saw {{hero.name}}. I waved\n  </ng-container>\n  and continued on my way.\n</p>\n```"
                }
              ],
              "title": "ng-container",
              "url": "ng-container"
            },
            {
              "id": "2142e2e6-e570-7b4d-4989-b3e98ade0730",
              "entries": [
                {
                  "id": "5f5bd1fe-8705-6a0e-7924-b844a888274a",
                  "type": "text",
                  "text": "Content projection is a way to import HTML content from outside the component and insert that content into the component's template in a designated spot."
                },
                {
                  "id": "5c0063ab-2b1d-f4bf-f905-55197dc8b556",
                  "type": "demo",
                  "source": "##### app.component.ts\n\n```html\n<my-component>\n  Some content\n</my-component>\n```\n\n##### my.component.ts\n\n```html\nProjected content: <ng-content></ng-content>\n```\n",
                  "demo": "V6TemplatesNgcontent1DemoComponent"
                },
                {
                  "id": "6e03ffe8-b388-658a-e2e1-fdd72886a697",
                  "type": "text",
                  "text": "### ng-content with select\n"
                },
                {
                  "id": "a4221366-ca11-6f2a-1dc2-6a889d89f05c",
                  "type": "demo",
                  "source": "##### app.component.ts\n\n```html\n<my-component>\n  <div class=\"primary\">Primary content</div>\n  <div secondary>Secondary content</div>\n  <div>Div content</div>\n  Non selected content.\n</my-component>\n```\n\n##### my.component.ts\n\n```html\n<div><ng-content></ng-content></div>\n<div>\n  Primary content: \n  <ng-content select=\".primary\"></ng-content>\n</div>\n<div>\n  Secondary content: \n  <ng-content select=\"[secondary]\"></ng-content>\n</div>\n<div>\n  Div content: \n  <ng-content select=\"div\"></ng-content>\n</div>\n```",
                  "demo": "V6TemplatesNgcontent2DemoComponent"
                },
                {
                  "id": "04421e83-537d-252b-e455-3b5d06f39fdb",
                  "type": "text",
                  "text": "### ng-content with pojectAs"
                },
                {
                  "id": "b1444004-b72b-9d0d-2897-eb8208e86e3e",
                  "type": "text",
                  "text": "You can define which selector will be used with `<ng-content>`."
                },
                {
                  "id": "0f5c671b-a3ac-b4dd-be46-c253b1542407",
                  "type": "demo",
                  "source": "##### app.component.ts\n\n```html\n<my-component>\n  <ng-container ngProjectAs=\"custom\">\n   Projected As.\n  </ng-container>\n  Non selected content.\n</my-component>\n```\n\n##### my.component.ts\n\n```html\n<div><ng-content></ng-content></div>\n<div>\n  <ng-content select=\"custom\"></ng-content>\n</div>\n```",
                  "demo": "V6TemplatesNgcontent3DemoComponent"
                },
                {
                  "id": "2a879fde-f6f3-098e-1966-d1b08f8590bb",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "ng-content: The hidden docs",
                      "lang": "en",
                      "url": "https://medium.com/claritydesignsystem/ng-content-the-hidden-docs-96a29d70d11b"
                    }
                  ]
                }
              ],
              "title": "Content projection with ng-content",
              "url": "ng-content"
            },
            {
              "id": "2860a0ea-e940-73db-1f80-56cbe0982414",
              "entries": [
                {
                  "id": "ea96ec05-57ea-59ef-507a-b8e578275ee1",
                  "type": "text",
                  "text": "A template reference variable is often a reference to a DOM element within a template. It can also be a reference to an Angular component or directive or a web component.\n\nUse the hash symbol (#) to declare a reference variable. You can refer to a template reference variable anywhere in the template. "
                },
                {
                  "id": "b0ad63d0-e347-7742-d538-ba13d6452e51",
                  "type": "demo",
                  "source": "```html\n<input #phone placeholder=\"phone number\">\n\n<!-- phone refers to the input element; pass its `value` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n```\n\n```typescript\nexport class AppComponent {\n  callPhone(phone: string) {\n    alert(phone);\n  }\n}\n```",
                  "demo": "V6TemplatesReferenceDemoComponent"
                },
                {
                  "id": "bee64252-a902-4476-ea46-182304cf85a2",
                  "type": "text",
                  "text": "You can use the `ref-` prefix alternative to `#`.\n\n```html\n<input ref-fax placeholder=\"fax number\">\n<button (click)=\"callFax(fax.value)\">Fax</button>\n```"
                },
                {
                  "id": "f6d5c18a-5e91-4a6d-67d1-4adae4ecf24b",
                  "type": "text",
                  "text": "## exportAs\n\nIn most cases, Angular sets the reference variable's value to the element on which it was declared. But a directive can change that behavior and set the value to something else, such as itself."
                },
                {
                  "id": "f9bd167b-2682-96bc-2e73-c61eb30b1b11",
                  "type": "text",
                  "text": "```typescript\n@Directive({\n selector: '[tooltip]',\n exportAs: 'tooltip'\n})\n```\n\n```html\n<a tooltip=\"I'm a tooltip!!\" #tooltip=\"tooltip\">I'm a link</a>\n<button (click)=\"tooltip.toggleTooltip()\">Toggle tooltip</button>\n```"
                },
                {
                  "id": "355d987b-6bc0-5774-5b06-87409d04e56f",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular 2 — Take Advantage Of The exportAs Property",
                      "lang": "en",
                      "url": "https://netbasal.com/angular-2-take-advantage-of-the-exportas-property-81374ce24d26"
                    }
                  ]
                }
              ],
              "title": "Reference #",
              "url": "reference"
            },
            {
              "id": "10b3e94d-1395-cadf-8c27-8c0445a7ee30",
              "entries": [
                {
                  "id": "878c3b28-7cc1-dcaf-f6ef-69ebb35fcf92",
                  "type": "text",
                  "text": "The result of an expression might require some transformation before you're ready to use it in a binding.\n\nAngular pipes are a good choice for small transformations such as these. Pipes are simple functions that accept an input value and return a transformed value. They're easy to apply within template expressions, using the pipe operator (|):"
                },
                {
                  "id": "b9903498-9c8d-81e4-3524-d3d34999edd2",
                  "type": "text",
                  "text": "```html\nTitle through uppercase pipe: \n{{title | uppercase}}\n```"
                },
                {
                  "id": "7429be27-b2f8-9167-8d74-5ab7a365a059",
                  "type": "text",
                  "text": "You can chain expressions through multiple pipes:"
                },
                {
                  "id": "ac9a57c6-cbf5-7b23-b6f7-012c9c6153c9",
                  "type": "text",
                  "text": "```html\nTitle through a pipe chain:\n{{title | uppercase | lowercase}}\n```"
                },
                {
                  "id": "efb51028-e59e-bfc2-6ae8-4ebbb375ae83",
                  "type": "text",
                  "text": "And you can also apply parameters to a pipe:"
                },
                {
                  "id": "586157a6-cc30-a4a5-63ec-aabf7cc20be7",
                  "type": "text",
                  "text": "```html\nBirthdate: \n{{currentHero?.birthdate | date:'longDate'}}\n```"
                }
              ],
              "title": "Pipe |",
              "url": "pipe"
            },
            {
              "id": "34f9abdb-1b3b-65ea-d33c-01779e618308",
              "entries": [
                {
                  "id": "aca1e3a2-9cd9-84ae-7b1c-16e0b0a5680a",
                  "type": "text",
                  "text": "You can create your own custom pipes.\n\nThe pipe class implements the `PipeTransform` interface's `transform` method that accepts an input value followed by optional parameters and returns the transformed value."
                },
                {
                  "id": "6eb54eff-b667-8860-67d9-2a380caf6909",
                  "type": "demo",
                  "source": "```typescript\n@Pipe({name: 'multi'})\nexport class MultiPipe implements PipeTransform {\n  transform(value: number, multiplier: number = 2): number {\n    return value * multiplier;\n  }\n}\n```\n\n```html\n<div>{{ 2 | multi }}</div>\n<div>{{ 10 | multi:5 }}</div>\n```",
                  "demo": "V6TemplatesCustompipeDemoComponent"
                },
                {
                  "id": "3f071c80-e67d-d9ba-0227-aa899b54f18f",
                  "type": "text",
                  "text": "Note the following:\n\n* You use your custom pipe the same way you use built-in pipes.\n* You must include your pipe in the `declarations` array of the `AppModule` or in a module where you need it."
                },
                {
                  "id": "7df140b8-1a98-06f4-c6ce-c5bb949dd728",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Step by Step Custom Pipes in Angular",
                      "url": "https://toddmotto.com/angular-pipes-custom-pipes",
                      "lang": "en"
                    },
                    {
                      "label": "The essential difference between pure and impure pipes in Angular and why that matters",
                      "url": "https://blog.angularindepth.com/the-essential-difference-between-pure-and-impure-pipes-and-why-that-matters-999818aa068",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "@Pipe",
              "url": "custom-pipe"
            },
            {
              "id": "dec405ef-c681-b0b8-1c12-8f49a96163fd",
              "entries": [
                {
                  "id": "9c4075b5-7209-d6a3-e1cd-d8f3e15929d4",
                  "type": "text",
                  "text": "Transforms Object or Map into an array of key value pairs."
                },
                {
                  "id": "599d8896-6f72-bcd1-ade3-4d8b32ca2d0f",
                  "type": "text",
                  "text": "This examples show how an Object or a Map and be iterated by ngFor with the use of this keyvalue pipe."
                },
                {
                  "id": "6e50f231-fb9a-76b1-f681-f8f2ad33aed7",
                  "type": "demo",
                  "source": "```html\n<p>Object</p>\n<div *ngFor=\"let item of object | keyvalue\">\n  {{item.key}}:{{item.value}}\n</div>\n<p>Map</p>\n<div *ngFor=\"let item of map | keyvalue\">\n  {{item.key}}:{{item.value}}\n</div>\n```\n\n```typescript\nexport class AppComponent {\n  object: {[key: number]: string} = {2: 'foo', 1: 'bar'};\n  map = new Map([[2, 'foo'], [1, 'bar']]);\n}\n```",
                  "demo": "V6TemplatesKeyvaluepipeDemoComponent"
                },
                {
                  "id": "6e699662-a468-4b94-499c-c908394b5132",
                  "type": "text",
                  "text": "The output array will be ordered by keys. By default the comparator will be by Unicode point value. You can optionally pass a compareFn if your keys are complex types."
                }
              ],
              "title": "keyvalue pipe",
              "url": "keyvalue-pipe"
            },
            {
              "id": "ffb49eb4-ffc7-5ef4-12d7-7d37de6869ef",
              "entries": [
                {
                  "id": "4fa2d0a2-6333-3d35-d1dd-db5568ca11c6",
                  "type": "text",
                  "text": "Creates a new `Array` or `String` containing a subset (slice) of the elements.\n\nAll behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()` and `String.prototype.slice()`.\n\nWhen operating on an `Array`, the returned `Array` is always a copy even when all the elements are being returned.\n\nWhen operating on a blank value, the pipe returns the blank value.\n"
                },
                {
                  "id": "7f22a6f6-2dd1-3072-87e3-825dac1a1de2",
                  "type": "text",
                  "text": "### List Demo"
                },
                {
                  "id": "e7fd6e49-55c6-f063-6a39-8b881b70c774",
                  "type": "demo",
                  "source": "```html\n<ul>\n  <li *ngFor=\"let i of collection | slice:1:3\">{{i}}</li>\n</ul>\n```\n\n```typescript\nexport class AppComponent {\n  collection: string[] = ['a', 'b', 'c', 'd'];\n}\n```",
                  "demo": "V6TemplatesSlicepipe1DemoComponent"
                },
                {
                  "id": "728e5b38-c4fb-2191-7de5-5da699cbee4b",
                  "type": "text",
                  "text": "### String Demo"
                },
                {
                  "id": "085a8aee-26b5-d650-2500-9a74c1e49df2",
                  "type": "demo",
                  "source": "```html\n<p>'{{str | slice:0:4}}' - output is expected to be 'abcd'</p>\n<p>'{{str | slice:4:0}}' - output is expected to be ''</p>\n<p>'{{str | slice:-4}}' - output is expected to be 'ghij'</p>\n<p>'{{str | slice:-4:-2}}' - output is expected to be 'gh'</p>\n<p>'{{str | slice:-100}}' - output is expected to be 'abcdefghij'</p>\n<p>'{{str | slice:100}}' - output is expected to be ''</p>\n```\n\n```typescript\nexport class AppComponent {\n  str = 'abcdefghij';\n}\n```\n",
                  "demo": "V6TemplatesSlicepipe2DemoComponent"
                }
              ],
              "title": "slice pipe",
              "url": "slice-pipe"
            },
            {
              "id": "c047db73-514c-a389-a673-43697da418df",
              "entries": [
                {
                  "id": "304b6bc8-5d18-3dad-d6da-df61056ebe16",
                  "type": "text",
                  "text": "Unwraps a value from an asynchronous primitive.\n\nThe `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has emitted. When a new value is emitted, the `async` pipe marks the component to be checked for changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid potential memory leaks.\n"
                },
                {
                  "id": "1627e149-09d9-c26f-8e79-d2bf2ee146c7",
                  "type": "demo",
                  "source": "```html\n<code>observable|async</code>\nTime: {{ time | async }}\n```\n\n```typescript\nexport class AppComponent {\n  time = new Observable<string>((observer: Observer<string>) => {\n    setInterval(() => observer.next(new Date().toString()), 1000);\n  });\n}\n```",
                  "demo": "V6TemplatesAsyncpipeDemoComponent"
                },
                {
                  "id": "59465130-fe3a-a332-63b7-776fa083ba1b",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Handling Observables with NgIf and the Async Pipe",
                      "url": "https://toddmotto.com/angular-ngif-async-pipe",
                      "lang": "en"
                    },
                    {
                      "label": "Three things you didn't know about the AsyncPipe",
                      "url": "https://blog.thoughtram.io/angular/2017/02/27/three-things-you-didnt-know-about-the-async-pipe.html",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "async pipe",
              "url": "async-pipe"
            },
            {
              "id": "cbadb122-f290-da4e-c71c-2cb6f09ad015",
              "entries": [
                {
                  "id": "3ae795ef-5045-dabf-f238-16a27f7173ba",
                  "type": "text",
                  "text": "Transforms text to all lower case."
                },
                {
                  "id": "3694ddea-3735-badc-f2ac-ec74cbb41e3c",
                  "type": "demo",
                  "source": "```html\n<input [(ngModel)]=\"value\">\n<p>In lowercase: <pre>{{value | lowercase}}</pre>\n```\n",
                  "demo": "V6TemplatesLowercasepipeDemoComponent"
                }
              ],
              "title": "lowerCase pipe",
              "url": "lowercase-pipe"
            },
            {
              "id": "fab45add-6fcd-2e1f-3550-a65400aaae6d",
              "entries": [
                {
                  "id": "4c9819c1-d3fe-6d41-fe3c-9f875020bcac",
                  "type": "text",
                  "text": "Transforms text to all upper case."
                },
                {
                  "id": "004c4d34-a51d-af84-1caf-6c0ef8749c1a",
                  "type": "demo",
                  "source": "```html\n<input [(ngModel)]=\"value\">\n<p>In uppercase: <pre>{{value | uppercase}}</pre>\n```\n",
                  "demo": "V6TemplatesUppercasepipeDemoComponent"
                }
              ],
              "title": "upperCase pipe",
              "url": "uppercase-pipe"
            },
            {
              "id": "f565837f-d88e-31e5-0445-b28d367911e8",
              "entries": [
                {
                  "id": "b82c8bb8-79ac-31c6-29e6-d494eb23783e",
                  "type": "text",
                  "text": "Transforms text to title case. Capitalizes the first letter of each word, and transforms the rest of the word to lower case. Words are delimited by any whitespace character, such as a space, tab, or line-feed character."
                },
                {
                  "id": "ced7c298-7711-e36b-594c-005834697ac9",
                  "type": "demo",
                  "source": "```html\n<p>{{'some string' | titlecase}}</p>\n<p>{{'tHIs is mIXeD CaSe' | titlecase}}</p>\n<p>{{'it\\'s non-trivial question' | titlecase}}</p>\n<p>{{'one,two,three' | titlecase}}</p>\n<p>{{'true|false' | titlecase}}</p>\n<p>{{'foo-vs-bar' | titlecase}}</p>\n```",
                  "demo": "V6TemplatesTitlecasepipeDemoComponent"
                }
              ],
              "title": "titleCase pipe",
              "url": "titlecase-pipe"
            },
            {
              "id": "40991bb3-d497-82ac-fa84-994b9d641cf3",
              "entries": [
                {
                  "id": "99c28866-50e2-5bb6-af9e-a1728401dbe0",
                  "type": "text",
                  "text": "Formats a date value according to locale rules.\n"
                },
                {
                  "id": "188ae9bc-a16a-671d-722a-40168866c78c",
                  "type": "demo",
                  "source": "```html\n<p>Today is {{today | date}}</p>\n<p>Or if you prefer, {{today | date:'fullDate'}}</p>\n<p>The time is {{today | date:'h:mm a z'}}</p>\n```\n\n```typescript\nexport class AppComponent {\n  today = Date.now();\n}\n```\n",
                  "demo": "V6TemplatesDatepipeDemoComponent"
                },
                {
                  "id": "ecf0104c-1433-4041-0d11-7cb6c7cb01aa",
                  "type": "text",
                  "text": "Only the `en-US` locale data comes with Angular. To localize dates in another language, you must import the corresponding locale data.\n"
                },
                {
                  "id": "976de5ed-9a26-cd61-76d8-a7a15def595c",
                  "type": "text",
                  "text": "## Parameters"
                },
                {
                  "id": "82391433-d23f-719e-7917-91092a8103f2",
                  "type": "text",
                  "text": "```\n{{ value_expression | date [ : format [ : timezone [ : locale ] ] ] }}\n```"
                },
                {
                  "id": "722b40bf-896a-528a-d99b-64658668df3a",
                  "type": "toc"
                },
                {
                  "id": "17db8be0-9934-1b42-24ca-de381d10deab",
                  "type": "interface-option",
                  "head": "format",
                  "description": "The date/time components to include, using predefined options or a custom format string.\n",
                  "name": "format",
                  "headId": "format",
                  "interface": "format: string = 'mediumDate'",
                  "showAdditional": true,
                  "additional": "#### Pre-defined format options\n\nExamples are given in `en-US` locale.\n\n* `short`: equivalent to 'M/d/yy, h:mm a' (6/15/15, 9:03 AM).\n* `medium`: equivalent to 'MMM d, y, h:mm:ss a' (Jun 15, 2015, 9:03:01 AM).\n* `long`: equivalent to 'MMMM d, y, h:mm:ss a z' (June 15, 2015 at 9:03:01 AM GMT+1).\n* `full`: equivalent to 'EEEE, MMMM d, y, h:mm:ss a zzzz' (Monday, June 15, 2015 at 9:03:01 AM GMT+01:00).\n* `shortDate`: equivalent to 'M/d/yy' (6/15/15).\n* `mediumDate`: equivalent to 'MMM d, y' (Jun 15, 2015).\n* `longDate`: equivalent to 'MMMM d, y' (June 15, 2015).\n* `fullDate`: equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n* `shortTime`: equivalent to 'h:mm a' (9:03 AM).\n* `mediumTime`: equivalent to 'h:mm:ss a' (9:03:01 AM).\n* `longTime`: equivalent to 'h:mm:ss a z' (9:03:01 AM GMT+1).\n* `fullTime`: equivalent to 'h:mm:ss a zzzz' (9:03:01 AM GMT+01:00).\n\n#### Custom format options\n\nYou can construct a format string using symbols to specify the components of a date-time value, as described in the [official documentation](https://angular.io/api/common/DatePipe#custom-format-options)."
                },
                {
                  "id": "10a82d8a-badd-fcd4-e1a2-d5cb1854dc4d",
                  "type": "interface-option",
                  "head": "timezone",
                  "description": "A timezone offset (such as '+0430'), or a standard UTC/GMT or continental US timezone abbreviation. Default is the local system timezone of the end-user's machine.\n",
                  "name": "timezone",
                  "headId": "timezone",
                  "interface": "timezone?: string"
                },
                {
                  "id": "ea898665-ba0c-8e57-eebe-722d379be03d",
                  "type": "interface-option",
                  "head": "locale",
                  "description": "A locale code for the locale format rules to use. ",
                  "name": "locale",
                  "headId": "locale",
                  "interface": "locale?: string",
                  "showAdditional": true,
                  "additional": "When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default. See [Setting your app locale](https://angular.io/guide/i18n#setting-up-the-locale-of-your-app)."
                }
              ],
              "title": "date pipe",
              "url": "date-pipe"
            },
            {
              "id": "bc711eea-b174-20e4-0250-1b412bf98983",
              "entries": [
                {
                  "id": "6f475a0f-1aa7-68d6-735a-e8782f349f9a",
                  "type": "text",
                  "text": "Transforms a number into a string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations."
                },
                {
                  "id": "a9f79c01-96c6-de9e-9b6c-27e2e3a7b941",
                  "type": "demo",
                  "source": "```html\n<p>e (no formatting): {{e | number}}</p>\n<p>e (3.1-5): {{e | number:'3.1-5'}}</p>\n<p>e (4.5-5): {{e | number:'4.5-5'}}</p>\n<p>pi (no formatting): {{pi | number}}</p>\n<p>pi (3.1-5): {{pi | number:'3.1-5'}}</p>\n<p>pi (3.5-5): {{pi | number:'3.5-5'}}</p>\n<p>-2.5 (1.0-0): {{-2.5 | number:'1.0-0'}}</p>\n```\n\n```typescript\nexport class AppComponent {\n  e = Math.E;\n  pi = Math.PI;\n}\n```",
                  "demo": "V6TemplatesNumberpipeDemoComponent"
                },
                {
                  "id": "7780965a-d3a1-2003-87ca-28e2bbbc5112",
                  "type": "text",
                  "text": "## Parameters"
                },
                {
                  "id": "c030a517-9bc3-afae-c843-74077470a038",
                  "type": "text",
                  "text": "```\n{{ value_expression | number [ : digitsInfo [ : locale ] ] }}\n```"
                },
                {
                  "id": "b190a315-7756-3c24-73d6-13459ce37bf8",
                  "type": "toc"
                },
                {
                  "id": "d29e142d-2aa4-9ef2-ace3-7329c2b46e4d",
                  "type": "interface-option",
                  "head": "digitsInfo",
                  "description": "Decimal representation options.",
                  "name": "digitsInfo",
                  "headId": "digitsInfo",
                  "interface": "digitsInfo?: string",
                  "showAdditional": true,
                  "additional": "Specified by a string in the following format:\n\n```\n{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\n```\n\n- `minIntegerDigits`: The minimum number of integer digits before the decimal point. Default is `1`.\n- `minFractionDigits`: The minimum number of digits after the decimal point. Default is `0`.\n- `maxFractionDigits`: The maximum number of digits after the decimal point. Default is `3`."
                },
                {
                  "id": "87614371-8346-aefd-2c55-bbed3d3832ee",
                  "type": "interface-option",
                  "head": "locale",
                  "description": "A locale code for the locale format rules to use.",
                  "name": "locale",
                  "headId": "locale",
                  "interface": "locale?: string"
                }
              ],
              "title": "number (decimal) pipe",
              "url": "number-pipe"
            },
            {
              "id": "ebd7cdc5-4b87-81d3-cd71-6e52ba84ca44",
              "entries": [
                {
                  "id": "c5312b42-abf1-cc8f-91b3-19c7475bb222",
                  "type": "text",
                  "text": "Transforms a number to a currency string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations."
                },
                {
                  "id": "493c9dd8-dccc-f7f0-191e-1d76a5dc0ded",
                  "type": "demo",
                  "source": "```html\n<p>A: {{a | currency}}</p>\n<p>A: {{a | currency:'CAD'}}</p>\n<p>A: {{a | currency:'CAD':'code'}}</p>\n<p>B: {{b | currency:'CAD':'symbol':'4.2-2'}}</p>\n<p>B: {{b | currency:'CAD':'symbol-narrow':'4.2-2'}}</p>\n<p>B: {{b | currency:'CLP'}}</p>\n```\n\n```typescript\nexport class AppComponent {\n  a = 0.259;\n  b = 1.3495;\n}\n```",
                  "demo": "V6TemplatesCurrencypipeDemoComponent"
                },
                {
                  "id": "bfbbde41-dae9-c512-9c57-05f9458a8a72",
                  "type": "text",
                  "text": "## Parameters\n"
                },
                {
                  "id": "2ff01517-b8fb-1d13-18a2-07c42abadf2b",
                  "type": "text",
                  "text": "```\n{{ value_expression | currency [ : currencyCode [ : display [ : digitsInfo [ : locale ] ] ] ] }}\n```"
                },
                {
                  "id": "7eec68bc-540d-0b6c-ed9a-f38f3c915c24",
                  "type": "toc"
                },
                {
                  "id": "e5f9e1ec-79be-dd6e-691d-35124bef0995",
                  "type": "interface-option",
                  "head": "currencyCode",
                  "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such as `USD` for the US dollar and `EUR` for the euro.\n",
                  "name": "currencyCode",
                  "headId": "currencyCode",
                  "interface": "currencyCode?: string"
                },
                {
                  "id": "efe8a6b7-0cd0-5b6e-e412-040128a9ca24",
                  "type": "interface-option",
                  "head": "display",
                  "description": "The format for the currency indicator.",
                  "interface": "display: 'code'|'symbol'|'symbol-narrow'|string|boolean = 'symbol'",
                  "name": "display",
                  "headId": "display",
                  "showAdditional": true,
                  "additional": "One of the following:\n  - `code`: Show the code (such as `USD`).\n  - `symbol`(default): Show the symbol (such as `$`).\n  - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their currency.\n\nFor example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the locale has no narrow symbol, uses the standard symbol for the locale.\n  - String: Use the given string value instead of a code or a symbol.\n  - Boolean (marked deprecated in v5): `true` for symbol and false for `code`."
                },
                {
                  "id": "efc8361b-627f-9ce2-7e84-05e620c974b1",
                  "type": "interface-option",
                  "head": "digitsInfo",
                  "description": "Decimal representation options.",
                  "interface": "digitsInfo?: string",
                  "name": "digitsInfo",
                  "headId": "digitsInfo",
                  "showAdditional": true,
                  "additional": "Specified by a string in the following format:\n\n```\n{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\n```\n\n- `minIntegerDigits`: The minimum number of integer digits before the decimal point. Default is `1`.\n- `minFractionDigits`: The minimum number of digits after the decimal point. Default is `0`.\n- `maxFractionDigits`: The maximum number of digits after the decimal point. Default is `3`.\n\nIf not provided, the number will be formatted with the proper amount of digits, depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\n\nFor example, the Canadian dollar has 2 digits, whereas the Chilean peso has none."
                },
                {
                  "id": "9660c420-816b-40f1-8642-05bb4031e511",
                  "type": "interface-option",
                  "head": "locale",
                  "description": "A locale code for the locale format rules to use.",
                  "name": "locale",
                  "headId": "locale",
                  "interface": "locale?: string",
                  "showAdditional": true,
                  "additional": "When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default. See [Setting your app locale](https://angular.io/guide/i18n#setting-up-the-locale-of-your-app)."
                }
              ],
              "title": "currency pipe",
              "url": "currency-pipe"
            },
            {
              "id": "faa1feb4-6706-f50c-07c7-84f09fbebbfa",
              "entries": [
                {
                  "id": "8bc97377-c211-4022-940f-7bc0db9c4979",
                  "type": "text",
                  "text": "Transforms a number to a percentage string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations."
                },
                {
                  "id": "c17499db-1331-453a-006e-d87d85f57102",
                  "type": "demo",
                  "source": "```html\n<p>A: {{a | percent}}</p>\n<p>B: {{b | percent:'4.3-5'}}</p>\n```\n\n```typescript\nexport class AppComponent {\n  a = 0.259;\n  b = 1.3495;\n}\n```",
                  "demo": "V6TemplatesPercentpipeDemoComponent"
                },
                {
                  "id": "5f8a29a7-d78b-50e9-3138-131176b4aeb3",
                  "type": "text",
                  "text": "## Parameters\n"
                },
                {
                  "id": "3e7ffdd8-218d-5d1e-120e-d3cc3a2b5740",
                  "type": "text",
                  "text": "```\n{{ value_expression | percent [ : digitsInfo [ : locale ] ] }}\n```"
                },
                {
                  "id": "018364cd-bf13-feb7-9ec2-5c9aff2f1914",
                  "type": "interface-option",
                  "head": "digitsInfo",
                  "description": "Decimal representation options.",
                  "name": "digitsInfo",
                  "headId": "digitsInfo",
                  "interface": "digitsInfo?: string",
                  "showAdditional": true,
                  "additional": "Specified by a string in the following format:\n\n```\n{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\n```\n\n  - `minIntegerDigits`: The minimum number of integer digits before the decimal point. Default is `1`.\n  - `minFractionDigits`: The minimum number of digits after the decimal point. Default is `0`.\n  - `maxFractionDigits`: The maximum number of digits after the decimal point. Default is `3`."
                },
                {
                  "id": "6e8e4baf-c78e-6372-7985-c75fd139b5f1",
                  "type": "interface-option",
                  "head": "locale",
                  "description": "A locale code for the locale format rules to use.",
                  "name": "locale",
                  "headId": "locale",
                  "interface": "locale?: string",
                  "showAdditional": true,
                  "additional": "When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default. See [Setting your app locale](https://angular.io/guide/i18n#setting-up-the-locale-of-your-app)."
                }
              ],
              "title": "percent pipe",
              "url": "percent-pipe"
            },
            {
              "id": "b7165bcf-251f-3435-c1dd-c1666812b26d",
              "entries": [
                {
                  "id": "52c23c9e-ece9-ddba-3139-d99ebfde7f54",
                  "type": "text",
                  "text": "Maps a value to a string that pluralizes the value according to locale rules.\n\nSee [CLDR — Plural Rules](http://cldr.unicode.org/index/cldr-spec/plural-rules).\n"
                },
                {
                  "id": "8ef2d41a-bed0-38ac-7a80-8d3b53d4e9e2",
                  "type": "demo",
                  "source": "```html\n<input [(ngModel)]=\"value\">\n{{ value | i18nPlural: mapping }}\n```\n\n```typescript\nexport class AppComponent {\n  value = 1;\n\n  mapping: {[k: string]: string} = {\n    '=0': 'No messages.',\n    '=1': 'One message.',\n    'other': '# messages.',\n  };\n}\n```",
                  "demo": "V6TemplatesPluralpipeDemoComponent"
                }
              ],
              "title": "i18nPlural pipe",
              "url": "plural-pipe"
            },
            {
              "id": "cb41b558-e878-7876-77ea-8ab2ef27a089",
              "entries": [
                {
                  "id": "7f8e813a-c4d9-70f7-5f88-ac2bbf7b1729",
                  "type": "text",
                  "text": "The json pipe is particularly helpful for debugging bindings:"
                },
                {
                  "id": "8b6b380a-b93b-7d52-d111-4c2eda1a8294",
                  "type": "demo",
                  "source": "```html\n<div>{{data | json}}</div>\n```\n\n```typescript\nexport class AppComponent {\n  data = {\n    field: 'value',\n    obj: {\n      innerField: '123',\n    },\n  };\n}\n```",
                  "demo": "V6TemplatesJsonpipeDemoComponent"
                }
              ],
              "title": "json pipe",
              "url": "json-pipe"
            },
            {
              "id": "38b2b883-8c43-59d5-be35-0c8febe10672",
              "entries": [
                {
                  "id": "11d30f25-364e-33d3-0831-128a1c401433",
                  "type": "text",
                  "text": "The Angular safe navigation operator (`?.`) is a fluent and convenient way to guard against `null` and `undefined` values in property paths. \n\nHere it is, protecting against a view render failure if the `currentHero` is null:\n\n```html\nThe current hero's name is {{currentHero?.name}}\n```\n\nIt works perfectly with long property paths:\n\n```html\nThe current hero's name is {{currentHero?.info?.name}}\n```\n\nAnd methods:\n\n```html\nThe current hero's name is {{currentHero?.getInfo()?.name}}\n```\n"
                },
                {
                  "id": "63f61603-1fba-4772-6313-7a132e14532d",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular — The safe navigation operator ( ?. ) and null property paths",
                      "url": "https://angular.io/guide/template-syntax#the-safe-navigation-operator----and-null-property-paths",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Safe navigation operator .?",
              "url": "safe-navigation-operator"
            },
            {
              "id": "e933e885-ed2e-0c4c-3bf9-b110622035e9",
              "entries": [
                {
                  "id": "dd528cd1-3d8b-0ce5-744c-a802c7072091",
                  "type": "text",
                  "text": "As of Typescript 2.0, you can enforce strict null checking with the `--strictNullChecks` flag.\n\nType checker throws an error if it can't determine whether a variable will be `null` or `undefined` at runtime. You may know that can't happen but the type checker doesn't know. You tell the type checker that it can't happen by applying the post-fix non-null assertion operator (`!`).\n\nFor example, after you use `*ngIf` to check that hero is defined, you can assert that hero properties are also defined:\n\n```html\n<div *ngIf=\"hero\">\n  The hero's name is {{hero!.name}}\n</div>\n```\n\nUnlike the [safe navigation operator](../safe-navigation-operator), the non-null assertion operator does not guard against `null` or `undefined`.\n"
                }
              ],
              "title": "Non-null assertion operator !.",
              "url": "non-null-assertion-operator"
            },
            {
              "id": "8ff6b47e-ed09-d58b-30ea-220039c4a3b9",
              "entries": [
                {
                  "id": "f4550b46-a58e-e981-9568-534f6656856c",
                  "type": "text",
                  "text": "You can build a simple animation that transitions an element between two states driven by a model attribute.\n\nAnimations can be defined inside `@Component` metadata.\n\nThen using the `[@triggerName]` syntax, attach the animation that you just defined to one or more elements in the component's template."
                },
                {
                  "id": "8f7cef40-8add-4fb5-278c-5c2d02b6f7fb",
                  "type": "demo",
                  "source": "```html\nClick to change active state:\n<ul>\n  <li *ngFor=\"let hero of heroes\"\n      [@heroState]=\"hero.active ? 'active' : 'inactive'\"\n      (click)=\"hero.active = !hero.active\">\n    {{hero.name}}\n  </li>\n</ul>\n```\n\n```typescript\n@Component({\n  ...\n  animations: [\n    trigger('heroState', [\n      state('inactive', style({\n        backgroundColor: '#eee',\n        transform: 'scale(1)',\n      })),\n      state('active', style({\n        backgroundColor: '#cfd8dc',\n        transform: 'scale(1.1)',\n      })),\n      transition('inactive => active', animate('100ms ease-in')),\n      transition('active => inactive', animate('100ms ease-out')),\n    ]),\n  ],\n})\nexport class AppComponent {\n  heroes = [\n    {\n      name: 'Superman',\n      active: true,\n    },\n    {\n      name: 'Batman',\n      active: true,\n    },\n    {\n      name: 'Aquaman',\n      active: false,\n    },\n  ];\n}\n```",
                  "demo": "V6TemplatesAnimationDemoComponent"
                },
                {
                  "id": "f9b41f2f-3223-4baa-1d45-5a5568998742",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular — Animations",
                      "url": "https://angular.io/guide/animations",
                      "lang": "en"
                    },
                    {
                      "label": "Introduction to Animations in Angular",
                      "lang": "en",
                      "url": "https://alligator.io/angular/animation-angular/"
                    },
                    {
                      "label": "A New Wave of Animation Features in Angular",
                      "url": "https://www.yearofmoo.com/2017/06/new-wave-of-animation-features.html",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Animation binding @",
              "url": "animation-binding"
            },
            {
              "id": "d4605f78-d154-545c-399a-ddba5a692e89",
              "entries": [
                {
                  "id": "096631a9-1a6f-6810-1e46-09b5747d4cd9",
                  "type": "text",
                  "text": "An SVG snippet template needs an `svg:` prefix on its root element to disambiguate the SVG element from an HTML component.\n\n```html\n<svg:rect x=\"0\" y=\"0\" width=\"100\" height=\"100\"/>\n```\n\nAn `<svg>` root element is detected as an SVG element automatically, without the prefix.\n\n```html\n<svg>\n  <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\"/>\n</svg>\n```\n"
                },
                {
                  "id": "7b9621a7-b645-f4bc-2c02-fb19db7b2f9e",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "SVG and Canvas Graphics in Angular 2",
                      "url": "https://teropa.info/blog/2016/12/12/graphics-in-angular-2.html",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "svg: prefix",
              "url": "svg-prefix"
            },
            {
              "id": "777bab38-457d-9543-6bdd-f10ec318691e",
              "entries": [
                {
                  "id": "82070c87-a398-6f37-b1c3-dd524324eda6",
                  "type": "text",
                  "text": "The `ngNonBindable` tells Angular not to compile or bind the contents of the current DOM element.\n"
                },
                {
                  "id": "8e1af19a-1d17-eff3-7834-e3ea6daeb0fb",
                  "type": "demo",
                  "source": "```html\n<div>{{ 1 + 1 }}</div>\n<div ngNonBindable>{{ 1 + 1 }}</div>\n```",
                  "demo": "V6TemplatesNgnonbindableDemoComponent"
                }
              ],
              "title": "ngNonBindable",
              "url": "ngnonbindable"
            },
            {
              "id": "2eaac733-9385-ae44-4ea1-62ce4adfb374",
              "entries": [
                {
                  "id": "9dd113ac-2d35-c060-68aa-f1bbb810de62",
                  "type": "text",
                  "text": "Sometimes a binding expression will be reported as a type error and it is not possible or difficult to fully specify the type. To silence the error, you can use the `$any` cast function to cast the expression to the `any` type.\n\n```html\n<!-- Accessing an undeclared member -->\n<div>\n  The hero's marker is {{$any(hero).marker}}\n</div>\n```\n\nThe $any cast function can be used in conjunction with this to allow access to undeclared members of the component.\n\n```html\n<!-- Accessing an undeclared member -->\n<div>\n  Undeclared members is {{$any(this).member}}\n</div>\n```"
                }
              ],
              "title": "$any() type cast",
              "url": "any-type-cast"
            }
          ],
          "title": "Templates",
          "color": "rgb(255, 154, 3)",
          "url": "templates",
          "disabled": false,
          "langs": {
            "en": true
          }
        },
        {
          "id": "cf9867c0-c7ba-5d8b-92db-838948f086f5",
          "menu": {
            "items": [
              {
                "id": "deb9db16-6c49-edec-34c5-80b198db5e66",
                "label": "Introduction",
                "url": "intro"
              },
              {
                "id": "0fa51f09-ea81-cc6f-4e26-5d300151d616",
                "label": "CSS Declaration",
                "sub": {
                  "items": [
                    {
                      "id": "3c9e1942-bedc-b816-a524-f4685edb8ad2",
                      "label": "Global styles",
                      "sub": {
                        "items": []
                      },
                      "url": "global-styles"
                    },
                    {
                      "id": "3fc8573a-9f30-bd8c-af5f-24d29305f097",
                      "label": "Component inline",
                      "url": "component-inline-styles"
                    },
                    {
                      "id": "3e74285b-3877-6fd3-4819-4e5c66ba7bf9",
                      "label": "Component external",
                      "url": "component-external-styles"
                    },
                    {
                      "id": "0e69d19f-7519-cf91-62f1-59857ded3bef",
                      "label": "Template inline",
                      "url": "template-inline-styles"
                    },
                    {
                      "id": "788ed60a-31a9-6362-3009-d937b7976e21",
                      "label": "Encapsulation",
                      "url": "encapsulation"
                    }
                  ]
                },
                "asGroup": true
              },
              {
                "id": "77fb504e-3988-b87d-4c0a-4f406cfeb3c4",
                "label": "Special selectors",
                "sub": {
                  "items": [
                    {
                      "id": "c8328c3f-0ea6-d6ee-ccb0-7ce2c2bca5ee",
                      "label": ":host",
                      "url": "host-selector"
                    },
                    {
                      "id": "69094674-dac0-b395-1b74-b4ac86bd2881",
                      "label": ":host-context",
                      "url": "host-context-selector"
                    },
                    {
                      "id": "fe580ab1-5a15-ca95-51e6-66b387377d4d",
                      "label": "::ng-deep",
                      "url": "ng-deep-selector"
                    }
                  ]
                },
                "asGroup": true
              },
              {
                "id": "c66380a3-444b-a048-2add-8cbcf9819cd2",
                "label": "Binding",
                "sub": {
                  "items": [
                    {
                      "id": "e727a9db-4859-82ca-6ddd-e7236d30ae71",
                      "label": "[style.] and @HostBinding",
                      "url": "style-and-host-binding"
                    },
                    {
                      "id": "91f81889-2100-6020-8031-ab4970ff6b21",
                      "label": "ngStyle directive",
                      "url": "ngstyle-directive"
                    },
                    {
                      "id": "c7dd14dd-beec-9e51-7c82-75063787c8e6",
                      "label": "ElementRef & Renderer2",
                      "url": "styling-with-elementref-and-renderer2"
                    },
                    {
                      "id": "b781a2b3-125e-1ac6-e8c7-04450390e594",
                      "label": "DomSanitizer",
                      "url": "domsanitizer-for-styling"
                    }
                  ]
                },
                "asGroup": true
              }
            ]
          },
          "pages": [
            {
              "id": "049153f6-a519-14a2-28b5-f03b2dc3fd67",
              "entries": [
                {
                  "id": "7798374e-9faa-85f8-014b-3217764e257e",
                  "type": "text",
                  "text": "This simple Angular reference for developers describes styling and view encapsulation."
                },
                {
                  "id": "0ae8f8a0-0a9b-a600-e9f9-c81873387f9c",
                  "type": "text",
                  "text": "## Additional information\n\nExample of hints and tutorials links. You can switch off these panels in the sidebar."
                },
                {
                  "id": "0af67b6d-2a1c-e627-65d1-d3d2cc57b288",
                  "type": "hint",
                  "text": "Hint with additional explanation. "
                },
                {
                  "id": "261ab65e-be68-3eb1-19dc-e9916a535b02",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular — Component Styles",
                      "url": "https://angular.io/guide/component-styles",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Introduction",
              "url": "intro"
            },
            {
              "id": "61b16a97-b979-97cf-87f1-df30f51f8fec",
              "entries": [
                {
                  "id": "085f0f8d-f952-8f9d-ecad-6f8d346d1bbc",
                  "type": "text",
                  "text": "When building with the CLI, you must configure the `angular.json` to include all external assets, including external style files.\n\nRegister global style files in the `styles` section which, by default, is pre-configured with the global `styles.css` file.\n\nYou can add more global styles via the `styles` option inside your project's build target options in `angular.json`. These will be loaded exactly as if you had added them in a `<link>` tag inside `index.html`.\n\n```\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser\",\n    \"options\": {\n      \"styles\": [\n        \"src/styles.css\",\n        \"src/more-styles.css\",\n      ],\n      ...\n```\n\nYou can also rename the output and lazy load it by using the object format:\n\n```\n\"styles\": [\n  \"src/styles.css\",\n  \"src/more-styles.css\",\n  { \"input\": \"src/lazy-style.scss\", \"lazy\": true },\n  { \"input\": \"src/pre-rename-style.scss\", \"bundleName\": \"renamed-style\" },\n],\n```"
                }
              ],
              "title": "Global styles",
              "url": "global-styles"
            },
            {
              "id": "978a0315-a141-7ba2-e249-150fe4d36b27",
              "entries": [
                {
                  "id": "3fdf6aa0-5f50-f06a-beaf-f9220ce655f1",
                  "type": "text",
                  "text": "You can add a `styles` array property to the `@Component` decorator.\n\nEach string in the array defines some CSS for this component.\n\n```typescript\n@Component({\n  selector: 'app-demo',\n  template: `\n    <p>Demo component</p>\n  `,\n  styles: ['p { font-weight: bold; }']\n})\nexport class DemoComponent {\n/* . . . */\n}\n```"
                }
              ],
              "title": "Component inline styles",
              "url": "component-inline-styles"
            },
            {
              "id": "84d3049b-2f62-5f7e-fe11-fec8e4a01d3e",
              "entries": [
                {
                  "id": "d9d22e21-fecd-dafb-4a00-f943d634316c",
                  "type": "text",
                  "text": "You can load styles from external CSS files by adding a `styleUrls` property to a component's `@Component` decorator:\n"
                },
                {
                  "id": "bc70f075-985a-12e5-3cfe-c52268abe7df",
                  "type": "text",
                  "text": "```typescript\n@Component({\n  selector: 'app-demo',\n  template: `\n    Demo component.\n  `,\n  styleUrls: ['./demo.component.css'],\n})\nexport class DemoComponent {\n  ...\n}\n```"
                },
                {
                  "id": "e6e31d88-173b-395e-a217-55e4b8a80f4d",
                  "type": "text",
                  "text": "Also you can include several style files:"
                },
                {
                  "id": "1dc6e066-0beb-7168-3790-0d913c9849f0",
                  "type": "text",
                  "text": "```typescript\n@Component({\n  selector: 'app-demo',\n  template: `\n    Demo component.\n  `,\n  styleUrls: [\n    '../styles/layout.css',\n    './demo.component.css',\n  ],\n})\nexport class DemoComponent {\n  ...\n}\n```"
                }
              ],
              "title": "Component external styles",
              "url": "component-external-styles"
            },
            {
              "id": "7ed145bf-de2c-0b6b-1d6a-de1a206086d1",
              "entries": [
                {
                  "id": "9471681e-7440-56de-8121-d6dedf35cd1c",
                  "type": "text",
                  "text": "You can embed CSS styles directly into the HTML template by putting them inside `<style>` tags.\n\n```typescript\n@Component({\n  selector: 'app-hero-controls',\n  template: `\n    <style>\n      button {\n        background-color: white;\n        border: 1px solid #777;\n      }\n    </style>\n    <h3>Controls</h3>\n    <button (click)=\"activate()\">Activate</button>\n  `\n})\n```\n\nYou can also write <link> tags into the component's HTML template.\n\n```typescript\n@Component({\n  selector: 'app-hero-team',\n  template: `\n    <!-- We must use a relative URL so that the AOT compiler can find the stylesheet -->\n    <link rel=\"stylesheet\" href=\"../assets/hero-team.component.css\">\n    <h3>Team</h3>\n    <ul>\n      <li *ngFor=\"let member of hero.team\">\n        {{member}}\n      </li>\n    </ul>`\n})\n```"
                }
              ],
              "title": "Template inline styles",
              "url": "template-inline-styles"
            },
            {
              "id": "939ecdfc-ad5c-37ba-274e-c87c55fa5c12",
              "entries": [
                {
                  "id": "720876f7-d0f9-fb9f-350d-5ca3094f1991",
                  "type": "text",
                  "text": "Component CSS styles are encapsulated into the component's view and don't affect the rest of the application.\n\nTo control how this encapsulation happens on a per component basis, you can set the view encapsulation mode in the component metadata.\n\n```\n@Component({\n  ...\n  encapsulation: ViewEncapsulation.Native\n})\n```\n\n\n### Emulated (default)\n\n`Emulated` view encapsulation (the default) emulates the behavior of shadow DOM by preprocessing (and renaming) the CSS code to effectively scope the CSS to the component's view. For details, see [Appendix 1](https://angular.io/guide/component-styles#inspect-generated-css).\n\n\n### ShadowDom\n\n`ShadowDom` view encapsulation uses the browser's native shadow DOM implementation (see [Shadow DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)) to attach a shadow DOM to the component's host element, and then puts the component view inside that shadow DOM. The component's styles are included within the shadow DOM.\n\n\n### Native\n\n`Native` view encapsulation uses a now deprecated version of the browser's native shadow DOM implementation - [learn about the changes](https://hayato.io/2016/shadowdomv1/).\n\n\n### None\n\n`None` means that Angular does no view encapsulation. Angular adds the CSS to the global styles. The scoping rules, isolations, and protections discussed earlier don't apply. This is essentially the same as pasting the component's styles into the HTML."
                },
                {
                  "id": "51762e40-820f-f9bb-dbc4-90aad17fce8b",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "View Encapsulation in Angular by thoughtram",
                      "url": "https://blog.thoughtram.io/angular/2015/06/29/shadow-dom-strategies-in-angular2.html",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Styles encapsulation",
              "url": "encapsulation"
            },
            {
              "id": "4bdd882a-8502-529f-3d3f-979ec93531f2",
              "entries": [
                {
                  "id": "5e189f56-292a-e6bb-b3ae-67c770ae918e",
                  "type": "text",
                  "text": "Use the `:host` pseudo-class selector to target styles in the element that hosts the component (as opposed to targeting elements inside the component's template).\n"
                },
                {
                  "id": "6f7c1056-a990-851d-cf2c-0c754d80327d",
                  "type": "demo",
                  "source": "##### demo.component.html\n\n```html\nDemo component!\n```\n\n##### demo.component.css\n\n```css\n:host {\n  display: block;\n  border: 1px solid black;\n}\n```",
                  "demo": "V6StylingHost1DemoComponent"
                },
                {
                  "id": "77af9e64-d51a-f5c4-f1e4-fa24f9c51f26",
                  "type": "text",
                  "text": "The `:host` selector is the only way to target the host element. You can't reach the host element from inside the component with other selectors because it's not part of the component's own template. The host element is in a parent component's template.\n\nUse the function form to apply host styles conditionally by including another selector inside parentheses after `:host`.\n\nThe next example targets the host element again, but only when it also has the `active` CSS class."
                },
                {
                  "id": "b55ca845-91ae-29cf-a691-9ff9c7e6099a",
                  "type": "demo",
                  "source": "##### app.component.html\n\n```html\n<app-demo></app-demo>\n<app-demo class=\"active\"></app-demo>\n```\n\n##### demo.component.html\n\n```html\nDemo component!\n```\n\n##### demo.component.css\n\n```css\n:host {\n  display: block;\n  border: 1px solid black;\n}\n\n:host(.active) {\n  border-width: 3px;\n}\n```",
                  "demo": "V6StylingHost2DemoComponent"
                }
              ],
              "title": ":host selector",
              "url": "host-selector"
            },
            {
              "id": "176464de-d77d-6506-2c2d-5ef01cc54dd7",
              "entries": [
                {
                  "id": "1be8e0ee-d3ba-7206-f54d-8cf94fd12b72",
                  "type": "text",
                  "text": "Sometimes it's useful to apply styles based on some condition outside of a component's view. For example, a CSS theme class could be applied to the document `<body>` element, and you want to change how your component looks based on that.\n\nUse the `:host-context()` pseudo-class selector, which works just like the function form of `:host()`. The `:host-context()` selector looks for a CSS class in any ancestor of the component host element, up to the document root. The `:host-context()` selector is useful when combined with another selector.\n\nThe following example applies a `background-color` style to all `.demo` elements inside the component, only if some ancestor element has the CSS class `theme-light`."
                },
                {
                  "id": "7b5bceee-9100-67d6-c0a6-ec124040531f",
                  "type": "demo",
                  "source": "##### demo.component.css\n\n```css\n.demo {\n  border: 1px solid #666;\n}\n\n:host-context(.theme-light) .demo {\n  background-color: #eef;\n}\n```\n\n##### demo.component.html\n\n```html\n<div class=\"demo\">Demo block</demo>\n```\n\n##### index.html\n\n```html\n<!doctype html>\n...\n<body class=\"theme-light\">\n  <app-root></app-root>\n</body>\n</html>\n```",
                  "demo": "V6StylingHostcontextDemoComponent"
                }
              ],
              "title": ":host-context selector",
              "url": "host-context-selector"
            },
            {
              "id": "a3426c82-064c-d1c7-db29-b75d9397feaa",
              "entries": [
                {
                  "id": "466d1adb-0a2b-2439-ba7b-7bbea8c61e39",
                  "type": "text",
                  "text": "Component styles normally apply only to the HTML in the component's own template.\n\nUse the `::ng-deep` shadow-piercing descendant combinator to force a style down through the child component tree into all the child component views. The `::ng-deep` combinator works to any depth of nested components, and it applies to both the view children and content children of the component.\n\nThe following example targets all `<h3>` elements, from the host element down through this component to all of its child elements in the DOM."
                },
                {
                  "id": "3f06cc8d-a496-0626-feed-0ffaa2a22f5f",
                  "type": "demo",
                  "source": "##### parent.component.html\n\n```html\nParent content.\n\n<app-child></app-child>\n```\n\n##### parent.component.css\n\n```css\n::ng-deep h3 {\n  font-style: italic;\n}\n```\n\n##### child.component.html\n\n```html\n<h3>Child title</h3>\nChild content.\n```\n",
                  "demo": "V6StylingNgdeepDemoComponent"
                },
                {
                  "id": "351b167d-7bd9-093b-fbf0-8658671bb505",
                  "type": "text",
                  "text": "The `::ng-deep` combinator also has the aliases `>>>`, and `/deep/`."
                },
                {
                  "id": "f99f583f-9a13-05fb-36e9-fcf06b853c58",
                  "type": "text",
                  "text": "Use `/deep/`, `>>>` and `::ng-deep` only with `emulated` view encapsulation. Emulated is the default and most commonly used view encapsulation. For more information, see the [view encapsulation section](../encapsulation)."
                },
                {
                  "id": "6a0da9e3-07d5-9ea6-4811-124ea31f291e",
                  "type": "text",
                  "text": "The shadow-piercing descendant combinator is deprecated and support is being removed from major browsers and tools. As such we plan to drop support in Angular (for all 3 of `/deep/`, `>>>` and `::ng-deep`). Until then `::ng-deep` should be preferred for a broader compatibility with the tools."
                },
                {
                  "id": "79490e9f-3976-87e1-b9d6-7b78547eb4f4",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "The New Angular ::ng-deep and the Shadow-Piercing Combinators Drop",
                      "url": "https://hackernoon.com/the-new-angular-ng-deep-and-the-shadow-piercing-combinators-deep-and-drop-4b088dbe459",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "::ng-deep selector",
              "url": "ng-deep-selector"
            },
            {
              "id": "8962cb3f-d65f-8772-c705-173c23b46925",
              "entries": [
                {
                  "id": "3a25f586-cce0-0e53-0026-b5a2b515fd7b",
                  "type": "text",
                  "text": "You can set inline styles with a style binding."
                },
                {
                  "id": "1297ae92-52ac-df3d-bc61-80f12d80228c",
                  "type": "text",
                  "text": "Style binding syntax resembles property binding. Instead of an element property between brackets, start with the prefix `style`, followed by a dot (`.`) and the name of a CSS style property: `[style.style-property]`.\n"
                },
                {
                  "id": "f7a7129d-9ce0-d7e6-20ae-00121110c84c",
                  "type": "demo",
                  "source": "```html\n<button [style.color]=\"isSpecial ? 'red': 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan': 'grey'\" >Save</button>\n```\n\n```typescript\nexport class AppComponent {\n  isSpecial = true;\n  canSave = false;\n}\n```",
                  "demo": "V6TemplateStyle1DemoComponent"
                },
                {
                  "id": "9ccd5eaa-67f0-31a8-cf32-aad1ee7bd8b2",
                  "type": "text",
                  "text": "Some style binding styles have a unit extension. The following example conditionally sets the font size in “em” and “%” units ."
                },
                {
                  "id": "f36f8918-db84-8a27-69e2-df9e943ae116",
                  "type": "demo",
                  "source": "```html\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\" >Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\" >Small</button>\n```\n\n```typescript\nexport class AppComponent {\n  isSpecial = true;\n}\n```\n",
                  "demo": "V6TemplateStyle2DemoComponent"
                },
                {
                  "id": "70f62e91-2498-e071-766b-84f497264e7b",
                  "type": "text",
                  "text": "Note that a style property name can be written in either dash-case, as shown above, or camelCase, such as `fontSize`.\n\nWhile this is a fine way to set a single style, the [NgStyle directive](../ngstyle-directive) is generally preferred when setting several inline styles at the same time."
                },
                {
                  "id": "91a32f23-f6db-7a04-bb99-377605ecfdde",
                  "type": "text",
                  "text": "### @HostBinding"
                },
                {
                  "id": "7871eb3d-73c9-6e00-4d5b-0d8579c7a104",
                  "type": "text",
                  "text": "You can use `@HostBinding` decorator to set styles to the host element of a component.\n\n"
                },
                {
                  "id": "0bc7c043-0382-207d-4326-0e0e32ed425e",
                  "type": "demo",
                  "source": "```typescript\nexport class DemoComponent {\n  @HostBinding('style.background') backgroundColor = 'black';\n\n  @HostBinding('style.color') get textColor() {\n     return 'white';\n  }\n}\n```",
                  "demo": "V6StylingHostbindingDemoComponent"
                }
              ],
              "title": "[style.] and @HostBinding",
              "url": "style-and-host-binding"
            },
            {
              "id": "cd8ac50a-3f28-1c77-a50b-6f8f4b307107",
              "entries": [
                {
                  "id": "761d4f0c-c373-7dbe-ca58-217fc4d55a6f",
                  "type": "text",
                  "text": "Update an HTML element styles.\n\nThe styles are updated according to the value of the expression evaluation:\n  - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n  - values are the values assigned to those properties (expressed in the given unit)."
                },
                {
                  "id": "037dbfd5-205a-282d-395b-42caf18fd676",
                  "type": "demo",
                  "source": "```html\n<div [ngStyle]=\"{'font-size.px': 20, color: 'white', background: 'red'}\">\n  Text in this div is 20px size, white color on red background.\n</div>\n```",
                  "demo": "V6TemplatesNgstyleDemoComponent"
                }
              ],
              "title": "ngStyle directive",
              "url": "ngstyle-directive"
            },
            {
              "id": "5dd1700a-e6ce-e8bd-b838-62b5fedec172",
              "entries": [
                {
                  "id": "1631d471-b052-1781-1cbe-9cb7c4019446",
                  "type": "text",
                  "text": "If we want to access the DOM element directly to manipulate its styles. In order to do that we need to inject `ElementRef` and access to the `nativeElement` property. This will give us access to the DOM APIs."
                },
                {
                  "id": "ad1464da-2111-50eb-935d-aa15a0845920",
                  "type": "text",
                  "text": "```typescript\nexport class DemoComponent {\n  constructor(private element: ElementRef){\n    let el = this.element.nativeElement;\n    // Option 1\n    el.style.color = 'white';\n    el.style.background = 'red';\n    // Option 2\n    el.style.cssText = 'color: white; background: red;\";\n    // Option 3\n    el.setAttribute('style', 'color: white; background: red');\n  }\n}\n```"
                },
                {
                  "id": "c094d4dc-8dc4-f3c9-fbcc-b9f106d5e35e",
                  "type": "text",
                  "text": "### Renderer2"
                },
                {
                  "id": "21772caa-646c-9a0f-dd81-7cddf30f5e2d",
                  "type": "text",
                  "text": "The [`Renderer2`](../../core/renderer2) class is a service that provides an abstraction for UI rendering manipulations. Using it is the recommended approach because it then makes it easier to develop apps that can be rendered in different environments."
                },
                {
                  "id": "97c83f46-e4a6-f4ea-e37a-201b9f781fc8",
                  "type": "text",
                  "text": "```typescript\nexport class DemoComponent {\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n  ){\n    let el = this.element.nativeElement;\n    renderer.setElementStyle(el, 'color', 'white');\n    renderer.setElementStyle(el, 'background', 'red');\n  }\n}\n```\n"
                },
                {
                  "id": "880773f7-0205-4c8c-0497-d8354d36383e",
                  "type": "tutorials",
                  "links": [
                    {},
                    {
                      "label": "Angular: Stop manipulating DOM with ElementRef!",
                      "url": "https://medium.com/@kmathy/angular-manipulate-properly-the-dom-with-renderer-16a756508cba",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Styling with ElementRef and Renderer2",
              "url": "styling-with-elementref-and-renderer2"
            },
            {
              "id": "9ac2892a-8eb7-62ac-fb66-3a4a548aa42b",
              "entries": [
                {
                  "id": "bc57b161-5343-8642-cf5b-949be10fd928",
                  "type": "text",
                  "text": "To avoid cross-site scripting or XSS some styling expressions might be flagged as unsafe by Angular.\n\n```\nunsafe value used in a resource URL context.\n```\n\nIf you face this particular issue, you can flag the expression as safe by using the `bypassSecurityTrustStyle` API on the [`DomSanitizer`](../../core/dom-sanitizer)."
                },
                {
                  "id": "f481777a-6d81-b649-5d9f-c62bf7c69a27",
                  "type": "text",
                  "text": "##### demo.component.html\n\n```html\n<div *ngIf=\"image\" [style.background-image]=\"image\"></div>\n```\n\n##### demo.component.ts\n\n```typescript\nexport class DemoComponent {\n  constructor(private sanitizer: DomSanitizer){\n    this.image = this.sanitizer.bypassSecurityTrustStyle(`url(${someImgUrl})`);\n  }\n}\n```"
                },
                {
                  "id": "740e6158-5c1c-1202-c577-164a2a672aa5",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular 2 Security — The DomSanitizer Service",
                      "url": "https://netbasal.com/angular-2-security-the-domsanitizer-service-2202c83bd90",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "DomSanitizer for styling",
              "url": "domsanitizer-for-styling"
            }
          ],
          "title": "Styling",
          "color": "rgb(255, 154, 3)",
          "url": "styling",
          "disabled": false,
          "langs": {
            "en": true
          }
        },
        {
          "id": "1d7d1307-5627-adab-6544-bf9836cda217",
          "menu": {
            "items": [
              {
                "id": "69f00f4d-f7dd-a408-4ab9-4c7bdf62ba72",
                "label": "Introduction",
                "url": "intro"
              },
              {
                "id": "b686c771-b7ad-1283-3f4c-379467e3a132",
                "label": "Class Decorators",
                "asGroup": true,
                "sub": {
                  "items": [
                    {
                      "id": "6bbaa333-c06c-4cfc-f2a6-270654e4ada3",
                      "label": "@NgModule",
                      "url": "ng-module",
                      "subActiveOpt": true,
                      "sub": {
                        "items": [
                          {
                            "id": "f689c475-20f1-587b-c1e6-65c75ada2ea7",
                            "usePageEntries": true,
                            "usePageUrl": "ng-module"
                          }
                        ]
                      }
                    },
                    {
                      "id": "f0d382c3-80e3-2c75-548a-1280023043e6",
                      "label": "@Directive",
                      "url": "directive",
                      "sub": {
                        "items": [
                          {
                            "id": "a09ad2c2-1cc6-a856-24b5-0d7f10dd58b5",
                            "usePageEntries": true,
                            "usePageUrl": "directive"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "dbb3ba14-fabf-c6bd-7adc-4603fb463564",
                      "label": "@Component",
                      "url": "component",
                      "sub": {
                        "items": [
                          {
                            "id": "5856a40a-d2d6-d8bd-1df2-58eb67d6d519",
                            "usePageEntries": true,
                            "usePageUrl": "component"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "37d67109-2ed1-e2b5-9a6f-22ebb2520472",
                      "label": "@Pipe",
                      "url": "pipe"
                    },
                    {
                      "id": "20fe57e8-cbd5-e495-fd26-071fd8de2868",
                      "label": "@Injectable",
                      "url": "injectable"
                    }
                  ]
                },
                "url": "",
                "usePageEntries": false,
                "subActiveOpt": false
              },
              {
                "id": "5ff20bc0-ff0f-da4d-3126-88ed038a4f02",
                "label": "Binding Decorators",
                "sub": {
                  "items": [
                    {
                      "id": "6417bd9b-9424-f365-5385-5c77b7e8ba0e",
                      "label": "@Input",
                      "url": "input"
                    },
                    {
                      "id": "2e19fbdb-4a88-11a7-b2be-37782e0551ee",
                      "label": "@Output",
                      "url": "output"
                    },
                    {
                      "id": "5b1e2c2a-193e-d180-16fe-d6c3cd306b2a",
                      "label": "@HostBinding",
                      "url": "host-binding"
                    },
                    {
                      "id": "e9eb4ed1-61cd-5ba9-897e-fd61a36ccebd",
                      "label": "@HostListener",
                      "url": "host-listener"
                    },
                    {
                      "id": "e479067d-8c4e-70a5-acb6-39e581033639",
                      "label": "@Attribute",
                      "url": "attribute"
                    }
                  ]
                },
                "url": "",
                "asGroup": true
              },
              {
                "id": "e57f3808-bd7a-d62b-e269-2945c9b09254",
                "label": "Query Decorators",
                "sub": {
                  "items": [
                    {
                      "id": "4ce186b9-676b-f7c4-b6f4-ffed40f98e3f",
                      "label": "@ContentChildren",
                      "url": "content-children",
                      "urlFragment": ""
                    },
                    {
                      "id": "0c4daff0-8745-d18e-1d57-685d013492af",
                      "label": "@ContentChild",
                      "url": "content-child"
                    },
                    {
                      "id": "1f24b471-9764-0e2e-d300-ad0c66b6634e",
                      "label": "@ViewChildren",
                      "url": "view-children"
                    },
                    {
                      "id": "73d35ca0-ea8a-f60b-e464-b3a472bef35d",
                      "label": "@ViewChild",
                      "url": "view-child"
                    }
                  ]
                },
                "url": "",
                "asGroup": true
              },
              {
                "id": "2798e897-274a-8a5e-7e50-6689ae593e17",
                "label": "Lifecycle Hooks",
                "url": "lifecycle-hooks",
                "asGroup": true,
                "sub": {
                  "items": [
                    {
                      "id": "5069ab2d-add0-578a-eb7e-963dda244b67",
                      "label": "ngOnChanges()",
                      "url": "ng-on-changes"
                    },
                    {
                      "id": "e048539c-aea1-d493-899e-72efb0fd120e",
                      "label": "ngOnInit()",
                      "url": "ng-on-init"
                    },
                    {
                      "id": "1043c02d-81b9-0762-7fc0-b52ce68b1d11",
                      "label": "ngDoCheck()",
                      "url": "ng-do-check"
                    },
                    {
                      "id": "2e69ba6c-3d9e-9205-f673-8a3049f8eff3",
                      "label": "ngAfterContentInit()",
                      "url": "ng-after-content-init"
                    },
                    {
                      "id": "6a92b1e4-0323-ba21-161e-084bcb645344",
                      "label": "ngAfterContentChecked()",
                      "url": "ng-after-content-checked"
                    },
                    {
                      "id": "d0971bcb-29b3-e82c-a9f5-2c64527f01de",
                      "label": "ngAfterViewInit()",
                      "url": "ng-after-view-init"
                    },
                    {
                      "id": "5cd4440e-cfb2-9712-bfa2-29ba8ef03b43",
                      "label": "ngAfterViewChecked()",
                      "url": "ng-after-view-checked"
                    },
                    {
                      "id": "fa21ada9-f9e8-500e-2020-339f96e44ade",
                      "label": "ngOnDestroy()",
                      "url": "ng-on-destroy"
                    }
                  ]
                }
              },
              {
                "id": "b0f4fde8-7ebc-4986-6d02-45ad2eeb6927",
                "label": "Dependency Injection",
                "sub": {
                  "items": [
                    {
                      "id": "d6bd0ef6-66c3-6361-c104-136f6b1acaa4",
                      "label": "ChangeDetectorRef",
                      "url": "change-detector-ref",
                      "sub": {
                        "items": [
                          {
                            "id": "137afe83-11bf-4792-7fd4-4221f1cb158f",
                            "usePageEntries": true,
                            "usePageUrl": "change-detector-ref"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "b6e406e7-2741-4da5-ba10-820a1684df7e",
                      "label": "InjectionToken",
                      "url": "injection-token"
                    },
                    {
                      "id": "e38a3e42-eb9e-a53d-694c-9bcb6dc294e5",
                      "label": "forwardRef",
                      "url": "forward-ref"
                    },
                    {
                      "id": "cfc7adab-125e-ad58-bd1a-bbcbde9f68ae",
                      "label": "Providers",
                      "sub": {
                        "items": [
                          {
                            "id": "ec497484-1fe2-c01d-621e-9fbf485a2f68",
                            "usePageEntries": true,
                            "usePageUrl": "providers"
                          }
                        ]
                      },
                      "url": "providers",
                      "usePageEntries": false,
                      "subActiveOpt": true
                    },
                    {
                      "id": "beb37e81-0c20-2c86-d537-4305c4376bd5",
                      "label": "DI Decorators",
                      "sub": {
                        "items": [
                          {
                            "id": "8f8468eb-c688-27d0-7efc-d86a7d11bb52",
                            "label": "@Inject",
                            "url": "inject"
                          },
                          {
                            "id": "55ed4b14-b3c7-f948-13e9-ede98c9c20bb",
                            "label": "@Optional",
                            "url": "optional"
                          },
                          {
                            "id": "a6799a8e-0ba9-3a32-b1bb-84fea7513cb7",
                            "label": "@Self",
                            "url": "self"
                          },
                          {
                            "id": "7eeab96d-5b92-0468-1114-cfdd60a26e0a",
                            "label": "@SkipSelf",
                            "url": "skip-self"
                          },
                          {
                            "id": "41affb62-3a2e-d78c-41c0-b214d46eebb2",
                            "label": "@Host",
                            "url": "host"
                          }
                        ]
                      },
                      "url": "",
                      "asGroup": false
                    }
                  ]
                },
                "url": "dependency-injection",
                "asGroup": true
              },
              {
                "id": "77c0d874-262d-0b3e-82f3-0ef11d45ceb9",
                "label": "NgZone",
                "url": "ng-zone",
                "asGroup": false,
                "sub": {
                  "items": [
                    {
                      "id": "6e73bc6f-aebe-98b1-158d-c8eedf625325",
                      "usePageEntries": true,
                      "usePageUrl": "ng-zone"
                    }
                  ]
                },
                "subActiveOpt": true,
                "separatedFromTop": true
              },
              {
                "id": "ace0bfb1-6f47-922f-5f16-6d0312fa3906",
                "label": "Renderer2",
                "url": "renderer2",
                "sub": {
                  "items": [
                    {
                      "id": "985071dd-44cd-24c3-ac6d-67233510fb9f",
                      "usePageEntries": true,
                      "usePageUrl": "renderer2"
                    }
                  ]
                },
                "subActiveOpt": true
              },
              {
                "id": "0e630c23-5dce-b431-3ddd-4ec3bed3654e",
                "label": "DomSanitizer",
                "url": "dom-sanitizer",
                "sub": {
                  "items": [
                    {
                      "id": "8558f7f5-8c58-beb7-7e0e-0a6c7ac52d4e",
                      "usePageEntries": true,
                      "usePageUrl": "dom-sanitizer"
                    }
                  ]
                },
                "subActiveOpt": true
              }
            ]
          },
          "pages": [
            {
              "id": "51099a75-5bb4-1f83-6f42-a735b8518002",
              "entries": [
                {
                  "id": "063819d6-b465-e744-1397-c800ac6d8c22",
                  "type": "text",
                  "text": "This simple Angular reference for developers describes core concepts, decorators and services.\n\n\n## Additional information\n\nExample of hints and tutorials links. You can switch off these panels in the sidebar."
                },
                {
                  "id": "8af43abe-c886-aa78-0c31-295c78628e18",
                  "type": "hint",
                  "text": "Hint with additional explanation."
                },
                {
                  "id": "cfd0c662-be08-b613-f37a-d761d1444560",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Quick Start",
                      "url": "https://angular.io/guide/quickstart",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "54f2f684-1f4e-a058-6e62-322fb3b48179",
                  "type": "text",
                  "text": "## Early version\n\nCurrently ngrefs.com in active development. Thank you for understanding."
                }
              ],
              "title": "Introduction",
              "url": "intro"
            },
            {
              "id": "ccaf5030-c736-5e61-c835-e0f17f0a6dd8",
              "entries": [
                {
                  "id": "c15ec329-010f-643c-8d57-d5ffc7598a6e",
                  "type": "text",
                  "text": "`NgModule` configures the injector and the compiler and help organize related things together.\n\n"
                },
                {
                  "id": "c9ef151e-23f6-efd2-eb5d-cc514b755b43",
                  "type": "text",
                  "text": "#### Example\n\nThe CLI generates the following basic app module when creating a new app.\n\n```typescript\n@NgModule({\n  declarations: [\n    AppComponent,\n    ItemDirective\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```"
                },
                {
                  "id": "9628f991-b4c5-ca7b-c35f-a4d2f1e70f0a",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "781ac1ae-5d63-1dfc-3dc4-a67ee2f66e8c",
                  "type": "toc"
                },
                {
                  "id": "c7f2f310-b21d-7921-c19f-44ee29171237",
                  "type": "interface-option",
                  "head": "bootstrap",
                  "description": "The set of components that are bootstrapped when\nthis module is bootstrapped. The components listed here\nare automatically added to `entryComponents`.",
                  "name": "bootstrap",
                  "headId": "bootstrap",
                  "interface": "bootstrap?: Array<Type<any>|any[]>",
                  "showAdditional": false
                },
                {
                  "id": "edeeb718-336e-7723-c2bd-d54e00df6945",
                  "type": "interface-option",
                  "head": "declarations",
                  "description": "The set of components, directives, and pipes (declarables) that belong to this module.",
                  "additional": "The set of selectors that are available to a template include those declared here, and\nthose that are exported from imported NgModules.\n\n#### Example\n\nThe following example allows the CommonModule to use the `NgFor`\ndirective.\n\n```typescript\n@NgModule({\n  declarations: [NgFor]\n})\nclass CommonModule {\n}\n```",
                  "name": "declarations",
                  "headId": "declarations",
                  "interface": "declarations?: Array<Type<any>|any[]>",
                  "showAdditional": true
                },
                {
                  "id": "015410e5-500f-e098-2b3f-6ed45461f7a1",
                  "type": "interface-option",
                  "head": "entryComponents",
                  "description": "The set of components to compile when this `NgModule` is defined,\nso that they can be dynamically loaded into the view.",
                  "additional": "For each component listed here, Angular creates a `ComponentFactory`\nand stores it in the `ComponentFactoryResolver`.\n\nAngular automatically adds components in the module's bootstrap\nand route definitions into the `entryComponents` list. Use this\noption to add components that are bootstrapped\nusing one of the imperative techniques, such as `ViewContainerRef.createComponent()` or with `ngComponentOutlet` directive.",
                  "name": "entryComponents",
                  "headId": "entryComponents",
                  "interface": "entryComponents?: Array<Type<any>|any[]>",
                  "showAdditional": true
                },
                {
                  "id": "471fcd87-133b-198f-4d55-44b08a098054",
                  "type": "interface-option",
                  "head": "exports",
                  "description": "The set of components, directives, and pipes declared in this\nNgModule that can be used in the template of any component that is part of an\nNgModule that imports this NgModule. Exported declarations are the module's public API.",
                  "additional": "A declarable belongs to one and only one `NgModule`.\nA module can list another module among its exports, in which case all of that module's\npublic declaration are exported.\n\nDeclarations are private by default.\nIf this `ModuleA` does not export `UserComponent`, then only the components within this\n`ModuleA` can use `UserComponent`.\n\n`ModuleA` can import `ModuleB` and also export it, making exports from `ModuleB`\navailable to an `NgModule` that imports `ModuleA`.\n\n#### Example\n\nThe following example exports the `NgFor` directive from `CommonModule`.\n\n```javascript\n@NgModule({\n  exports: [NgFor]\n})\nclass CommonModule {\n}\n```",
                  "name": "exports",
                  "headId": "exports",
                  "interface": "exports?: Array<Type<any>|any[]>",
                  "showAdditional": true
                },
                {
                  "id": "362b2e59-856c-d76f-a690-3d4dd64ceefb",
                  "type": "interface-option",
                  "head": "id",
                  "description": "A name or path that uniquely identifies this `NgModule` in `getModuleFactory`.\nIf left `undefined`, the `NgModule` is not registered with `getModuleFactory`.",
                  "name": "id",
                  "headId": "id",
                  "interface": "id?: string",
                  "showAdditional": false
                },
                {
                  "id": "9976b0cc-11cb-40eb-774d-4c3510563ab1",
                  "type": "interface-option",
                  "head": "imports",
                  "description": "The set of NgModules whose exported declarables are available to templates in this module.",
                  "additional": "A template can use exported declarables from any\nimported module, including those from modules that are imported indirectly\nand re-exported.\nFor example, `ModuleA` imports `ModuleB`, and also exports\nit, which makes the declarables from `ModuleB` available\nwherever `ModuleA` is imported.\n\n#### Example\n\nThe following example allows MainModule to use anthing exported by\n`CommonModule`:\n\n```typescript\n@NgModule({\n  imports: [CommonModule]\n})\nclass MainModule {\n}\n```",
                  "name": "imports",
                  "headId": "imports",
                  "interface": "imports?: Array<Type<any>|ModuleWithProviders<{}>|any[]>",
                  "showAdditional": true
                },
                {
                  "id": "3c14087c-f5eb-ad69-235f-29afd47f28e9",
                  "type": "interface-option",
                  "head": "jit",
                  "description": "If `true`, this module will be skipped by the AOT compiler and so will always be compiled using JIT.",
                  "additional": "This exists to support future Ivy work and has no effect currently.",
                  "name": "jit",
                  "headId": "jit",
                  "interface": "jit?: true",
                  "showAdditional": true
                },
                {
                  "id": "b20a92e0-39d4-1f12-a3fb-79abf3146da1",
                  "type": "interface-option",
                  "head": "providers",
                  "description": "The set of injectable objects that are available in the injector of this module.",
                  "additional": "Dependencies whose providers are listed here become available for injection\ninto any component, directive, pipe or service that is a child of this injector.\nThe `NgModule` used for bootstrapping uses the root injector, and can provide dependencies\nto any part of the app.\n\n#### Example\n\nThe following example defines a class that is injected in\nthe `HelloWorld` `NgModule`:\n\n```typescript\nclass Greeter {\n   greet(name:string) {\n     return 'Hello ' + name + '!';\n   }\n}\n\n@NgModule({\n  providers: [\n    Greeter\n  ]\n})\nclass HelloWorld {\n  greeter:Greeter;\n\n  constructor(greeter:Greeter) {\n    this.greeter = greeter;\n  }\n}\n```",
                  "name": "providers",
                  "headId": "providers",
                  "interface": "providers?: Provider[]",
                  "showAdditional": true
                },
                {
                  "id": "5bc1b768-90bb-de1d-4854-60971a205e83",
                  "type": "interface-option",
                  "head": "schemas",
                  "description": "The set of schemas that declare elements to be allowed in the `NgModule`.\nElements and properties that are neither Angular components nor directives\nmust be declared in a schema.",
                  "additional": "Allowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.\n\nWhen using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA`\nyou must ensure that allowed elements and properties securely escape inputs.",
                  "name": "schemas",
                  "headId": "schemas",
                  "interface": "schemas?: Array<SchemaMetadata|any[]>",
                  "showAdditional": true
                }
              ],
              "title": "@NgModule",
              "url": "ng-module",
              "generationType": "interface-options",
              "generationFile": "core/src/metadata/ng_module.ts",
              "generationName": "NgModule",
              "generationStartLine": 50,
              "generationEndLine": 242
            },
            {
              "id": "d4f9ba36-36cf-8a0f-4682-5e852b1883e9",
              "entries": [
                {
                  "id": "163e8186-c1dd-abf7-5186-78a60f21db85",
                  "type": "text",
                  "text": "Marks a class as an Angular directive. You can define your own directives to attach custom behavior to elements in the DOM. The options provide configuration metadata that determines how the directive should be processed, instantiated and used at runtime."
                },
                {
                  "id": "a7d0976e-6fb2-a421-6164-5f981137df25",
                  "type": "text",
                  "text": "#### Example\n\nTo define a directive, mark the class with the decorator and provide metadata.\n\n```typescript\nimport {Directive} from '@angular/core';\n\n@Directive({\n  selector: 'my-directive',\n})\nexport class MyDirective {\n...\n}\n```"
                },
                {
                  "id": "7349f1c2-02cd-d6a4-60e0-7bbfeef0f1e7",
                  "type": "text",
                  "text": "#### Declaring directives\n\nDirectives are declarables. \n\nThey must be declared by an `NgModule` in order to be usable in an app. A directive must belong to exactly one `NgModule`.\n\n```typescript\ndeclarations: [\n AppComponent,\n MyDirective\n],\n```"
                },
                {
                  "id": "0323f128-2682-c264-7897-59efd074b265",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "651c2ca0-7fee-e25c-0a39-31e01d91d37c",
                  "type": "toc"
                },
                {
                  "id": "080aa22d-0d63-9b90-39bb-d64fac505229",
                  "type": "interface-option",
                  "head": "exportAs",
                  "description": "The name or names that can be used in the template to assign this directive to a variable. For multiple names, use a comma-separated string.",
                  "name": "exportAs",
                  "headId": "exportAs",
                  "interface": "exportAs?: string"
                },
                {
                  "id": "115b9a2c-37c0-9ab8-1dc8-f9812d5e5b70",
                  "type": "interface-option",
                  "head": "host",
                  "description": "Maps class properties to host element bindings for properties, attributes, and events, using a set of key-value pairs.",
                  "name": "host",
                  "headId": "host",
                  "interface": "host?: {[key: string]: string}",
                  "showAdditional": true,
                  "additional": "Angular automatically checks host property bindings during change detection.\nIf a binding changes, Angular updates the directive's host element.\n\nWhen the key is a property of the host element, the property value is\nthe propagated to the specified DOM property.\n\nWhen the key is a static attribute in the DOM, the attribute value\nis propagated to the specified property in the host element.\n\nFor event handling:\n- The key is the DOM event that the directive listens to.\nTo listen to global events, add the target to the event name.\nThe target can be `window`, `document` or `body`.\n- The value is the statement to execute when the event occurs. If the\nstatement evalueates to `false`, then `preventDefault` is applied on the DOM\nevent. A handler method can refer to the `$event` local variable."
                },
                {
                  "id": "f9dfac0d-b6d6-9714-fc87-5edfd540ca0c",
                  "type": "interface-option",
                  "head": "inputs",
                  "description": "Enumerates the set of data-bound input properties for a directive.",
                  "name": "inputs",
                  "headId": "inputs",
                  "interface": "inputs?: string[]",
                  "showAdditional": true,
                  "additional": "Angular automatically updates input properties during change detection.\nThe `inputs` property defines a set of `directiveProperty` to `bindingProperty`\nconfiguration:\n\n- `directiveProperty` specifies the component property where the value is written.\n- `bindingProperty` specifies the DOM property where the value is read from.\n\nWhen `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.\n@usageNotes\n\n#### Example\n\nThe following example creates a component with two data-bound properties.\n\n```typescript\n@Component({\n  selector: 'bank-account',\n  inputs: ['bankName', 'id: account-id'],\n  template: `\n    Bank Name: {{bankName}}\n    Account Id: {{id}}\n  `\n})\nclass BankAccount {\n  bankName: string;\n  id: string;\n\n```"
                },
                {
                  "id": "6def4d1f-da76-21bf-fc2f-ce9b1382e34c",
                  "type": "interface-option",
                  "head": "jit",
                  "description": "If true, this directive/component will be skipped by the AOT compiler and so will always be compiled using JIT.",
                  "name": "jit",
                  "headId": "jit",
                  "interface": "jit?: true",
                  "showAdditional": true,
                  "additional": "This exists to support future Ivy work and has no effect currently."
                },
                {
                  "id": "c93f90ab-ba58-a4eb-98ce-067d48b27fc6",
                  "type": "interface-option",
                  "head": "outputs",
                  "description": "The set of event-bound output properties.\nWhen an output property emits an event, an event handler attached\nto that event in the template is invoked.",
                  "name": "outputs",
                  "headId": "outputs",
                  "interface": "outputs?: string[]",
                  "showAdditional": true,
                  "additional": "Each output property maps a `directiveProperty` to a `bindingProperty`:\n- `directiveProperty` specifies the component property that emits events.\n- `bindingProperty` specifies the HTML attribute the event handler is attached to."
                },
                {
                  "id": "18963a17-06b2-58ed-8510-c46f3f851d1d",
                  "type": "interface-option",
                  "head": "providers",
                  "description": "Configures the injector of this directive or component with a token that maps to a provider of a dependency.",
                  "name": "providers",
                  "headId": "providers",
                  "interface": "providers?: Provider[]"
                },
                {
                  "id": "16e75109-a5aa-e27b-b108-0852ba75211a",
                  "type": "interface-option",
                  "head": "queries",
                  "description": "Configures the queries that will be injected into the directive.",
                  "name": "queries",
                  "headId": "queries",
                  "interface": "queries?: {[key: string]: any}",
                  "showAdditional": true,
                  "additional": "Content queries are set before the `ngAfterContentInit` callback is called.\nView queries are set before the `ngAfterViewInit` callback is called."
                },
                {
                  "id": "dae4e9cb-d1c6-4953-013b-71b35c1d5e53",
                  "type": "interface-option",
                  "head": "selector",
                  "description": "The CSS selector that identifies this directive in a template\nand triggers instantiation of the directive.",
                  "name": "selector",
                  "headId": "selector",
                  "interface": "selector?: string",
                  "showAdditional": true,
                  "additional": "Declare as one of the following:\n\n- `element-name`: Select by element name.\n- `.class`: Select by class name.\n- `[attribute]`: Select by attribute name.\n- `[attribute=value]`: Select by attribute name and value.\n- `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.\n- `selector1, selector2`: Select if either `selector1` or `selector2` matches.\n\nAngular only allows directives to apply on CSS selectors that do not cross\nelement boundaries.\n\nFor the following template HTML, a directive with an `input[type=text]` selector,\nwould be instantiated only on the `<input type=\"text\">` element.\n\n```html\n<form>\n  <input type=\"text\">\n  <input type=\"radio\">\n<form>\n```"
                }
              ],
              "title": "@Directive",
              "url": "directive",
              "generationType": "interface-options",
              "generationFile": "core/src/metadata/directives.ts",
              "generationName": "Directive",
              "generationStartLine": 85,
              "generationEndLine": 291
            },
            {
              "id": "f5bc0217-5164-3c62-bd92-96eb37e54095",
              "entries": [
                {
                  "id": "bdc4561c-3525-ef10-0a2f-33a01e725549",
                  "type": "text",
                  "text": "Components are the most basic UI building block of an Angular app.\n\nAngular components are a subset of directives, always associated with a template. Unlike other directives, only one component can be instantiated per an element in a template.\n\nA component must belong to an `NgModule` in order for it to be available to another component or application. To make it a member of an `NgModule`, list it in the `declarations` field of the `@NgModule` metadata.\n"
                },
                {
                  "id": "e8df2a71-8021-29d9-435f-4561faccee91",
                  "type": "text",
                  "text": "#### Example\n\n```typescript\nimport {Component} from '@angular/core';\n\n@Component({\n  selector: 'my-component',\n  template: `Hello there!`\n})\nexport class MyComponent {\n...\n}\n```"
                },
                {
                  "id": "2b18c05a-021c-7b35-4cc7-1e8287a3bf68",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "46fe9e1c-ce52-251d-55bf-05ba0f370330",
                  "type": "toc"
                },
                {
                  "id": "e6c57abf-be6f-df38-c374-ada8d32a7b18",
                  "type": "text",
                  "text": "### Inherited from Directive decorator\n\n* [selector](../directive#selector)\n* [inputs](../directive#inputs)\n* [outputs](../directive#outputs)\n* [providers](../directive#providers)\n* [exportAs](../directive#exportAs)\n* [queries](../directive#queries)\n* [jit](../directive#jit)\n* [host](../directive#host)"
                },
                {
                  "id": "8f484994-a9b8-d657-3991-48e96145c4fb",
                  "type": "interface-option",
                  "head": "animations",
                  "description": "One or more animation `trigger()` calls, containing `state()` and `transition()` definitions.",
                  "name": "animations",
                  "headId": "animations",
                  "interface": "animations?: any[]"
                },
                {
                  "id": "5a2e2f62-10f7-a115-bea3-f2909ef38100",
                  "type": "interface-option",
                  "head": "changeDetection",
                  "description": "The change-detection strategy to use for this component.",
                  "name": "changeDetection",
                  "headId": "changeDetection",
                  "interface": "changeDetection?: ChangeDetectionStrategy",
                  "showAdditional": true,
                  "additional": "When a component is instantiated, Angular creates a change detector,\nwhich is responsible for propagating the component's bindings.\nThe strategy is one of:\n- `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).\n- `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`."
                },
                {
                  "id": "0461ddba-ec08-2c79-236d-12bf76ef4c55",
                  "type": "interface-option",
                  "head": "encapsulation",
                  "description": "An encapsulation policy for the template and CSS styles. One of:\n- `ViewEncapsulation.Native`: Use shadow roots. This works\nonly if natively available on the platform.\n- `ViewEncapsulation.Emulated`: Use shimmed CSS that\nemulates the native behavior.\n- `ViewEncapsulation.None`: Use global CSS without any\nencapsulation.",
                  "name": "encapsulation",
                  "headId": "encapsulation",
                  "interface": "encapsulation?: ViewEncapsulation",
                  "showAdditional": true,
                  "additional": "If not supplied, the value is taken from `CompilerOptions`. The default compiler option is\n`ViewEncapsulation.Emulated`.\n\nIf the policy is set to `ViewEncapsulation.Emulated` and the component has no `styles`\nor `styleUrls` specified, the policy is automatically switched to `ViewEncapsulation.None`."
                },
                {
                  "id": "6e7020e1-df9e-e900-8e83-fd2b1804c864",
                  "type": "interface-option",
                  "head": "entryComponents",
                  "description": "A set of components that should be compiled along with this component. For each component listed here, Angular creates a `ComponentFactory` and stores it in the `ComponentFactoryResolver`.",
                  "name": "entryComponents",
                  "headId": "entryComponents",
                  "interface": "entryComponents?: Array<Type<any>|any[]>"
                },
                {
                  "id": "dcfb685a-88d5-be19-9be2-193d8b4df2d2",
                  "type": "interface-option",
                  "head": "interpolation",
                  "description": "Overrides the default encapsulation start and end delimiters (`{{` and `}}`)",
                  "name": "interpolation",
                  "headId": "interpolation",
                  "interface": "interpolation?: [string, string]"
                },
                {
                  "id": "cf187f7c-0925-1e5f-080d-efd340af590b",
                  "type": "interface-option",
                  "head": "moduleId",
                  "description": "The module ID of the module that contains the component.\nThe component must be able to resolve relative URLs for templates and styles.\nSystemJS exposes the `__moduleName` variable within each module.\nIn CommonJS, this can  be set to `module.id`.",
                  "name": "moduleId",
                  "headId": "moduleId",
                  "interface": "moduleId?: string"
                },
                {
                  "id": "bbb4e7e7-2a41-d75d-c0f7-b2d948645c42",
                  "type": "interface-option",
                  "head": "preserveWhitespaces",
                  "description": "True to preserve or false to remove potentially superfluous whitespace characters from the compiled template. Whitespace characters are those matching the `\\s` character class in JavaScript regular expressions. Default is false, unless overridden in compiler options.",
                  "name": "preserveWhitespaces",
                  "headId": "preserveWhitespaces",
                  "interface": "preserveWhitespaces?: boolean"
                },
                {
                  "id": "68383538-a266-499e-f57d-70dd8c77df11",
                  "type": "interface-option",
                  "head": "styleUrls",
                  "description": "One or more URLs for files containing CSS stylesheets to use in this component.",
                  "name": "styleUrls",
                  "headId": "styleUrls",
                  "interface": "styleUrls?: string[]"
                },
                {
                  "id": "37c84ce9-1f41-1302-86a6-4d95508f1d14",
                  "type": "interface-option",
                  "head": "styles",
                  "description": "One or more inline CSS stylesheets to use in this component.",
                  "name": "styles",
                  "headId": "styles",
                  "interface": "styles?: string[]"
                },
                {
                  "id": "3f3a16ab-2b6d-7a1d-d887-0632d01c09ca",
                  "type": "interface-option",
                  "head": "template",
                  "description": "An inline template for an Angular component. If provided, do not supply a template file using `templateUrl`.",
                  "name": "template",
                  "headId": "template",
                  "interface": "template?: string"
                },
                {
                  "id": "017e3c7c-8bd3-b8c0-7516-a04251ba773e",
                  "type": "interface-option",
                  "head": "templateUrl",
                  "description": "The URL of a template file for an Angular component. If provided, do not supply an inline template using `template`.",
                  "name": "templateUrl",
                  "headId": "templateUrl",
                  "interface": "templateUrl?: string"
                },
                {
                  "id": "4d988fea-6907-47e9-a636-b9f080b770fc",
                  "type": "interface-option",
                  "head": "viewProviders",
                  "description": "Defines the set of injectable objects that are visible to its view DOM children.",
                  "name": "viewProviders",
                  "headId": "viewProviders",
                  "interface": "viewProviders?: Provider[]"
                }
              ],
              "title": "@Component",
              "url": "component",
              "generationType": "interface-options",
              "generationFile": "core/src/metadata/directives.ts",
              "generationName": "Component",
              "generationStartLine": 457,
              "generationEndLine": 557
            },
            {
              "id": "f626ff88-c7f9-2188-e343-0a177fa34f4e",
              "entries": [
                {
                  "id": "828f8cf2-ebaf-e873-c2f9-1374a324e431",
                  "type": "text",
                  "text": "A pipe takes in data as input and transforms it to a desired output."
                },
                {
                  "id": "be515057-0344-e79c-7fd4-df2a177d50b0",
                  "type": "text",
                  "text": "#### Example\n\nHere's a custom pipe that doubles a value:\n\n```typescript\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({name: 'double'})\nexport class DoublePipe implements PipeTransform {\n  transform(value: number): number {\n    return value * 2;\n  }\n}\n```\n\nUsage:\n\n```html\n{{ value | double }} \n```"
                },
                {
                  "id": "e9b86f84-5908-050e-5bcb-59c6ca68a95b",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "598e8ac2-3510-1d1e-16af-7b31caa5e767",
                  "type": "interface-option",
                  "head": "name",
                  "description": "The pipe name to use in template bindings.",
                  "name": "name",
                  "headId": "name",
                  "interface": "name: string"
                },
                {
                  "id": "db9ac6ce-248f-03c9-ae0e-d6aa27c7fc05",
                  "type": "interface-option",
                  "head": "pure",
                  "description": "When true, the pipe is pure, meaning that the `transform()` method is invoked only when its input arguments change. Pipes are pure by default.",
                  "name": "pure",
                  "headId": "pure",
                  "interface": "pure?: boolean",
                  "showAdditional": true,
                  "additional": "If the pipe has internal state (that is, the result depends on state other than its arguments), set pure to false. In this case, the pipe is invoked on each change-detection cycle, even if the arguments have not changed."
                }
              ],
              "title": "@Pipe",
              "url": "pipe",
              "generationType": "interface-options",
              "generationFile": "core/src/metadata/directives.ts",
              "generationName": "Pipe",
              "generationStartLine": 609,
              "generationEndLine": 628
            },
            {
              "id": "0f7b7b16-a596-37ab-2c4e-aea6a01c4b45",
              "entries": [
                {
                  "id": "8757331f-2f7c-395d-b4ed-216fa2047c30",
                  "type": "text",
                  "text": "The `@Injectable` decorator identifies services and other classes that are intended to be injected. It can also be used to configure a provider for those services."
                },
                {
                  "id": "4795a5cd-70ea-1069-74c4-fda88b8273ee",
                  "type": "text",
                  "text": "#### Example\n\n```typescript\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class MyService {\n  constructor() { }\n}\n```\n"
                },
                {
                  "id": "be36f026-7385-d967-18e2-e04f7ad76baf",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "b36602b0-11bb-c285-6a2f-679f3590b674",
                  "type": "interface-option",
                  "head": "providedIn",
                  "description": "Tells Angular that the root injector is responsible for creating an instance of the service (by invoking its constructor) and making it available across the application.",
                  "name": "providedIn",
                  "headId": "providedIn",
                  "interface": "providedIn?: Type<any>|'root'|'platform'|'any'|null",
                  "showAdditional": true,
                  "additional": "Sometimes it's not desirable to have a service always be provided in the application root injector. Perhaps users should explicitly opt-in to using the service, or the service should be provided in a lazily-loaded context. In this case, the provider should be associated with a specific `@NgModule` class, and will be used by whichever injector includes that module."
                }
              ],
              "title": "@Injectable",
              "url": "injectable",
              "generationType": "interface-options",
              "generationFile": "core/src/di/injectable.ts",
              "generationName": "Injectable",
              "generationStartLine": 65,
              "generationEndLine": 78
            },
            {
              "id": "84169e02-37a1-9bd6-5960-a1303455d23a",
              "entries": [
                {
                  "id": "222c1064-c3ac-e412-0a6c-72d25f1be06a",
                  "type": "text",
                  "text": "An Input property is a settable property annotated with an `@Input` decorator. Values flow into the property when it is data bound with a property binding."
                },
                {
                  "id": "d5119ee3-5dde-724d-837f-505af054d3ae",
                  "type": "text",
                  "text": "#### Example\n\n```typescript\n@Input() test: any;\n```\n\nAlternatively, you can identify members in the inputs array of the directive metadata:\n\n```typescript\n@Component({\n  inputs: ['test'],\n})\n```"
                },
                {
                  "id": "c9c524b5-e83f-e54c-93a6-d09c2e76bcaf",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "95aa7a65-44c7-4573-b2b8-139429f3b764",
                  "type": "text",
                  "text": "```typescript\n@Input(propertyBindingName: string)\n```"
                },
                {
                  "id": "3114a9ac-ac4e-705f-ad14-b097571061a3",
                  "type": "interface-option",
                  "head": "bindingPropertyName",
                  "description": "You can supply an optional name to use in templates when the\ncomponent is instantiated, that maps to the\nname of the bound property. By default, the original\nname of the bound property is used for input binding.",
                  "name": "bindingPropertyName",
                  "headId": "bindingPropertyName",
                  "interface": "bindingPropertyName?: string",
                  "showAdditional": true,
                  "additional": "The following example creates a component with two input properties,\none of which is given a special binding name.\n\n```typescript\n@Component({\n  selector: 'bank-account',\n  template: `\n    Bank Name: {{bankName}}\n    Account Id: {{id}}\n  `\n})\nclass BankAccount {\n  // This property is bound using its original name.\n  @Input() bankName: string;\n  // this property value is bound to a different property name\n  // when this component is instantiated in a template.\n  @Input('account-id') id: string;\n\n  // this property is not bound, and is not automatically updated by Angular\n  normalizedBankName: string;\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    <bank-account bankName=\"RBC\" account-id=\"4747\"></bank-account>\n  `\n})\nclass App {}\n```"
                }
              ],
              "title": "@Input",
              "url": "input",
              "generationType": "interface-options",
              "generationFile": "core/src/metadata/directives.ts",
              "generationName": "Input",
              "generationStartLine": 697,
              "generationEndLine": 702
            },
            {
              "id": "88bd94fe-05cc-f21d-2b49-9019162907ce",
              "entries": [
                {
                  "id": "bf1991fa-d74b-d557-b009-8572493228f7",
                  "type": "text",
                  "text": "An Output property is an observable property annotated with an `@Output` decorator. The property almost always returns an Angular `EventEmitter`. Values flow out of the component as events bound with an event binding."
                },
                {
                  "id": "69361b5b-db4e-4989-94b2-7eb282058124",
                  "type": "text",
                  "text": "#### Example\n\n```typescript\n@Output() testEvent = new EventEmitter<any>();\n```\n\nAlternatively, you can identify members in the outputs array of the directive metadata, as in this example:\n\n```typescript\n@Component({\n  outputs: ['testEvent'],\n})\n```"
                },
                {
                  "id": "66bf3fcd-8edd-f9a8-80b8-ff8443ffdc86",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "05558fa0-bbb9-ff70-6dc9-47349e535ec5",
                  "type": "text",
                  "text": "```typescript\n@Output(propertyBindingName: string)\n```"
                },
                {
                  "id": "9171ace9-3ac2-1c30-ca86-d2fc16b72714",
                  "type": "interface-option",
                  "head": "bindingPropertyName",
                  "description": "You can supply an optional name to use in templates when the\ncomponent is instantiated, that maps to the\nname of the bound property. By default, the original\nname of the bound property is used for output binding.",
                  "name": "bindingPropertyName",
                  "headId": "bindingPropertyName",
                  "interface": "bindingPropertyName?: string",
                  "showAdditional": true,
                  "additional": "The following example creates a component with two output properties,\none of which is given a special binding name.\n\n```typescript\n@Component({\n  selector: 'output-test',\n  ...\n})\nclass BankAccount {\n  // This property is bound using its original name.\n  @Output() test = new EventEmitter();\n  // this property value is bound to a different property name\n  // when this component is instantiated in a template.\n  @Input('test-2') test2 = new EventEmitter();\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    <output-test (test)=\"...\" (test-2)=\"...\"></output-test>\n  `\n})\nclass App {}\n```"
                }
              ],
              "title": "@Output",
              "url": "output",
              "generationType": "interface-options",
              "generationFile": "core/src/metadata/directives.ts",
              "generationName": "Output",
              "generationStartLine": 742,
              "generationEndLine": 747
            },
            {
              "id": "5a891eec-d6ae-8611-539d-ff0bf398a30d",
              "entries": [
                {
                  "id": "2f7e3baa-0c13-4490-0216-0008320943ed",
                  "type": "text",
                  "text": "Binds a host element property to a directive/component property."
                },
                {
                  "id": "c14f9cef-d9c9-5fff-2301-52a444209717",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "3fbe5bee-ffcb-484d-8616-e55bfc3c9a1c",
                  "type": "text",
                  "text": "```typescript\nexport class MyComponent {\n  @HostBinding('class.valid') isValid;\n}\n```\n\nOr use getter for binding:\n\n```typescript\nexport class MyComponent {\n  @HostBinding('class.error') get isError() {\n    ...\n  }\n}\n```\n"
                },
                {
                  "id": "b62ab6e4-9fc6-e622-9610-15e1a16207c5",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Using @HostBinding and @HostListener in Custom Angular Directives",
                      "url": "https://alligator.io/angular/hostbinding-hostlistener/",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "35abe6f6-19c1-0686-fe11-d37b443745e5",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "b45f6d63-f03b-6d5a-8cb2-d7ff75b8b150",
                  "type": "interface-option",
                  "name": "hostPropertyName",
                  "head": "hostPropertyName",
                  "headId": "hostPropertyName",
                  "interface": "hostPropertyName?: string",
                  "description": "Property name."
                }
              ],
              "title": "@HostBinding",
              "url": "host-binding",
              "generationType": "interface-options",
              "generationFile": "core/src/metadata/directives.ts",
              "generationName": "HostBinding",
              "generationStartLine": 802,
              "generationEndLine": 807
            },
            {
              "id": "1f55b67c-8bec-f0d9-f22a-438bc1618746",
              "entries": [
                {
                  "id": "a13797a2-b850-f57b-3697-bb593ad18c9c",
                  "type": "text",
                  "text": "Binds a CSS event to a host listener and supplies configuration metadata. Angular invokes the supplied handler method when the host element emits the specified event, and updates the bound element with the result. \n\nIf the handler method returns false, applies `preventDefault` on the bound element."
                },
                {
                  "id": "ff52720b-2c54-3f7f-4c49-13cb6d7dfc77",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "953a2992-07e9-304d-3d7a-d69e3382bbf4",
                  "type": "text",
                  "text": "The following example declares a directive that attaches a click listener to a button and counts clicks."
                },
                {
                  "id": "e030634c-f88d-951c-0e98-eacdc7797e80",
                  "type": "text",
                  "text": "```typescript\n@Directive({selector: 'button[counting]'})\nclass CountClicks {\n  numberOfClicks = 0;\n \n  @HostListener('click', ['$event.target'])\n  onClick(btn) {\n    console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n }\n}\n \n@Component({\n  selector: 'app',\n  template: '<button counting>Increment</button>',\n})\nclass App {}\n```"
                },
                {
                  "id": "44d81a12-2b66-60c8-e0c2-69850132530e",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Using @HostBinding and @HostListener in Custom Angular Directives",
                      "url": "https://alligator.io/angular/hostbinding-hostlistener/",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "8dd26fa8-f55c-70d0-e3a7-1b728903cee4",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "e0b0fba6-053a-30f4-b6a5-165ae353f15f",
                  "type": "text",
                  "text": "```typescript\n@HostListener(eventName: string, args: string[])\n```"
                },
                {
                  "id": "8c2e1691-5bec-50ea-d361-791210f6a6e3",
                  "type": "interface-option",
                  "head": "eventName",
                  "description": "The JavaScript event to listen for.",
                  "name": "eventName",
                  "headId": "eventName",
                  "interface": "eventName?: string"
                },
                {
                  "id": "33be5cb4-eb17-25be-52ea-c4ba33edb10d",
                  "type": "interface-option",
                  "head": "args",
                  "description": "A set of arguments to pass to the handler method when the event occurs.",
                  "name": "args",
                  "headId": "args",
                  "interface": "args?: string[]"
                }
              ],
              "title": "@HostListener",
              "url": "host-listener",
              "generationType": "interface-options",
              "generationFile": "core/src/metadata/directives.ts",
              "generationName": "HostListener",
              "generationStartLine": 841,
              "generationEndLine": 850
            },
            {
              "id": "1328b290-53ab-ef6a-73cc-d9b0a511e1e4",
              "entries": [
                {
                  "id": "b38000f4-0072-c92f-3b07-4e7808fb2a73",
                  "type": "text",
                  "text": "The `@Attribute` decorator returns the value of the specified attribute from the host.\n"
                },
                {
                  "id": "bc6584cf-fe05-b31e-05ba-06365b0cb8ed",
                  "type": "text",
                  "text": "#### Example\n\n```typescript\nexport class MyComponent {\n  constructor(@Attribute('test') public test: string) { }\n}\n```\n\nWill read value from declaration:\n\n```html\n<my-component test=\"hello\"></my-component>\n```"
                },
                {
                  "id": "e83b28ba-e835-e57f-95fe-99ccea9040aa",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Getting to Know the @Attribute Decorator in Angular",
                      "url": "https://netbasal.com/getting-to-know-the-attribute-decorator-in-angular-4f7c9fb61243",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "819cf67f-f79f-f530-6e63-f9b5651abe7e",
                  "type": "interface-option",
                  "name": "attributeName",
                  "head": "attributeName",
                  "headId": "attributeName",
                  "interface": "attributeName?: string"
                }
              ],
              "title": "@Attribute",
              "url": "attribute",
              "generationType": "interface-options",
              "generationFile": "core/src/metadata/di.ts",
              "generationName": "Attribute",
              "generationStartLine": 87,
              "generationEndLine": 92
            },
            {
              "id": "04e30588-8dab-9d60-6615-8095ba5aa8eb",
              "entries": [
                {
                  "id": "7f8dda4f-17f5-c28b-78bf-f977511185b4",
                  "type": "text",
                  "text": "You can use `ContentChildren` to get the `QueryList` of elements or directives from the content DOM. Any time a child element is added, removed, or moved, the query list will be updated, and the changes observable of the query list will emit a new value.\n\nContent queries are set before the `ngAfterContentInit` callback is called.\n"
                },
                {
                  "id": "1dbff7ef-42c4-003c-09df-28ea91421618",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "4a3af8ba-2a25-2bc6-e905-6f13b2ce84bb",
                  "type": "text",
                  "text": "Here is a simple demonstration of how the ContentChildren decorator can be used."
                },
                {
                  "id": "686ecbd4-7e3d-a13d-a2d9-ea3b62a5d2da",
                  "type": "text",
                  "text": "```typescript\nimport {AfterContentInit, ContentChildren, Directive, QueryList} from '@angular/core';\n \n@Directive({selector: 'child-directive'})\nclass ChildDirective {\n}\n \n@Directive({selector: 'someDir'})\nclass SomeDir implements AfterContentInit {\n  @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;\n \n  ngAfterContentInit() {\n    // contentChildren is set\n  }\n}\n```"
                },
                {
                  "id": "39982c95-6437-167b-747f-55c35626cb07",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Understanding ViewChildren, ContentChildren, and QueryList in Angular",
                      "url": "https://netbasal.com/understanding-viewchildren-contentchildren-and-querylist-in-angular-896b0c689f6e",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "6150e0b5-53d9-cfae-0729-12d3b2e32637",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "a158bbcb-ed4c-89c8-ee90-c23fa36520d8",
                  "type": "text",
                  "text": "```typescript\n@ContentChildren(\n  selector: Type<any>|Function|string, \n  opts?: {descendants?: boolean, read?: any},\n)\n```"
                },
                {
                  "id": "29daa2ca-b0d8-279a-c2ff-e4352c4eec2d",
                  "type": "interface-option",
                  "head": "selector",
                  "description": "The directive type or the name used for querying.",
                  "name": "selector",
                  "headId": "selector",
                  "interface": "selector: Type<any>|Function|string",
                  "showAdditional": true,
                  "additional": "Supported selectors include:\n\n* any class with the `@Component` or `@Directive` decorator\n* a template reference variable as a string (e.g. query `<my-component #cmp></my-component>` with `@ViewChild('cmp')`)\n* any provider defined in the child component tree of the current component (e.g. `@ViewChild(SomeService) someService: SomeService`)\n* any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal: any`)\n* a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef) template;`)"
                },
                {
                  "id": "1ab2b863-8c98-d0f8-3462-9c8bcb0de5aa",
                  "type": "interface-option",
                  "head": "opts",
                  "description": "Additional options.\n",
                  "name": "opts",
                  "headId": "opts",
                  "interface": "opts?: {descendants?: boolean, read?: any}",
                  "showAdditional": true,
                  "additional": "* `descendants` - include only direct children or all descendants.\n* `read` - read a different token from the queried elements."
                }
              ],
              "title": "@ContentChildren",
              "url": "content-children",
              "generationType": "none",
              "generationFile": "",
              "generationName": ""
            },
            {
              "id": "1a217c09-06eb-3b2b-a429-aed5cf1c9978",
              "entries": [
                {
                  "id": "a46dafc8-7a87-c4a7-0dbd-eb0b51db45ba",
                  "type": "text",
                  "text": "You can use `ContentChild` to get the first element or the directive matching the selector from the content DOM. If the content DOM changes, and a new child matches the selector, the property will be updated.\n\nContent queries are set before the `ngAfterContentInit` callback is called.\n"
                },
                {
                  "id": "7062c7af-4fce-b1e7-48bd-a6a297501c8f",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "2baf0abe-eac2-ae3d-f3ae-b9ba30da4121",
                  "type": "text",
                  "text": "```typescript\nimport {AfterContentInit, ContentChild, Directive} from '@angular/core';\n \n@Directive({selector: 'child-directive'})\nclass ChildDirective {\n}\n \n@Directive({selector: 'someDir'})\nclass SomeDir implements AfterContentInit {\n  @ContentChild(ChildDirective, {static: true}) contentChild: ChildDirective;\n \n  ngAfterContentInit() {\n    // contentChild is set\n  }\n}\n```"
                },
                {
                  "id": "4096b4fb-3f1d-7fda-49f0-1ddc7df19d6a",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "645ca80b-6223-4d75-73b7-c5b0f25a86d3",
                  "type": "text",
                  "text": "```typescript\n@ContentChild(\n  selector: Type<any>|Function|string, \n  opts?: {read?: any, static: boolean},\n)\n```"
                },
                {
                  "id": "88c45db4-3a47-6e44-9d25-0fb0769e8ad4",
                  "type": "interface-option",
                  "head": "selector",
                  "description": "The directive type or the name used for querying.",
                  "name": "selector",
                  "headId": "selector",
                  "interface": "selector: Type<any>|Function|string",
                  "showAdditional": true,
                  "additional": "Supported selectors include:\n\n* any class with the `@Component` or `@Directive` decorator\n* a template reference variable as a string (e.g. query `<my-component #cmp></my-component>` with `@ViewChild('cmp')`)\n* any provider defined in the child component tree of the current component (e.g. `@ViewChild(SomeService) someService: SomeService`)\n* any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal: any`)\n* a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef) template;`)"
                },
                {
                  "id": "440ff0d3-5f39-a6cd-1392-4be2dd460239",
                  "type": "interface-option",
                  "head": "opts",
                  "description": "Additional options.\n",
                  "name": "opts",
                  "headId": "opts",
                  "interface": "opts?: {read?: any}",
                  "showAdditional": true,
                  "additional": "* `read` - read a different token from the queried element.\n* `static` - `true` to resolve query results before change detection runs, `false` to resolve after change detection.",
                  "tutorialsEntry": {
                    "id": "9e2feee8-2284-5289-6dd3-e5714dd9255c",
                    "type": "tutorials",
                    "links": [
                      {
                        "url": "https://www.thecodecampus.de/blog/angular-viewchild-static-property-in-ng8/",
                        "label": "Angular ViewChild – static property in ng8"
                      }
                    ]
                  }
                }
              ],
              "title": "@ContentChild",
              "url": "content-child"
            },
            {
              "id": "dca50057-6b53-5c5e-6aa5-3682bb1a6e51",
              "entries": [
                {
                  "id": "a0c607c7-9461-18d8-7eba-4d588f49e3cb",
                  "type": "text",
                  "text": "You can use `ViewChildren` to get the `QueryList` of elements or directives from the view DOM. Any time a child element is added, removed, or moved, the query list will be updated, and the changes observable of the query list will emit a new value.\n\nView queries are set before the `ngAfterViewInit` callback is called."
                },
                {
                  "id": "5bdb7f85-8674-58f3-c364-39d9e178ad43",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "55b15e57-5ec4-aac2-ddea-a3ac0c081099",
                  "type": "text",
                  "text": "```typescript\nimport {AfterViewInit, Component, Directive, QueryList, ViewChildren} from '@angular/core';\n \n@Directive({selector: 'child-directive'})\nclass ChildDirective {\n}\n \n@Component({selector: 'someCmp', templateUrl: 'someCmp.html'})\nclass SomeCmp implements AfterViewInit {\n  @ViewChildren(ChildDirective) viewChildren: QueryList<ChildDirective>;\n \n  ngAfterViewInit() {\n    // viewChildren is set\n  }\n}\n```"
                },
                {
                  "id": "418d97ff-745c-7617-978a-c449ee08c309",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Understanding ViewChildren, ContentChildren, and QueryList in Angular",
                      "url": "https://netbasal.com/understanding-viewchildren-contentchildren-and-querylist-in-angular-896b0c689f6e",
                      "lang": "en"
                    },
                    {
                      "lang": "en",
                      "label": "Hidden behavior of @ViewChidlren",
                      "url": "https://stackoverflow.com/a/49167289/2500707"
                    }
                  ]
                },
                {
                  "id": "d33c6b8d-b3fd-720c-5a8b-dd1bcc6fd505",
                  "type": "text",
                  "text": "## Options\n"
                },
                {
                  "id": "156042b0-cfb0-403c-7009-175e9f188f25",
                  "type": "text",
                  "text": "```typescript\n@ContentChildren(\n  selector: Type<any>|Function|string, \n  opts?: {read?: any},\n)\n```"
                },
                {
                  "id": "37ec0f11-523f-f42e-ff77-4f12090c48e0",
                  "type": "interface-option",
                  "head": "selector",
                  "description": "The directive type or the name used for querying.",
                  "interface": "selector: Type<any>|Function|string",
                  "name": "selector",
                  "headId": "selector",
                  "showAdditional": true,
                  "additional": "Supported selectors include:\n\n* any class with the `@Component` or `@Directive` decorator\n* a template reference variable as a string (e.g. query `<my-component #cmp></my-component>` with `@ViewChild('cmp')`)\n* any provider defined in the child component tree of the current component (e.g. `@ViewChild(SomeService) someService: SomeService`)\n* any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal: any`)\n* a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef) template;`)"
                },
                {
                  "id": "fcd72f7e-5851-c75e-fc26-feb160e85f33",
                  "type": "interface-option",
                  "head": "opts",
                  "description": "Additional options",
                  "name": "opts",
                  "headId": "opts",
                  "interface": "opts?: {read?: any}",
                  "showAdditional": true,
                  "additional": "* `read` - read a different token from the queried elements."
                }
              ],
              "title": "@ViewChildren",
              "url": "view-children"
            },
            {
              "id": "3cfe6c81-843b-a989-51a6-0bf748ebb209",
              "entries": [
                {
                  "id": "a5debb98-d267-b1f3-df4f-7a6c830f2324",
                  "type": "text",
                  "text": "Property decorator that configures a view query. The change detector looks for the first element or the directive matching the selector in the view DOM. If the view DOM changes, and a new child matches the selector, the property is updated.\n\nView queries are set before the ngAfterViewInit callback is called."
                },
                {
                  "id": "eca4723b-689d-9d88-b760-42cc05ef8b1a",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "41a7b2e2-b3f4-6af7-f98f-740bbc5fb90e",
                  "type": "text",
                  "text": "```typescript\nimport {AfterViewInit, Component, Directive, ViewChild} from '@angular/core';\n \n@Directive({selector: 'child-directive'})\nclass ChildDirective {\n}\n \n@Component({selector: 'someCmp', templateUrl: 'someCmp.html'})\nclass SomeCmp implements AfterViewInit {\n  @ViewChild(ChildDirective, {static: true}) child: ChildDirective;\n \n  ngAfterViewInit() {\n    // child is set\n  }\n}\n```"
                },
                {
                  "id": "0a22c14d-00f4-fedf-45e9-dc8b048f328a",
                  "type": "tutorials",
                  "links": [
                    {
                      "lang": "en",
                      "label": "Angular @ViewChild: In-Depth Explanation (All Features Covered)",
                      "url": "https://blog.angular-university.io/angular-viewchild/"
                    },
                    {
                      "lang": "en",
                      "label": "Hidden behavior of @ViewChidlren",
                      "url": "https://stackoverflow.com/a/49167289/2500707"
                    }
                  ]
                },
                {
                  "id": "94a00c91-8493-ded9-c38f-b9a3336a36c3",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "7269fda0-18e2-01b8-51a7-477a5e322f53",
                  "type": "text",
                  "text": "```typescript\n@ViewChild(\n  selector: Type<any>|Function|string, \n  opts?: {read?: any, static: boolean},\n)\n```"
                },
                {
                  "id": "261dceec-30d4-2aea-2629-459654879900",
                  "type": "interface-option",
                  "head": "selector",
                  "description": "The directive type or the name used for querying.",
                  "name": "selector",
                  "headId": "selector",
                  "interface": "selector: Type<any>|Function|string",
                  "showAdditional": true,
                  "additional": "Supported selectors include:\n\n* any class with the `@Component` or `@Directive` decorator\n* a template reference variable as a string (e.g. query `<my-component #cmp></my-component>` with `@ViewChild('cmp')`)\n* any provider defined in the child component tree of the current component (e.g. `@ViewChild(SomeService) someService: SomeService`)\n* any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal: any`)\n* a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef) template;`)"
                },
                {
                  "id": "1865105a-7051-090a-a858-4f5d567245e1",
                  "type": "interface-option",
                  "head": "opts",
                  "description": "Additional options.",
                  "name": "opts",
                  "headId": "opts",
                  "interface": "opts?: {read?: any}",
                  "showAdditional": true,
                  "additional": "* `read` - read a different token from the queried elements.\n* `static` - `true` to resolve query results before change detection runs.",
                  "tutorialsEntry": {
                    "id": "b7a2c9e4-7ce3-7e2f-2769-370b4dd3bd9d",
                    "type": "tutorials",
                    "links": [
                      {
                        "url": "https://www.thecodecampus.de/blog/angular-viewchild-static-property-in-ng8/",
                        "label": "Angular ViewChild – static property in ng8"
                      }
                    ]
                  }
                }
              ],
              "title": "@ViewChild",
              "url": "view-child"
            },
            {
              "id": "92205ec1-1710-2fb5-97cb-55dc72b767cf",
              "entries": [
                {
                  "id": "b408473d-30b8-7062-9a79-1dc843966e5e",
                  "type": "text",
                  "text": "Dependency Injection (DI) is a way to create objects that depend upon other objects. A Dependency Injection system supplies the dependent objects (called the dependencies) when it creates an instance of an object."
                },
                {
                  "id": "d7c8f520-2df6-cf2f-e23d-fe59a48df7bd",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Dependency Injection",
                      "url": "https://angular.io/guide/dependency-injection",
                      "lang": "en"
                    },
                    {
                      "label": "Angular — Hierarchical Dependency Injectors",
                      "url": "https://angular.io/guide/hierarchical-dependency-injection",
                      "lang": "en"
                    },
                    {
                      "label": "Angular — DI in Action",
                      "url": "https://angular.io/guide/dependency-injection-in-action",
                      "lang": "en"
                    },
                    {
                      "label": "Everything you need to know about change detection in Angular",
                      "url": "https://indepth.dev/everything-you-need-to-know-about-change-detection-in-angular/",
                      "lang": "en"
                    },
                    {
                      "url": "https://medium.com/@tomastrajan/total-guide-to-angular-6-dependency-injection-providedin-vs-providers-85b7a347b59f",
                      "label": "Total Guide To Angular 6+ Dependency Injection — providedIn vs providers:[ ] 💉"
                    },
                    {
                      "label": "What you always wanted to know about Angular Dependency Injection tree",
                      "url": "https://medium.com/angular-in-depth/angular-dependency-injection-and-tree-shakeable-tokens-4588a8f70d5d"
                    }
                  ]
                }
              ],
              "title": "Dependency Injection",
              "url": "dependency-injection"
            },
            {
              "id": "2ce7e124-b64d-20f2-4396-71dc96acc65a",
              "entries": [
                {
                  "id": "bbe1a31d-bb12-02be-5993-46d221108fb9",
                  "type": "text",
                  "text": "Base class for Angular Views, provides change detection functionality.\nA change-detection tree collects all views that are to be checked for changes.\nUse the methods to add and remove views from the tree, initiate change-detection,\nand explicitly mark views as `_dirty_`, meaning that they have changed and need to be rerendered."
                },
                {
                  "id": "68d472ad-b9bb-cb0d-9af2-daabeff21412",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "55677ae0-b07c-bc2d-1262-bcc2f9bb1c43",
                  "type": "text",
                  "text": "Manual change detection run:\n\n```typescript\nexport class MyComponent {\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n\n  runManual() {\n    this.cdr.detectChanges();\n  }\n}\n```"
                },
                {
                  "id": "bdf2206c-809c-a29b-58ff-e6946cc317d5",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Understanding Change Detection Strategy in Angular",
                      "url": "https://alligator.io/angular/change-detection-strategy/",
                      "lang": "en"
                    },
                    {
                      "label": "Everything you need to know about change detection in Angular",
                      "url": "https://blog.angularindepth.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "222c1014-8942-8b4e-bd8f-61d50c95fc5b",
                  "type": "text",
                  "text": "## Methods"
                },
                {
                  "id": "49567c5a-44c3-7ca9-1111-ee60a7a2739b",
                  "type": "toc"
                },
                {
                  "id": "694262ee-b1b7-8f67-97d4-5b315c10e5e0",
                  "type": "interface-option",
                  "head": "checkNoChanges",
                  "description": "Checks the change detector and its children, and throws if any changes are detected.\n\nUse in development mode to verify that running change detection doesn't introduce\nother changes.",
                  "name": "checkNoChanges",
                  "headId": "checkNoChanges",
                  "interface": "checkNoChanges(): void",
                  "showAdditional": true,
                  "additional": "Use in development mode to verify that running change detection doesn't introduce other changes."
                },
                {
                  "id": "37e0784f-34b6-d87d-8532-d526cb27829d",
                  "type": "interface-option",
                  "head": "detach",
                  "description": "Detaches this view from the change-detection tree.\nA detached view is  not checked until it is reattached.\nUse in combination with `detectChanges()` to implement local change detection checks.\n\nDetached views are not checked during change detection runs until they are\nre-attached, even if they are marked as dirty.\n\n<!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n<!-- TODO: Add a live demo once ref.detectChanges is merged into master -->",
                  "name": "detach",
                  "headId": "detach",
                  "interface": "detach(): void",
                  "showAdditional": true,
                  "additional": "Detached views are not checked during change detection runs until they are re-attached, even if they are marked as dirty."
                },
                {
                  "id": "772b4197-9cb9-66d5-d7c6-4768af372b1f",
                  "type": "interface-option",
                  "head": "detectChanges",
                  "description": "Checks this view and its children. Use in combination with {@link ChangeDetectorRef#detach\ndetach}\nto implement local change detection checks.\n\n<!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n<!-- TODO: Add a live demo once ref.detectChanges is merged into master -->",
                  "name": "detectChanges",
                  "headId": "detectChanges",
                  "interface": "detectChanges(): void"
                },
                {
                  "id": "b3179f90-7912-d6cb-cf8e-6045680aefa2",
                  "type": "interface-option",
                  "head": "markForCheck",
                  "description": "When a view uses the {@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\nchange detection strategy, explicitly marks the view as changed so that\nit can be checked again.\n\nComponents are normally marked as dirty (in need of rerendering) when inputs\nhave changed or events have fired in the view. Call this method to ensure that\na component is checked even if these triggers have not occured.\n\n<!-- TODO: Add a link to a chapter on OnPush components -->",
                  "name": "markForCheck",
                  "headId": "markForCheck",
                  "interface": "markForCheck(): void",
                  "showAdditional": true,
                  "additional": "Components are normally marked as dirty (in need of rerendering) when inputs have changed or events have fired in the view. Call this method to ensure that a component is checked even if these triggers have not occured."
                },
                {
                  "id": "15342f05-ffd6-71c2-fd53-00e40cbe55a6",
                  "type": "interface-option",
                  "head": "reattach",
                  "description": "Re-attaches the previously detached view to the change detection tree.\nViews are attached to the tree by default.\n\n<!-- TODO: Add a link to a chapter on detach/reattach/local digest -->",
                  "name": "reattach",
                  "headId": "reattach",
                  "interface": "reattach(): void"
                }
              ],
              "title": "ChangeDetectorRef\n",
              "url": "change-detector-ref",
              "generationType": "interface-options",
              "generationFile": "core/src/change_detection/change_detector_ref.ts",
              "generationName": "ChangeDetectorRef",
              "generationStartLine": 69,
              "generationEndLine": 132
            },
            {
              "id": "294a9573-a0da-0e1f-e877-e417539ecdfa",
              "entries": [
                {
                  "id": "e279ad9f-a698-fb5f-372f-ea9c7bd913db",
                  "type": "text",
                  "text": "Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a runtime representation) such as when injecting an interface, callable type, array or parametrized type.\n\n`InjectionToken` is parameterized on `T` which is the type of object which will be returned by the `Injector`. This provides additional level of type safety.\n\n```typescript\ninterface MyInterface {...}\nvar myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n// myInterface is inferred to be MyInterface.\n```"
                },
                {
                  "id": "5357894a-927b-e192-9b2c-ed84b2221317",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "9406a90e-393b-6f00-3461-4d5cc11529c8",
                  "type": "text",
                  "text": "Plain `InjectionToken`:\n\n```typescript\nconst BASE_URL = new InjectionToken<string>('BaseUrl');\nconst injector =\n    Injector.create({providers: [{provide: BASE_URL, useValue: 'http://localhost'}]});\nconst url = injector.get(BASE_URL);\n// here `url` is inferred to be `string` because `BASE_URL` is `InjectionToken<string>`.\nexpect(url).toBe('http://localhost');\n```"
                },
                {
                  "id": "d66037ea-8163-4b52-cd31-5e2e60a13990",
                  "type": "text",
                  "text": "Tree-shakable `InjectionToken`:\n\n```typescript\nclass MyService {\n  constructor(readonly myDep: MyDep) {}\n}\n \nconst MY_SERVICE_TOKEN = new InjectionToken<MyService>('Manually constructed MyService', {\n  providedIn: 'root',\n  factory: () => new MyService(inject(MyDep)),\n});\n \nconst instance = injector.get(MY_SERVICE_TOKEN);\nexpect(instance instanceof MyService).toBeTruthy();\nexpect(instance.myDep instanceof MyDep).toBeTruthy();\n```"
                },
                {
                  "id": "6a74ff31-1cc5-cc38-60e0-62db454bad79",
                  "type": "text",
                  "text": "## Costructor parameters"
                },
                {
                  "id": "315c2e56-9156-2260-872f-125eb472d1c5",
                  "type": "text",
                  "text": "```typescript\nInjectionToken<T>(\n  _desc: string,\n  options?: { providedIn?: Type<any> | 'root' | null; factory: () => T; },\n);\n```"
                },
                {
                  "id": "b0120c84-6d89-532a-b080-099a9a3af8c0",
                  "type": "interface-option",
                  "head": "_desc",
                  "description": "Description.",
                  "name": "_desc",
                  "headId": "_desc",
                  "interface": "_desc: string"
                },
                {
                  "id": "092139b0-f7f6-d91d-72d9-8b0ab887a928",
                  "type": "interface-option",
                  "head": "options",
                  "description": "Additional options.",
                  "name": "options",
                  "headId": "options",
                  "interface": "options?: {     providedIn?: Type<any> | 'root' | null;     factory: () => T; }",
                  "showAdditional": true,
                  "additional": "When creating an `InjectionToken`, you can optionally specify a factory function which returns (possibly by creating) a default value of the parameterized type `T`. This sets up the `InjectionToken` using this factory as a provider as if it was defined explicitly in the application's root injector. If the factory function, which takes zero arguments, needs to inject dependencies, it can do so using the inject function. See below for an example.\n\nAdditionally, if a factory is specified you can also specify the providedIn option, which overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As mentioned above, 'root' is the default value for `providedIn`."
                }
              ],
              "title": "InjectionToken",
              "url": "injection-token",
              "generationType": "none",
              "generationFile": "",
              "generationName": ""
            },
            {
              "id": "56bb53be-d88a-fed8-67fc-56520800641e",
              "entries": [
                {
                  "id": "4d11223c-28ea-5353-9c52-534fb1af8c07",
                  "type": "text",
                  "text": "For instance, `forwardRef` is used when the token which we need to refer to for the purposes of DI is declared, but not yet defined. It is also used when the token which we use when creating a query is not yet defined."
                },
                {
                  "id": "7ece4831-a38b-d9f5-82c8-fdc7d1222370",
                  "type": "text",
                  "text": "```typescript\nforwardRef(forwardRefFn: ForwardRefFn): Type<any>\n```"
                },
                {
                  "id": "a95f0dd8-25e1-f92e-c007-d23c77b530d3",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "a78cbc2f-2665-39bd-b1f0-a97d685fa2ba",
                  "type": "text",
                  "text": "```typescript\nclass Door {\n  lock: Lock;\n \n  // Door attempts to inject Lock, despite it not being defined yet.\n  // forwardRef makes this possible.\n  constructor(@Inject(forwardRef(() => Lock)) lock: Lock) { this.lock = lock; }\n}\n \n// Only at this point Lock is defined.\nclass Lock {}\n \nconst injector = ReflectiveInjector.resolveAndCreate([Door, Lock]);\nconst door = injector.get(Door);\nexpect(door instanceof Door).toBeTruthy();\nexpect(door.lock instanceof Lock).toBeTruthy();\n```"
                }
              ],
              "title": "forwardRef",
              "url": "forward-ref"
            },
            {
              "id": "124df87b-a860-95a5-ed6c-3c23e07851d2",
              "entries": [
                {
                  "id": "1db16397-cbc6-27cb-aec3-546c13dca8d2",
                  "type": "text",
                  "text": "Providers tell the injector how to create the service. Without a provider, the injector would not know that it is responsible for injecting the service nor be able to create the service.\n\n```typescript\nproviders: [Logger]\n```\n\n---\n\nYou can configure the injector with alternative providers that can deliver an object that behaves. You could provide a substitute class. You could provide a service-like object. You could give it a provider that calls a factory function. Any of these approaches might be a good choice under the right circumstances.\n\nWhat matters is that the injector has a provider to go to when it needs a service."
                },
                {
                  "id": "11558b46-5b56-f96d-6a47-cbd0176139d9",
                  "type": "toc"
                },
                {
                  "id": "25235452-e00f-b3e8-8bad-2703bb6d464b",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Dependency Injection",
                      "url": "https://angular.io/guide/dependency-injection",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "61ef9a11-a29d-e041-4921-2e09284119e6",
                  "type": "text",
                  "head": "useValue",
                  "text": "Sometimes it's easier to provide a ready-made object rather than ask the injector to create it from a class.\n\nThen you register a provider with the `useValue` option:\n\n```typescript\n[{ \n  provide: Config, \n  useValue: {option1: true, options2: false},\n}]\n```\n",
                  "headId": "use-value"
                },
                {
                  "id": "cbf939ee-a9a1-1682-7b32-b13a8cdac6dd",
                  "type": "text",
                  "head": "useClass",
                  "text": "Here's the class-provider syntax:\n\n```typescript\nproviders: [Logger]\n```\n\nThis is actually a shorthand expression for a provider registration using a provider object literal with two properties:\n\n```typescript\n[{ provide: Logger, useClass: Logger }]\n```\n\nThe `provide` property holds the token that serves as the key for both locating a dependency value and registering the provider.\n\nThe second property is always a provider definition object, which you can think of as a recipe for creating the dependency value. There are many ways to create dependency values just as there are many ways to write a recipe.\n\nOccasionally you'll ask a different class to provide the service. The following code tells the injector to return a `BetterLogger` when something asks for the `Logger`.\n\n```typescript\n[{ provide: Logger, useClass: BetterLogger }]\n```\n\n",
                  "headId": "use-class"
                },
                {
                  "id": "5a38ada3-3a6b-dd26-9286-bab87a2efa71",
                  "type": "text",
                  "head": "useExisting",
                  "text": "Allows to declare two providers for the same class with two different tokens.\n\n```typescript\n[ \n  NewLogger,\n  // Alias OldLogger w/ reference to NewLogger\n  { provide: OldLogger, useExisting: NewLogger},\n]\n```\n",
                  "headId": "use-existing"
                },
                {
                  "id": "a04c7623-b405-ea15-b81b-22e0255483bc",
                  "type": "text",
                  "head": "useFactory",
                  "text": "Sometimes you need to create the dependent value dynamically, based on information you won't have until the last possible moment. Maybe the information changes repeatedly in the course of the browser session.\n\nSuppose also that the injectable service has no independent access to the source of this information.\n\nThis situation calls for a factory provider.\n\nA factory provider needs a factory function:\n\n```typescript\nlet heroServiceFactory = (logger: Logger, userService: UserService) => {\n  return new HeroService(logger, userService.user.isAuthorized);\n};\n```\n\nYou inject both the `Logger` and the `UserService` into the factory provider and let the injector pass them along to the factory function:\n\n```typescript\n[{ \n  provide: HeroService,\n  useFactory: heroServiceFactory,\n  deps: [Logger, UserService],\n}]\n```",
                  "headId": "use-factory"
                }
              ],
              "title": "Providers",
              "url": "providers"
            },
            {
              "id": "a52f278b-fa42-ea18-f339-a195577deb35",
              "entries": [
                {
                  "id": "5ea73cfd-ae5d-8e2e-bd40-21b937a2c3f2",
                  "type": "text",
                  "text": "A constructor parameter decorator that specifies a custom provider of a dependency.\n"
                },
                {
                  "id": "a7be0697-8a88-decc-a49e-c5af31e68c4f",
                  "type": "text",
                  "text": "```typescript\nconstructor(@Inject(ServiceToken) service: Service) {}\n```"
                },
                {
                  "id": "7e26fd31-58a6-0938-683e-afe510560d1f",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "7d49e18f-7861-96c9-0221-1439970a91c1",
                  "type": "text",
                  "text": "The following example shows a class constructor that specifies a custom provider of a dependency using the parameter decorator.\n\n```typescript\nclass Engine {}\n\n@Injectable()\nclass Car {\n  constructor(@Inject('MyEngine') public engine: Engine) {}\n}\n\nconst injector = ReflectiveInjector.resolveAndCreate([{provide: 'MyEngine', useClass: Engine}, Car]);\n\nexpect(injector.get(Car).engine instanceof Engine).toBe(true);\n```\n\nWhen `@Inject()` is not present, the `Injector` uses the type annotation of the parameter as the provider.\n\n```typescript\nclass Engine {}\n\n@Injectable()\nclass Car {\n  constructor(public engine: Engine) {\n  }  // same as constructor(@Inject(Engine) engine:Engine)\n}\n\nconst injector = ReflectiveInjector.resolveAndCreate([Engine, Car]);\nexpect(injector.get(Car).engine instanceof Engine).toBe(true);\n```"
                }
              ],
              "title": "@Inject",
              "url": "inject"
            },
            {
              "id": "143faa82-9418-fd0f-039c-5f6840a731a4",
              "entries": [
                {
                  "id": "44f0f2be-939a-7532-220b-669dc4b51793",
                  "type": "text",
                  "text": "A constructor parameter decorator that marks a dependency as optional.\n"
                },
                {
                  "id": "9550f80c-6f00-5c2c-829f-e0cf0aa687ea",
                  "type": "text",
                  "text": "```typescript\nconstructor(@Optional() service: Service) {}\n```"
                },
                {
                  "id": "79385180-f498-497c-cccb-232828bbdc33",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "9462f65c-782f-26ae-7e89-acdb6dcd68eb",
                  "type": "text",
                  "text": "The DI framework provides null if the dependency is not found. For example, the following code allows the possibility of a null result:\n\n```typescript\nclass Engine {}\n\n@Injectable()\nclass Car {\n  constructor(@Optional() public engine: Engine) {}\n}\n\nconst injector = ReflectiveInjector.resolveAndCreate([Car]);\nexpect(injector.get(Car).engine).toBeNull();\n\n```"
                }
              ],
              "title": "@Optional",
              "url": "optional"
            },
            {
              "id": "84835903-900e-2071-acb7-0e810f8f7f3d",
              "entries": [
                {
                  "id": "e17ee295-df1f-77bb-dab5-344f63275e08",
                  "type": "text",
                  "text": "A constructor parameter decorator that tells the DI framework to retrieve a dependency only from the local injector."
                },
                {
                  "id": "0ef7fa53-cf87-4eb4-09b3-e328c7ab8eea",
                  "type": "text",
                  "text": "```typescript\nconstructor(@Self() service: Service) {}\n```"
                },
                {
                  "id": "b746cc55-509c-36e2-ff11-4b7f4cad801b",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "ca3faec8-a050-5347-4860-9d7978c86a8f",
                  "type": "text",
                  "text": "In the following example, the dependency can be resolved by the local injector when instantiating the class itself, but not when instantiating a child.\n\n```typescript\nclass Dependency {}\n \n@Injectable()\nclass NeedsDependency {\n  constructor(@Self() public dependency: Dependency) {}\n}\n \nlet inj = ReflectiveInjector.resolveAndCreate([Dependency, NeedsDependency]);\nconst nd = inj.get(NeedsDependency);\n \nexpect(nd.dependency instanceof Dependency).toBe(true);\n \ninj = ReflectiveInjector.resolveAndCreate([Dependency]);\nconst child = inj.resolveAndCreateChild([NeedsDependency]);\nexpect(() => child.get(NeedsDependency)).toThrowError();\n```\n"
                }
              ],
              "title": "@Self",
              "url": "self"
            },
            {
              "id": "68710180-59fe-4e87-7280-0a71df71f504",
              "entries": [
                {
                  "id": "036f0a84-f68d-2148-f2ee-4fd929cf4b24",
                  "type": "text",
                  "text": "A constructor parameter decorator that tells the DI framework that dependency resolution should start from the parent injector."
                },
                {
                  "id": "5ac81cc2-c6ee-8d79-4ef1-afc63760c116",
                  "type": "text",
                  "text": "```typescript\nconstructor(@SkipSelf() service: Service) {}\n```"
                },
                {
                  "id": "40bf24d8-9938-1d0b-2c1f-e32cb29a1acc",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "e5897574-c680-17e0-cf44-8c016263d7a5",
                  "type": "text",
                  "text": "In the following example, the dependency can be resolved when instantiating a child, but not when instantiating the class itself.\n\n```typescript\nclass Dependency {}\n \n@Injectable()\nclass NeedsDependency {\n  constructor(@SkipSelf() public dependency: Dependency) { this.dependency = dependency; }\n}\n \nconst parent = ReflectiveInjector.resolveAndCreate([Dependency]);\nconst child = parent.resolveAndCreateChild([NeedsDependency]);\nexpect(child.get(NeedsDependency).dependency instanceof Dependency).toBe(true);\n \nconst inj = ReflectiveInjector.resolveAndCreate([Dependency, NeedsDependency]);\nexpect(() => inj.get(NeedsDependency)).toThrowError();\n```"
                }
              ],
              "title": "@SkipSelf",
              "url": "skip-self"
            },
            {
              "id": "1d16ff5d-8a24-e6ed-2d73-5b14d1c56109",
              "entries": [
                {
                  "id": "18b24a5e-75ab-86d3-70d2-50fff6a5a37b",
                  "type": "text",
                  "text": "A constructor parameter decorator that tells the DI framework to retrieve a dependency from any injector until reaching the host element of the current component."
                },
                {
                  "id": "c6b53c5f-16e3-1f8d-e859-bfd733733707",
                  "type": "text",
                  "text": "```typescript\nconstructor(@Host() service: Service) {}\n```"
                },
                {
                  "id": "a83bc6fc-b891-13c8-bd72-544ab88ef85a",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "b94d0739-f35a-5d29-bfa3-4288bb78033e",
                  "type": "text",
                  "text": "```typescript\nclass OtherService {}\nclass HostService {}\n \n@Directive({selector: 'child-directive'})\nclass ChildDirective {\n  logs: string[] = [];\n \n  constructor(@Optional() @Host() os: OtherService, @Optional() @Host() hs: HostService) {\n    // os is null: true\n    this.logs.push(`os is null: ${os === null}`);\n    // hs is an instance of HostService: true\n    this.logs.push(`hs is an instance of HostService: ${hs instanceof HostService}`);\n  }\n}\n \n@Component({\n  selector: 'parent-cmp',\n  viewProviders: [HostService],\n  template: '<child-directive></child-directive>',\n})\nclass ParentCmp {\n}\n \n@Component({\n  selector: 'app',\n  viewProviders: [OtherService],\n  template: '<parent-cmp></parent-cmp>',\n})\nclass App {\n}\n```"
                }
              ],
              "title": "@Host",
              "url": "host"
            },
            {
              "id": "6565c60a-0db7-9d9d-da7e-f0e1cd86062a",
              "entries": [
                {
                  "id": "5cae07ad-208a-967a-60dd-85ea0bcff52d",
                  "type": "text",
                  "text": "A component has a lifecycle managed by Angular.\n\nAngular creates it, renders it, creates and renders its children, checks it when its data-bound properties change, and destroys it before removing it from the DOM.\n\nAngular offers lifecycle hooks that provide visibility into these key life moments and the ability to act when they occur.\n\nA directive has the same set of lifecycle hooks."
                },
                {
                  "id": "e402d38b-db1f-e77c-9d2e-3776d9e729c5",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular — Lifecycle Hooks",
                      "url": "https://angular.io/guide/lifecycle-hooks",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Lifecycle Hooks",
              "url": "lifecycle-hooks"
            },
            {
              "id": "c60d7522-e3a6-2157-7161-187c0492285b",
              "entries": [
                {
                  "id": "022c8094-1bec-02f7-a1ca-47517f5a922f",
                  "type": "text",
                  "text": "A callback method that is invoked immediately after the default change detector has checked data-bound properties if at least one has changed, and before the view and content children are checked."
                },
                {
                  "id": "17e95b3c-a42a-9ae7-4729-d9826dbbe449",
                  "type": "text",
                  "text": "```typescript\nngOnChanges(changes: SimpleChanges): void\n```"
                },
                {
                  "id": "fefba782-a940-7801-d975-90f17715823d",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "083089bb-0a69-f68f-ed8c-6ac27dc8994e",
                  "type": "text",
                  "text": "The following snippet shows how a component can implement this interface to define an on-changes handler for an input property."
                },
                {
                  "id": "909eff00-0786-92d2-7554-93f72dde7cc1",
                  "type": "text",
                  "text": "```typescript\n@Component({selector: 'my-cmp', template: `...`})\nclass MyComponent implements OnChanges {\n  @Input() prop: number;\n\n  ngOnChanges(changes: SimpleChanges) {\n    // changes.prop contains the old and the new value...\n  }\n}\n```"
                }
              ],
              "title": "ngOnChanges()",
              "url": "ng-on-changes"
            },
            {
              "id": "50367a95-a570-e864-a3c1-ad320dbcd6c6",
              "entries": [
                {
                  "id": "3f877290-e3ae-7d35-d2d3-1d2e8a9296ca",
                  "type": "text",
                  "text": "A callback method that is invoked immediately after the default change detector has checked the directive's data-bound properties for the first time, and before any of the view or content children have been checked. It is invoked only once when the directive is instantiated."
                },
                {
                  "id": "85a98ff4-034b-89e1-7232-ef8510efcfd9",
                  "type": "text",
                  "text": "```typescript\nngOnInit(): void\n```"
                },
                {
                  "id": "b5c76bfd-305c-a19c-9f11-891088645d1b",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "c1961899-f112-0c19-3437-a04be78d09d4",
                  "type": "text",
                  "text": "The following snippet shows how a component can implement this interface to define its own initialization method."
                },
                {
                  "id": "04398a2d-2249-1126-4576-81c7701961ee",
                  "type": "text",
                  "text": "```typescript\n@Component({selector: 'my-cmp', template: `...`})\nclass MyComponent implements OnInit {\n  ngOnInit() {\n    // ...\n  }\n}\n```"
                }
              ],
              "title": "ngOnInit()",
              "url": "ng-on-init"
            },
            {
              "id": "5f129cd7-b63e-c07b-5263-40f969f3b0e3",
              "entries": [
                {
                  "id": "faa25e91-b054-9309-1cd0-73ca3228083d",
                  "type": "text",
                  "text": "A callback method that performs change-detection, invoked after the default change-detector runs.\n\nThe default change-detection algorithm looks for differences by comparing bound-property values by reference across change detection runs. You can use this hook to check for and respond to changes by some other means.\n\nWhen the default change detector detects changes, it invokes `ngOnChanges()` if supplied, regardless of whether you perform additional change detection. Typically, you should not use both `DoCheck` and `OnChanges` to respond to changes on the same input."
                },
                {
                  "id": "31a52d3f-95b6-4c51-b7a9-cb354418a86b",
                  "type": "text",
                  "text": "```typescript\nngDoCheck(): void\n```"
                },
                {
                  "id": "55595e2e-d1c7-ec4a-cf07-ca20aab9f4f4",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "a9b378ca-1448-d1c8-eb9f-06b695ecc396",
                  "type": "text",
                  "text": "The following snippet shows how a component can implement this interface to invoke it own change-detection cycle."
                },
                {
                  "id": "2e8a5ed5-137c-3f07-7f7c-75cd5f1a4268",
                  "type": "text",
                  "text": "```typescript\n@Component({selector: 'my-cmp', template: `...`})\nclass MyComponent implements DoCheck {\n  ngDoCheck() {\n    // ...\n  }\n}\n```"
                }
              ],
              "title": "ngDoCheck()",
              "url": "ng-do-check"
            },
            {
              "id": "2b7bc4a7-a825-a200-6cc2-2ffe850ceb48",
              "entries": [
                {
                  "id": "ecf22900-8c22-96ee-c5ab-2b41a60c5ac8",
                  "type": "text",
                  "text": "A callback method that is invoked immediately after Angular has completed initialization of all of the directive's content. It is invoked only once when the directive is instantiated."
                },
                {
                  "id": "780c73dd-3c58-5fe9-e6ce-876471600af7",
                  "type": "text",
                  "text": "```typescript\nngAfterContentInit(): void\n```"
                },
                {
                  "id": "500a62f5-ac8c-08ab-ed54-a2bd69ec7136",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "7761a721-1547-65da-66ea-1993224f1199",
                  "type": "text",
                  "text": "The following snippet shows how a component can implement this interface to define its own content initialization method."
                },
                {
                  "id": "20e45f59-275d-5a03-100e-9fedbcd4b64d",
                  "type": "text",
                  "text": "```typescript\n@Component({selector: 'my-cmp', template: `...`})\nclass MyComponent implements AfterContentInit {\n  ngAfterContentInit() {\n    // ...\n  }\n}\n```"
                }
              ],
              "title": "ngAfterContentInit()",
              "url": "ng-after-content-init"
            },
            {
              "id": "20aa0a64-eacf-3812-17ff-054222577a9b",
              "entries": [
                {
                  "id": "5cd1bee8-fdc3-75db-3c36-4c7dd81c8093",
                  "type": "text",
                  "text": "A callback method that is invoked immediately after the default change detector has completed checking all of the directive's content."
                },
                {
                  "id": "0cf7d14a-fe2b-4a8a-d6ce-4f2def2571c2",
                  "type": "text",
                  "text": "```typescript\nngAfterContentChecked(): void\n```"
                },
                {
                  "id": "7fa65b97-ca08-cc55-1f79-7be1d63e174a",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "26aef03c-ff5a-3e5c-35d2-74eb2eccbc71",
                  "type": "text",
                  "text": "The following snippet shows how a component can implement this interface to define its own after-check functionality."
                },
                {
                  "id": "f00be05a-5a45-ea4b-42ad-3e7aed0fc535",
                  "type": "text",
                  "text": "```typescript\n@Component({selector: 'my-cmp', template: `...`})\nclass MyComponent implements AfterContentChecked {\n  ngAfterContentChecked() {\n    // ...\n  }\n}\n```"
                }
              ],
              "title": "ngAfterContentChecked()",
              "url": "ng-after-content-checked"
            },
            {
              "id": "37ff2fb3-ae0b-d369-3f3e-4307760a3fbf",
              "entries": [
                {
                  "id": "648bcd7f-0f97-bf6e-c0d9-8a372113281e",
                  "type": "text",
                  "text": "A callback method that is invoked immediately after Angular has completed initialization of a component's view. It is invoked only once when the view is instantiated."
                },
                {
                  "id": "b9da475c-a087-7fd5-5fae-5d4b9b0cc00c",
                  "type": "text",
                  "text": "```typescript\nngAfterViewInit(): void\n```"
                },
                {
                  "id": "1a17ca75-0d23-b9f1-40bb-5d0676a13abd",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "c4ad05ef-a25d-5e3d-7437-ec6f49cf4e70",
                  "type": "text",
                  "text": "The following snippet shows how a component can implement this interface to define its own view initialization method."
                },
                {
                  "id": "0bc3305e-8bd1-73c8-fe39-83d54f6aad68",
                  "type": "text",
                  "text": "```typescript\n@Component({selector: 'my-cmp', template: `...`})\nclass MyComponent implements AfterViewInit {\n  ngAfterViewInit() {\n    // ...\n  }\n}\n```"
                }
              ],
              "title": "ngAfterViewInit()",
              "url": "ng-after-view-init"
            },
            {
              "id": "c5caed9f-3c9c-97e8-f383-9d30ad0f3c66",
              "entries": [
                {
                  "id": "79b73b0d-f88a-9707-4b51-d05184d1cb4b",
                  "type": "text",
                  "text": "A callback method that is invoked immediately after the default change detector has completed one change-check cycle for a component's view."
                },
                {
                  "id": "bd20e5dd-406b-fd0c-4d91-7b08dddca640",
                  "type": "text",
                  "text": "```typescript\nngAfterViewChecked(): void\n```"
                },
                {
                  "id": "a9223fae-aded-d6e1-0c33-a455692fa934",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "70979f4f-fdf3-bec7-473e-b0c3c5496d1d",
                  "type": "text",
                  "text": "The following snippet shows how a component can implement this interface to define its own after-check functionality."
                },
                {
                  "id": "a0843248-4e94-943b-75af-884bad712abf",
                  "type": "text",
                  "text": "```typescript\n@Component({selector: 'my-cmp', template: `...`})\nclass MyComponent implements AfterViewChecked {\n  ngAfterViewChecked() {\n    // ...\n  }\n}\n```"
                }
              ],
              "title": "ngAfterViewChecked()",
              "url": "ng-after-view-checked"
            },
            {
              "id": "e1c925dd-f2f4-a880-a4c9-da0c5588f570",
              "entries": [
                {
                  "id": "0b3ddb01-d3b6-eacf-d51f-b15439bc75e5",
                  "type": "text",
                  "text": "A callback method that performs custom clean-up, invoked immediately after a **directive**, **pipe**, or **service** instance is destroyed."
                },
                {
                  "id": "f75fc11c-761e-b06e-1be9-bec4fa860801",
                  "type": "text",
                  "text": "```typescript\nngOnDestroy(): void\n```"
                },
                {
                  "id": "dd838ba1-d467-d60e-fdb3-304e881aedc0",
                  "type": "tutorials",
                  "links": [
                    {
                      "lang": "en",
                      "label": "Exploring Angular Lifecycle Hooks – OnDestroy",
                      "url": "https://ultimatecourses.com/blog/exploring-angular-lifecycle-hooks-ondestroy"
                    }
                  ]
                },
                {
                  "id": "3b928e1f-27b0-fcf6-f02e-21fc1e172387",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "a225f1f6-ab45-e30b-c826-4e03e725f289",
                  "type": "text",
                  "text": "The following snippet shows how a component can implement this interface to define its own custom clean-up method."
                },
                {
                  "id": "ec49dbc5-f4b1-8770-556a-29d273101910",
                  "type": "text",
                  "text": "```typescript\n@Component({selector: 'my-cmp', template: `...`})\nclass MyComponent implements OnDestroy {\n  ngOnDestroy() {\n    // ...\n  }\n}\n```"
                }
              ],
              "title": "ngOnDestroy()",
              "url": "ng-on-destroy"
            },
            {
              "id": "3140bd42-ac5f-8bc5-61d2-fbbb228e10f7",
              "entries": [
                {
                  "id": "8e891ae7-d259-ee55-feb9-234848a0ef3e",
                  "type": "text",
                  "text": "An injectable service for executing work inside or outside of the Angular zone.\n\nThe most common use of this service is to optimize performance when starting a work consisting of one or more asynchronous tasks that don't require UI updates or error handling to be handled by Angular. Such tasks can be kicked off via `runOutsideAngular` and if needed, these tasks can reenter the Angular zone via `run`."
                },
                {
                  "id": "7dd1f9e2-5b07-084a-0245-17431215c754",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Using Zones an Angular for Better Performance",
                      "url": "https://blog.thoughtram.io/angular/2017/02/21/using-zones-in-angular-for-better-performance.html",
                      "lang": "en"
                    },
                    {
                      "label": "I reverse-engineered Zones (zone.js) and here is what I’ve found",
                      "url": "https://blog.angularindepth.com/i-reverse-engineered-zones-zone-js-and-here-is-what-ive-found-1f48dc87659b",
                      "lang": "en"
                    },
                    {
                      "label": "Do you still think that NgZone (zone.js) is required for change detection in Angular?",
                      "url": "https://blog.angularindepth.com/do-you-still-think-that-ngzone-zone-js-is-required-for-change-detection-in-angular-16f7a575afef",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "d0cfa05d-2d97-a89f-b0f0-38725cb92937",
                  "type": "text",
                  "text": "## Interface"
                },
                {
                  "id": "f3629b04-9165-e934-08f4-c4ca5ad7c723",
                  "type": "toc"
                },
                {
                  "id": "4a62224b-9c9c-39e4-c18e-665d90a16a4f",
                  "type": "interface-option",
                  "head": "hasPendingMacrotasks",
                  "description": "",
                  "name": "hasPendingMacrotasks",
                  "headId": "hasPendingMacrotasks",
                  "interface": "hasPendingMacrotasks: boolean"
                },
                {
                  "id": "97dae8e0-3b4b-6a89-446e-075551407081",
                  "type": "interface-option",
                  "head": "hasPendingMicrotasks",
                  "description": "",
                  "name": "hasPendingMicrotasks",
                  "headId": "hasPendingMicrotasks",
                  "interface": "hasPendingMicrotasks: boolean"
                },
                {
                  "id": "e7db88d5-4e23-0ed0-4a08-38b0081c6abc",
                  "type": "interface-option",
                  "head": "isStable",
                  "description": "Whether there are no outstanding microtasks or macrotasks.",
                  "name": "isStable",
                  "headId": "isStable",
                  "interface": "isStable: boolean"
                },
                {
                  "id": "ceb18f97-6aa2-8a40-7c3b-5487825741a6",
                  "type": "interface-option",
                  "head": "onError",
                  "description": "Notifies that an error has been delivered.",
                  "name": "onError",
                  "headId": "onError",
                  "interface": "onError: EventEmitter<any>"
                },
                {
                  "id": "844473d3-dcea-1076-a188-4cbf716f1b95",
                  "type": "interface-option",
                  "head": "onMicrotaskEmpty",
                  "description": "Notifies when there is no more microtasks enqueued in the current VM Turn.\nThis is a hint for Angular to do change detection, which may enqueue more microtasks.\nFor this reason this event can fire multiple times per VM Turn.",
                  "name": "onMicrotaskEmpty",
                  "headId": "onMicrotaskEmpty",
                  "interface": "onMicrotaskEmpty: EventEmitter<any>"
                },
                {
                  "id": "2401e93d-7c2a-0e19-2a08-1f3fe4d52a75",
                  "type": "interface-option",
                  "head": "onStable",
                  "description": "Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\nimplies we are about to relinquish VM turn.\nThis event gets called just once.",
                  "name": "onStable",
                  "headId": "onStable",
                  "interface": "onStable: EventEmitter<any>"
                },
                {
                  "id": "83805282-7878-b0e6-ab31-4caa51e9b956",
                  "type": "interface-option",
                  "head": "onUnstable",
                  "description": "Notifies when code enters Angular Zone. This gets fired first on VM Turn.",
                  "name": "onUnstable",
                  "headId": "onUnstable",
                  "interface": "onUnstable: EventEmitter<any>"
                },
                {
                  "id": "7d654bd0-be36-8db5-33dd-5a5fba6527e6",
                  "type": "interface-option",
                  "head": "run",
                  "description": "Executes the `fn` function synchronously within the Angular zone and returns value returned by\nthe function.\n\nRunning functions via `run` allows you to reenter Angular zone from a task that was executed\noutside of the Angular zone (typically started via {@link #runOutsideAngular}).\n\nAny future tasks or microtasks scheduled from within this function will continue executing from\nwithin the Angular zone.\n\nIf a synchronous error happens it will be rethrown and not reported via `onError`.",
                  "name": "run",
                  "headId": "run",
                  "interface": "run(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T",
                  "showAdditional": true,
                  "additional": "Running functions via `run` allows you to reenter Angular zone from a task that was executed outside of the Angular zone (typically started via `runOutsideAngular`).\n\nAny future tasks or microtasks scheduled from within this function will continue executing from within the Angular zone.\n\nIf a synchronous error happens it will be rethrown and not reported via `onError`."
                },
                {
                  "id": "df540991-1ac3-2a08-4c5b-38b6bb3d8f53",
                  "type": "interface-option",
                  "head": "runGuarded",
                  "description": "Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\nrethrown.",
                  "name": "runGuarded",
                  "headId": "runGuarded",
                  "interface": "runGuarded(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T"
                },
                {
                  "id": "84858152-da55-2d74-bad3-aaf04b0ed460",
                  "type": "interface-option",
                  "head": "runOutsideAngular",
                  "description": "Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\nthe function.\n\nRunning functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\nwork that\ndoesn't trigger Angular change-detection or is subject to Angular's error handling.\n\nAny future tasks or microtasks scheduled from within this function will continue executing from\noutside of the Angular zone.\n\nUse {@link #run} to reenter the Angular zone and do work that updates the application model.",
                  "name": "runOutsideAngular",
                  "headId": "runOutsideAngular",
                  "interface": "runOutsideAngular(fn: (...args: any[]) => T): T",
                  "showAdditional": true,
                  "additional": "Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that doesn't trigger Angular change-detection or is subject to Angular's error handling.\n\nAny future tasks or microtasks scheduled from within this function will continue executing from outside of the Angular zone.\n\nUse `run` to reenter the Angular zone and do work that updates the application model."
                },
                {
                  "id": "fb9e519d-b81a-b575-0cab-6d3316826985",
                  "type": "interface-option",
                  "head": "runTask",
                  "description": "Executes the `fn` function synchronously within the Angular zone as a task and returns value\nreturned by the function.\n\nRunning functions via `run` allows you to reenter Angular zone from a task that was executed\noutside of the Angular zone (typically started via {@link #runOutsideAngular}).\n\nAny future tasks or microtasks scheduled from within this function will continue executing from\nwithin the Angular zone.\n\nIf a synchronous error happens it will be rethrown and not reported via `onError`.",
                  "name": "runTask",
                  "headId": "runTask",
                  "interface": "runTask(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T",
                  "showAdditional": true,
                  "additional": "Running functions via `run` allows you to reenter Angular zone from a task that was executed outside of the Angular zone (typically started via `runOutsideAngular`).\n\nAny future tasks or microtasks scheduled from within this function will continue executing from within the Angular zone.\n\nIf a synchronous error happens it will be rethrown and not reported via `onError`."
                },
                {
                  "id": "1bd561a1-ecda-329a-6ab8-4891ddac06d3",
                  "type": "interface-option",
                  "name": "isInAngularZone",
                  "head": "isInAngularZone",
                  "headId": "isInAngularZone",
                  "interface": "static isInAngularZone(): boolean",
                  "description": ""
                },
                {
                  "id": "317e4e88-a2df-2b76-71f3-98d2fe43e439",
                  "type": "interface-option",
                  "name": "assertInAngularZone",
                  "head": "assertInAngularZone",
                  "headId": "assertInAngularZone",
                  "interface": "static assertInAngularZone(): void",
                  "description": ""
                },
                {
                  "id": "4807d5dc-f721-2630-8f3e-789996e4fdcf",
                  "type": "interface-option",
                  "name": "assertNotInAngularZone",
                  "head": "assertNotInAngularZone",
                  "headId": "assertNotInAngularZone",
                  "interface": "static assertNotInAngularZone(): void",
                  "description": ""
                }
              ],
              "title": "NgZone",
              "url": "ng-zone",
              "generationType": "interface-options",
              "generationFile": "core/src/zone/ng_zone.ts",
              "generationName": "NgZone",
              "generationStartLine": 89,
              "generationEndLine": 233
            },
            {
              "id": "11baf519-b274-048a-6bb6-95d589329a12",
              "entries": [
                {
                  "id": "40e481f0-7c35-8d5f-13ee-36c3c084e393",
                  "type": "text",
                  "text": "The Renderer class is a service that provides an abstraction for UI rendering manipulations. Using it is the recommended approach because it then makes it easier to develop apps that can be rendered in different environments.\n"
                },
                {
                  "id": "7545ef21-ff9c-26b6-c941-422e1ea52a98",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular: Stop manipulating DOM with ElementRef!",
                      "url": "https://medium.com/@kmathy/angular-manipulate-properly-the-dom-with-renderer-16a756508cba",
                      "lang": "en"
                    },
                    {
                      "label": "Using Renderer2 in Angular",
                      "url": "https://alligator.io/angular/using-renderer2/",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "9eeb3ca6-5af4-bdd9-9e35-148a335fa66e",
                  "type": "toc"
                },
                {
                  "id": "cca30cb8-b640-8aa1-bad0-004ae3dc845f",
                  "type": "interface-option",
                  "head": "addClass",
                  "description": "Implement this callback to add a class to an element in the DOM.",
                  "name": "addClass",
                  "headId": "addClass",
                  "interface": "addClass(el: any, name: string): void"
                },
                {
                  "id": "035e3089-b9f4-ecdd-c16d-63424128eb58",
                  "type": "interface-option",
                  "head": "appendChild",
                  "description": "Appends a child to a given parent node in the host element DOM.",
                  "name": "appendChild",
                  "headId": "appendChild",
                  "interface": "appendChild(parent: any, newChild: any): void"
                },
                {
                  "id": "8cef4e23-7982-7bfb-6071-9705124ad239",
                  "type": "interface-option",
                  "head": "createComment",
                  "description": "Implement this callback to add a comment to the DOM of the host element.\n\nReturns The modified element.",
                  "name": "createComment",
                  "headId": "createComment",
                  "interface": "createComment(value: string): any"
                },
                {
                  "id": "9de51ae2-7648-5c56-d37b-04019f2499ab",
                  "type": "interface-option",
                  "head": "createElement",
                  "description": "Implement this callback to create an instance of the host element.\n\nReturns The new element.",
                  "name": "createElement",
                  "headId": "createElement",
                  "interface": "createElement(name: string, namespace?: string|null): any",
                  "showAdditional": true,
                  "additional": "* `name` — an identifying name for the new element, unique within the namespace.\n* `namespace` - the namespace for the new element."
                },
                {
                  "id": "aac5f9bf-77e8-9cb8-4ce2-ef90ef29ee12",
                  "type": "interface-option",
                  "head": "createText",
                  "description": "Implement this callback to add text to the DOM of the host element.\n\nReturns The modified element.",
                  "name": "createText",
                  "headId": "createText",
                  "interface": "createText(value: string): any"
                },
                {
                  "id": "90a6c77c-bf72-c3e3-f73e-c29d4e5a0a74",
                  "type": "interface-option",
                  "name": "data",
                  "head": "data",
                  "headId": "data",
                  "interface": "get data(): {[key: string]: any}",
                  "description": "Use to store arbitrary developer-defined data on a renderer instance,\nas an object containing key-value pairs.\nThis is useful for renderers that delegate to other renderers."
                },
                {
                  "id": "b8bba8c5-0f1a-64f5-d9ab-d930276d7d65",
                  "type": "interface-option",
                  "head": "destroy",
                  "description": "Implement this callback to destroy the renderer or the host element.",
                  "name": "destroy",
                  "headId": "destroy",
                  "interface": "destroy(): void"
                },
                {
                  "id": "453232d3-c8a1-d761-b5cf-3c2014941721",
                  "type": "interface-option",
                  "name": "destroyNode",
                  "head": "destroyNode",
                  "headId": "destroyNode",
                  "interface": "destroyNode: ((node: any) => void)|null",
                  "description": "If null or undefined, the view engine won't call it.\nThis is used as a performance optimization for production mode."
                },
                {
                  "id": "6bc1d546-5031-6ae8-eb86-588782b256d9",
                  "type": "interface-option",
                  "head": "insertBefore",
                  "description": "Implement this callback to insert a child node at a given position in a parent node\nin the host element DOM.",
                  "name": "insertBefore",
                  "headId": "insertBefore",
                  "interface": "insertBefore(parent: any, newChild: any, refChild: any, isMove?: boolean): void",
                  "showAdditional": true,
                  "additional": "* `parent` — the parent node.\n* `newChild` — the new child nodes.\n* `refChild` — the existing child node that should precede the new node."
                },
                {
                  "id": "fddbe8c8-dde4-46c3-7062-b7b839ad2e1f",
                  "type": "interface-option",
                  "head": "listen",
                  "description": "Implement this callback to start an event listener.\n\nReturns An \"unlisten\" function for disposing of this handler.",
                  "name": "listen",
                  "headId": "listen",
                  "interface": "listen(target: 'window'|'document'|'body'|any, eventName: string, callback: (event: any) => boolean | void): () => void",
                  "showAdditional": true,
                  "additional": "* `target` — The context in which to listen for events. Can be the entire window or document, the body of the document, or a specific DOM element.\n\n* `eventName` — The event to listen for.\n\n* `callback` — A handler function to invoke when the event occurs."
                },
                {
                  "id": "90f06618-1885-b3f4-69db-cfb98a05fbe8",
                  "type": "interface-option",
                  "head": "nextSibling",
                  "description": "Implement this callback to get the next sibling node of a given node\nin the host element's DOM.\n\nReturns The sibling node, or null if there is no sibling.\nFor WebWorkers, always returns a value.\nThis is because the check is synchronous,\nand the caller can't rely on checking for null.",
                  "name": "nextSibling",
                  "headId": "nextSibling",
                  "interface": "nextSibling(node: any): any",
                  "showAdditional": true,
                  "additional": "Returns the sibling node, or null if there is no sibling. For WebWorkers, always returns a value. This is because the check is synchronous, and the caller can't rely on checking for null.\n"
                },
                {
                  "id": "63ffd18c-b4a4-d8a7-6a28-76652918a796",
                  "type": "interface-option",
                  "head": "parentNode",
                  "description": "Implement this callback to get the parent of a given node\nin the host element's DOM.\n\nReturns The parent node, or null if there is no parent.\nFor WebWorkers, always returns true.\nThis is because the check is synchronous,\nand the caller can't rely on checking for null.",
                  "name": "parentNode",
                  "headId": "parentNode",
                  "interface": "parentNode(node: any): any",
                  "showAdditional": true,
                  "additional": "Returns the parent node, or null if there is no parent. For WebWorkers, always returns true. This is because the check is synchronous, and the caller can't rely on checking for null."
                },
                {
                  "id": "2397b1a0-f171-cdc2-1c2a-d3cfe49d2fc7",
                  "type": "interface-option",
                  "head": "removeAttribute",
                  "description": "Implement this callback to remove an attribute from an element in the DOM.",
                  "name": "removeAttribute",
                  "headId": "removeAttribute",
                  "interface": "removeAttribute(el: any, name: string, namespace?: string|null): void"
                },
                {
                  "id": "a68c7097-a7c1-84cf-a446-fa5b2dcaddaf",
                  "type": "interface-option",
                  "head": "removeChild",
                  "description": "Implement this callback to remove a child node from the host element's DOM.",
                  "name": "removeChild",
                  "headId": "removeChild",
                  "interface": "removeChild(parent: any, oldChild: any, isHostElement?: boolean): void"
                },
                {
                  "id": "39043a48-0d2a-b1cc-6411-68651930335a",
                  "type": "interface-option",
                  "head": "removeClass",
                  "description": "Implement this callback to remove a class from an element in the DOM.",
                  "name": "removeClass",
                  "headId": "removeClass",
                  "interface": "removeClass(el: any, name: string): void"
                },
                {
                  "id": "c4375191-8f2c-3eee-6df6-abe386c13861",
                  "type": "interface-option",
                  "head": "removeStyle",
                  "description": "Implement this callback to remove the value from a CSS style for an element in the DOM.",
                  "name": "removeStyle",
                  "headId": "removeStyle",
                  "interface": "removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void"
                },
                {
                  "id": "86c107ff-4b92-8245-8f71-9845962063e9",
                  "type": "interface-option",
                  "head": "selectRootElement",
                  "description": "Implement this callback to prepare an element to be bootstrapped\nas a root element, and return the element instance.\n\nReturns The root element.",
                  "name": "selectRootElement",
                  "headId": "selectRootElement",
                  "interface": "selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any"
                },
                {
                  "id": "dae98f4e-b601-9d5e-8d53-2491396b5d96",
                  "type": "interface-option",
                  "head": "setAttribute",
                  "description": "Implement this callback to set an attribute value for an element in the DOM.",
                  "name": "setAttribute",
                  "headId": "setAttribute",
                  "interface": "setAttribute(el: any, name: string, value: string, namespace?: string|null): void",
                  "showAdditional": false
                },
                {
                  "id": "3a361f29-c96a-23cc-6e13-c98951a3d602",
                  "type": "interface-option",
                  "head": "setProperty",
                  "description": "Implement this callback to set the value of a property of an element in the DOM.",
                  "name": "setProperty",
                  "headId": "setProperty",
                  "interface": "setProperty(el: any, name: string, value: any): void"
                },
                {
                  "id": "ae3d1d76-dcf0-d8f6-7082-a54fc5cb1c31",
                  "type": "interface-option",
                  "head": "setStyle",
                  "description": "Implement this callback to set a CSS style for an element in the DOM.",
                  "name": "setStyle",
                  "headId": "setStyle",
                  "interface": "setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void"
                },
                {
                  "id": "e9f83c7c-a16f-9213-fbde-8d500495adae",
                  "type": "interface-option",
                  "head": "setValue",
                  "description": "Implement this callback to set the value of a node in the host element.",
                  "name": "setValue",
                  "headId": "setValue",
                  "interface": "setValue(node: any, value: string): void"
                }
              ],
              "title": "Renderer2",
              "url": "renderer2",
              "generationType": "interface-options",
              "generationFile": "core/src/render/api.ts",
              "generationName": "Renderer2",
              "generationStartLine": 66,
              "generationEndLine": 241
            },
            {
              "id": "8631a258-f7e2-0ea9-1a37-0a749733a6e9",
              "entries": [
                {
                  "id": "1c535630-47af-2c6c-a4b1-66018a3c4ccd",
                  "type": "text",
                  "text": "DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing values to be safe to use in the different DOM contexts."
                },
                {
                  "id": "866af4fd-2fbb-dc43-fab3-265da7539390",
                  "type": "text",
                  "text": "For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on the website.\n\nIn specific situations, it might be necessary to disable sanitization, for example if the application genuinely needs to produce a `javascript:` style link with a dynamic value in it. Users can bypass security by constructing a value with one of the `bypassSecurityTrust...` methods, and then binding to that value from the template.\n\nThese situations should be very rare, and extraordinary care must be taken to avoid creating a Cross Site Scripting (XSS) security bug!\n"
                },
                {
                  "id": "1120f309-baab-c411-2f77-b5821ffcb0c8",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "b5d7721d-65eb-9c6b-0c73-c2ea1d819eb2",
                  "type": "text",
                  "text": "```typescript\nexport class MyComponent {\n  html: SafeHtml;\n\n  constructor(private sanitizer: DomSanitizer) {\n    this.html = sanitizer.bypassSecurityTrustHtml('<h1>DomSanitizer</h1><script>ourSafeCode()</script>') ;\n  }\n}\n```"
                },
                {
                  "id": "affa2577-779a-5f97-8ed1-4cb0551818a0",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Security Guide",
                      "url": "https://angular.io/guide/security",
                      "lang": "en"
                    },
                    {
                      "label": "Angular 2 Security — The DomSanitizer Service",
                      "url": "https://netbasal.com/angular-2-security-the-domsanitizer-service-2202c83bd90",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "2a208307-aaa8-4e9c-66ee-5ca3e940664a",
                  "type": "toc"
                },
                {
                  "id": "94ebbb7b-0259-953a-b77c-6439f4885f92",
                  "type": "interface-option",
                  "head": "bypassSecurityTrustHtml",
                  "description": "Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\nis unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\nleave safe HTML intact, so in most situations this method should not be used.\n\n**WARNING:** calling this method with untrusted user data exposes your application to XSS\nsecurity risks!",
                  "name": "bypassSecurityTrustHtml",
                  "headId": "bypassSecurityTrustHtml",
                  "interface": "bypassSecurityTrustHtml(value: string): SafeHtml",
                  "showAdditional": true,
                  "additional": "**WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!"
                },
                {
                  "id": "fb1f7d9b-144d-d94b-9b41-0281fe7878b8",
                  "type": "interface-option",
                  "head": "bypassSecurityTrustResourceUrl",
                  "description": "Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\nbe used to load executable code from, like `<script src>`, or `<iframe src>`.\n\n**WARNING:** calling this method with untrusted user data exposes your application to XSS\nsecurity risks!",
                  "name": "bypassSecurityTrustResourceUrl",
                  "headId": "bypassSecurityTrustResourceUrl",
                  "interface": "bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl",
                  "showAdditional": true,
                  "additional": "**WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!"
                },
                {
                  "id": "451948b4-d300-7eb4-6874-89399289189b",
                  "type": "interface-option",
                  "head": "bypassSecurityTrustScript",
                  "description": "Bypass security and trust the given value to be safe JavaScript.\n\n**WARNING:** calling this method with untrusted user data exposes your application to XSS\nsecurity risks!",
                  "name": "bypassSecurityTrustScript",
                  "headId": "bypassSecurityTrustScript",
                  "interface": "bypassSecurityTrustScript(value: string): SafeScript",
                  "showAdditional": true,
                  "additional": "**WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!"
                },
                {
                  "id": "9604799c-7ab4-4ede-0b74-11e1d4ab39d4",
                  "type": "interface-option",
                  "head": "bypassSecurityTrustStyle",
                  "description": "Bypass security and trust the given value to be safe style value (CSS).\n\n**WARNING:** calling this method with untrusted user data exposes your application to XSS\nsecurity risks!",
                  "name": "bypassSecurityTrustStyle",
                  "headId": "bypassSecurityTrustStyle",
                  "interface": "bypassSecurityTrustStyle(value: string): SafeStyle",
                  "showAdditional": true,
                  "additional": "**WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!"
                },
                {
                  "id": "cfe2f823-2b2b-95a7-8d85-2b75b3696bbd",
                  "type": "interface-option",
                  "head": "bypassSecurityTrustUrl",
                  "description": "Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\nin hyperlinks or `<img src>`.\n\n**WARNING:** calling this method with untrusted user data exposes your application to XSS\nsecurity risks!",
                  "name": "bypassSecurityTrustUrl",
                  "headId": "bypassSecurityTrustUrl",
                  "interface": "bypassSecurityTrustUrl(value: string): SafeUrl",
                  "showAdditional": true,
                  "additional": "**WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!"
                },
                {
                  "id": "2a199363-c582-5f9d-22f6-0e5281175144",
                  "type": "interface-option",
                  "head": "sanitize",
                  "text": "sanitize() \n",
                  "description": "Sanitizes a value for use in the given SecurityContext.\n\nIf value is trusted for the context, this method will unwrap the contained safe value and use\nit directly. Otherwise, value will be sanitized to be safe in the given context, for example\nby replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\nis responsible to make sure that the value can definitely be safely used in the given context.",
                  "name": "sanitize",
                  "headId": "sanitize",
                  "interface": "sanitize(context: SecurityContext, value: SafeValue|string|null): string|null",
                  "showAdditional": true,
                  "additional": "If value is trusted for the context, this method will unwrap the contained safe value and use it directly. Otherwise, value will be sanitized to be safe in the given context, for example by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation is responsible to make sure that the value can definitely be safely used in the given context.\n"
                }
              ],
              "title": "DomSanitizer",
              "url": "dom-sanitizer",
              "generationType": "interface-options",
              "generationFile": "platform-browser/src/security/dom_sanitization_service.ts",
              "generationName": "DomSanitizer",
              "generationStartLine": 89,
              "generationEndLine": 144
            }
          ],
          "title": "Core",
          "color": "#1fd8e4",
          "url": "core",
          "disabled": false,
          "langs": {
            "en": true
          }
        },
        {
          "id": "4efb0a19-7319-04b8-2a91-fabd3d069e2d",
          "menu": {
            "items": [
              {
                "id": "9bc9180d-93ad-1456-8b92-92284e2035a3",
                "label": "Introduction",
                "url": "intro"
              },
              {
                "id": "90be72d7-8c0e-8faf-044a-5fe7f45ab1d4",
                "sub": {
                  "items": [
                    {
                      "id": "ace4c8fe-b815-0ef3-ffb6-206a942d509b",
                      "label": "Route",
                      "url": "route-interface",
                      "sub": {
                        "items": [
                          {
                            "id": "9883d604-68de-7607-d076-9860b5b8c8c0",
                            "usePageEntries": true,
                            "usePageUrl": "route-interface"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "0db3d0d4-9656-0f2a-2952-122d2277e7cf",
                      "label": "ExtraOptions",
                      "url": "extraoptions-interface",
                      "sub": {
                        "items": [
                          {
                            "id": "52ba06db-7bf0-f576-b9ca-9d7f01bf7ac9",
                            "usePageEntries": true,
                            "usePageUrl": "extraoptions-interface"
                          }
                        ]
                      },
                      "usePageEntries": false,
                      "subActiveOpt": true
                    },
                    {
                      "id": "c9330b33-991b-b36c-af42-9f9b30b2ff57",
                      "label": "CanActivate",
                      "url": "canactivate-interface",
                      "separatedFromTop": true
                    },
                    {
                      "id": "c7d2ac63-81b3-c09b-5f4a-b5b1142fa3fb",
                      "label": "CanActivateChild",
                      "url": "canactivatechild-interface"
                    },
                    {
                      "id": "09f384d8-b398-72e6-63ba-5d3776c8bbe4",
                      "label": "CanDeactivate",
                      "url": "candeactivate-interface"
                    },
                    {
                      "id": "85e8e424-50f6-aaf0-f986-6a32cca740b4",
                      "label": "Resolve",
                      "url": "resolve-interface"
                    },
                    {
                      "id": "2a13a7da-f6b9-5fae-5809-500634c2c911",
                      "label": "CanLoad",
                      "url": "canload-interface"
                    }
                  ]
                },
                "label": "Configuration",
                "url": "configuration",
                "asGroup": true
              },
              {
                "id": "3b888b1d-80a8-3e8f-2749-832a076e918b",
                "label": "Router",
                "separatedFromTop": true,
                "url": "router",
                "sub": {
                  "items": [
                    {
                      "id": "3b4be9f6-aa3e-c2bc-34ec-163ee731dacf",
                      "usePageEntries": true,
                      "usePageUrl": "router"
                    }
                  ]
                },
                "subActiveOpt": true
              },
              {
                "id": "38011a84-4c3f-5b7e-2965-e949cf66d13b",
                "label": "NavigationExtras",
                "url": "navigationextras",
                "subActiveOpt": true,
                "sub": {
                  "items": [
                    {
                      "id": "ead6c189-afe2-046c-e421-79f49ba13d88",
                      "usePageEntries": true,
                      "usePageUrl": "navigationextras"
                    }
                  ]
                }
              },
              {
                "id": "2b2a46ca-2bc1-0dfb-bebb-372063c6f0e3",
                "label": "Events",
                "url": "events"
              },
              {
                "id": "5c2c491e-b981-ebc4-f49a-1ae4b6bed1c4",
                "label": "ActivatedRoute",
                "url": "activatedroute",
                "sub": {
                  "items": [
                    {
                      "id": "66093e45-3b4e-d904-4803-2810edf10d71",
                      "usePageEntries": true,
                      "usePageUrl": "activatedroute"
                    }
                  ]
                },
                "subActiveOpt": true
              },
              {
                "id": "c866a025-6b51-4d63-42bf-4c61bb5e6518",
                "label": "ActivatedRouteSnapshot",
                "url": "activatedroutesnapshot",
                "sub": {
                  "items": [
                    {
                      "id": "c3dcc19d-dfb1-f99c-bbc3-8bf1156a20ca",
                      "usePageEntries": true,
                      "usePageUrl": "activatedroutesnapshot"
                    }
                  ]
                },
                "subActiveOpt": true
              },
              {
                "id": "a3dce050-b780-6739-f6a0-a02a7541fac8",
                "label": "UrlTree",
                "url": "urltree",
                "separatedFromTop": true
              },
              {
                "id": "83c53884-d62d-acc9-8feb-01433b4e2f9c",
                "label": "UrlSegment",
                "url": "urlsegment"
              },
              {
                "id": "5ab95516-9375-7c3a-413a-82717a56bc78",
                "label": "UrlMatcher",
                "url": "urlmatcher"
              },
              {
                "id": "39e2e4de-417e-8715-c894-b1c965489093",
                "label": "Directives",
                "sub": {
                  "items": [
                    {
                      "id": "af98488f-14f7-9787-dca8-bb97b192a0b6",
                      "label": "[routerLink]",
                      "url": "routerlink-directive"
                    },
                    {
                      "id": "e9b59e7b-f2ee-7003-1120-a4ee6540b407",
                      "label": "[routerLinkActive]",
                      "url": "routerlinkactive-directive"
                    },
                    {
                      "id": "d8828ba5-68e5-c27e-e072-2abc2a6b4a34",
                      "label": "<router-outlet>",
                      "url": "router-outlet-directive"
                    }
                  ]
                },
                "asGroup": true,
                "url": ""
              }
            ]
          },
          "pages": [
            {
              "id": "ffa4036b-22b4-9f81-2c49-0f8f5d24d75f",
              "entries": [
                {
                  "id": "11501091-79c4-174e-d282-e212517205f9",
                  "type": "text",
                  "text": "This simple Angular reference for developers describes routing and navigation."
                },
                {
                  "id": "5f4eb566-432d-2f42-35a4-a4a12c23e2d6",
                  "type": "text",
                  "text": "## Additional information\n\nExample of hints and tutorials links. You can switch off these panels in the sidebar."
                },
                {
                  "id": "88dfed7f-4c72-e83b-add9-6a02cb291873",
                  "type": "hint",
                  "text": "Hint with additional explanation. "
                },
                {
                  "id": "84d23d78-b7c5-1926-123b-290c3912325e",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular — Routing & Navigation",
                      "url": "https://angular.io/guide/router",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Introduction",
              "url": "intro"
            },
            {
              "id": "6a00a5ff-b82a-1c02-37ee-3144cdc6f460",
              "entries": [
                {
                  "id": "95b5997d-c887-f011-ad90-4ddb772daaa0",
                  "type": "text",
                  "text": "A routed Angular application has one singleton instance of the `Router` service. When the browser's URL changes, that router looks for a corresponding `Route` from which it can determine the component to display.\n\nPass array of routes to the `RouterModule.forRoot` method in the module imports to configure the router.\n"
                },
                {
                  "id": "f895881c-4fff-2a5d-dd8a-f88e73865cab",
                  "type": "text",
                  "text": "```typescript\nconst appRoutes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'contacts', component: ContactsComponent },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(appRoutes)\n  ],\n  ...\n})\nexport class AppModule { }\n```"
                },
                {
                  "id": "422471ad-b14b-a204-7d7a-cd0115d9257d",
                  "type": "text",
                  "text": "### forChild"
                },
                {
                  "id": "adec0600-cf3a-eb08-241b-d75a97cbb07d",
                  "type": "text",
                  "text": "Only call `RouterModule.forRoot` in the root module. In any other module, you must call the `RouterModule.forChild` method to register additional routes."
                },
                {
                  "id": "a296ebf1-00b2-bc76-0ad2-0c16cf23fdba",
                  "type": "text",
                  "text": "```typescript\nconst blogRoutes: Routes = [\n  { path: 'blog',  component: BlogComponent },\n  { path: 'blog/post/:id', component: BlogPostComponent }\n];\n \n@NgModule({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    RouterModule,\n  ]\n})\nexport class BlogRoutingModule { }\n```\n"
                },
                {
                  "id": "c771eabb-c19b-33a4-4d7a-6fa83799b47c",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular — Routing & Navigation",
                      "url": "https://angular.io/guide/router",
                      "lang": "en"
                    },
                    {
                      "label": "An Introduction to Component Routing with Angular Router",
                      "url": "https://www.sitepoint.com/component-routing-angular-router/",
                      "lang": "en"
                    },
                    {
                      "label": "The Powerful URL Matching Engine of Angular Router",
                      "url": "https://vsavkin.com/the-powerful-url-matching-engine-of-angular-router-775dad593b03",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "Configuration",
              "url": "configuration"
            },
            {
              "id": "259fe330-8bb1-a49f-3473-7b712313c137",
              "entries": [
                {
                  "id": "8e0ca59c-8efd-fe6d-077d-e3fc37758c0a",
                  "type": "text",
                  "text": "`Routes` is an array of route configurations. Pass it to the `RouterModule.forRoot` or `forChild` method in the module imports to configure the router.\n"
                },
                {
                  "id": "658005e2-a458-cc3b-4b65-fd35cfc6ecae",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "f658fb10-1684-e338-59ba-5839d459751d",
                  "type": "text",
                  "text": "```typescript\n...\nRouterModule.forRoot([\n  {\n    path: 'team/:id',\n    component: Team,\n    children: [{\n      path: 'user/:name',\n      component: User,\n    }],\n  },\n]),\n```"
                },
                {
                  "id": "18b80d31-79fa-d87f-2e16-1fffb6891654",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "9e16b637-e470-1cc1-9d53-c5ad2025e0ab",
                  "type": "toc"
                },
                {
                  "id": "365e27d8-191f-19d8-c87d-e6c174ce92c7",
                  "type": "interface-option",
                  "head": "canActivate",
                  "description": "An array of DI tokens used to look up [`CanActivate`](../canactivate-interface) handlers.",
                  "name": "canActivate",
                  "headId": "canActivate",
                  "interface": "canActivate?: any[]"
                },
                {
                  "id": "b19ddbf6-5a94-c23e-a8cf-5f0e8384531c",
                  "type": "interface-option",
                  "head": "canActivateChild",
                  "description": "An array of DI tokens used to look up [`CanActivateChild`](../canactivatechild-interface) handlers.",
                  "name": "canActivateChild",
                  "headId": "canActivateChild",
                  "interface": "canActivateChild?: any[]"
                },
                {
                  "id": "7040329b-8282-8c06-b497-e1f9214cfa8f",
                  "type": "interface-option",
                  "head": "canDeactivate",
                  "description": "An array of DI tokens used to look up [`CanDeactivate`](../candeactivate-interface) handlers.",
                  "name": "canDeactivate",
                  "headId": "canDeactivate",
                  "interface": "canDeactivate?: any[]"
                },
                {
                  "id": "21bc6568-104c-ba54-bdbf-816e577871f8",
                  "type": "interface-option",
                  "head": "canLoad",
                  "description": "An array of DI tokens used to look up [`CanLoad`](../canload-interface) handlers.",
                  "name": "canLoad",
                  "headId": "canLoad",
                  "interface": "canLoad?: any[]"
                },
                {
                  "id": "72077878-a208-73e4-543a-dece6cdc6170",
                  "type": "interface-option",
                  "head": "children",
                  "description": "An array of child route definitions.",
                  "name": "children",
                  "headId": "children",
                  "interface": "children?: Routes"
                },
                {
                  "id": "194041c1-da5b-0589-c240-7d7545f45c5e",
                  "type": "interface-option",
                  "head": "component",
                  "description": "A component type.",
                  "name": "component",
                  "headId": "component",
                  "interface": "component?: Type<any>"
                },
                {
                  "id": "f22a7629-96ae-6bb6-d275-f118b1c9cac8",
                  "type": "interface-option",
                  "head": "data",
                  "description": "Additional data provided to the component via [`ActivatedRoute`](../activatedroute).",
                  "name": "data",
                  "headId": "data",
                  "interface": "data?: Data"
                },
                {
                  "id": "75ecfdc3-e5ad-4345-aaf9-4ea04351bcb0",
                  "type": "interface-option",
                  "head": "loadChildren",
                  "description": "A reference to lazy loaded child routes.",
                  "name": "loadChildren",
                  "headId": "loadChildren",
                  "interface": "loadChildren?: LoadChildren",
                  "tutorialsEntry": {
                    "id": "c09e1015-c7e3-8317-a39e-476f57d4e617",
                    "type": "tutorials",
                    "links": [
                      {
                        "lang": "en",
                        "label": "Angular — Lazy Loading Feature Modules",
                        "url": "https://angular.io/guide/lazy-loading-ngmodules"
                      }
                    ]
                  }
                },
                {
                  "id": "adb0f7ba-b14b-49cf-e60a-0c8be0b39a65",
                  "type": "interface-option",
                  "head": "matcher",
                  "description": "Defines a [custom strategy for path matching](../urlmatcher) and supersedes `path` and `pathMatch`.",
                  "name": "matcher",
                  "headId": "matcher",
                  "interface": "matcher?: UrlMatcher"
                },
                {
                  "id": "23571056-d67c-8c6e-2108-574051ddb3ce",
                  "type": "interface-option",
                  "head": "outlet",
                  "description": "The name of the outlet the component should be placed into.",
                  "name": "outlet",
                  "headId": "outlet",
                  "interface": "outlet?: string",
                  "tutorialsEntry": {
                    "id": "d1ff2467-f801-6ece-b628-ab8480eff608",
                    "type": "tutorials",
                    "links": [
                      {
                        "lang": "en",
                        "label": "Using Auxiliary Routes",
                        "url": "https://angular-2-training-book.rangle.io/handout/routing/aux-routes.html"
                      }
                    ]
                  }
                },
                {
                  "id": "979b7290-2902-e1d9-10c1-c56c5021eb4f",
                  "type": "interface-option",
                  "head": "path",
                  "description": "A string that uses the [route matcher DSL](../urlmatcher).",
                  "name": "path",
                  "headId": "path",
                  "interface": "path?: string"
                },
                {
                  "id": "1411086d-f59a-297e-29db-057d473bac86",
                  "type": "interface-option",
                  "head": "pathMatch",
                  "description": "A string that specifies the matching strategy.",
                  "name": "pathMatch",
                  "headId": "pathMatch",
                  "interface": "pathMatch?: string"
                },
                {
                  "id": "3e1291b0-f9e0-b961-21ab-7ed01c3a5f22",
                  "type": "interface-option",
                  "head": "redirectTo",
                  "description": "The url fragment which will replace the current matched segment.",
                  "name": "redirectTo",
                  "headId": "redirectTo",
                  "interface": "redirectTo?: string",
                  "tutorialsEntry": {
                    "id": "92d3d916-dcbe-d8a8-a98a-968b4798f999",
                    "type": "tutorials",
                    "links": [
                      {
                        "lang": "en",
                        "label": "Angular Router: Understanding Redirects",
                        "url": "https://vsavkin.com/angular-router-understanding-redirects-2826177761fc"
                      }
                    ]
                  }
                },
                {
                  "id": "c6daa3ae-3849-5fd3-7e75-6245a04c4308",
                  "type": "interface-option",
                  "head": "resolve",
                  "description": "A map of DI tokens used to look up [data resolvers](../resolve-interface).",
                  "name": "resolve",
                  "headId": "resolve",
                  "interface": "resolve?: ResolveData",
                  "tutorialsEntry": {
                    "id": "609eb76b-582a-42e8-2ea6-f9e6511cb099",
                    "type": "tutorials",
                    "links": [
                      {
                        "lang": "en",
                        "label": "Resolving route data in Angular by thoughtram",
                        "url": "https://blog.thoughtram.io/angular/2016/10/10/resolving-route-data-in-angular-2.html"
                      },
                      {
                        "lang": "en",
                        "label": "Angular Router: Route Resolvers",
                        "url": "https://alligator.io/angular/route-resolvers/"
                      }
                    ]
                  }
                },
                {
                  "id": "9ceb66e7-8393-c562-70da-ec15ab2fccf1",
                  "type": "interface-option",
                  "head": "runGuardsAndResolvers",
                  "description": "Defines when guards and resolvers will be run. By default they run only when the matrix parameters of the route change. When set to `paramsOrQueryParamsChange` they will also run when query params change. And when set to always, they will run every time.",
                  "name": "runGuardsAndResolvers",
                  "headId": "runGuardsAndResolvers",
                  "interface": "runGuardsAndResolvers?: RunGuardsAndResolvers"
                }
              ],
              "title": "Route interface",
              "url": "route-interface"
            },
            {
              "id": "5ea3b8d3-ff29-6ebd-bbbf-f85bd109addc",
              "entries": [
                {
                  "id": "e9a803b0-58f1-b292-b9c9-5d1dbeec4588",
                  "type": "text",
                  "text": "Represents options to configure the router."
                },
                {
                  "id": "667f2a6c-f6c6-c394-cecb-9df38adc4f56",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "99af5d68-938f-ee0d-6094-b6ba96b64d85",
                  "type": "text",
                  "text": "```typescript\n...\nRouterModule.forRoot([\n  // Routes definition\n], {\n  enableTracing: true,\n}),\n```\n"
                },
                {
                  "id": "83c4543d-5dc7-b717-c04d-0ab2bc670278",
                  "type": "text",
                  "text": "## Options"
                },
                {
                  "id": "8a068255-d7bb-e82f-36c4-9eabe6871364",
                  "type": "toc"
                },
                {
                  "id": "3e2f0c5d-be9d-d2ef-2888-f0189920df25",
                  "type": "interface-option",
                  "head": "enableTracing",
                  "description": "When true, log all internal navigation events to the console.\nUse for debugging.",
                  "interface": "enableTracing?: boolean",
                  "name": "enableTracing",
                  "headId": "enableTracing"
                },
                {
                  "id": "be1a8135-7ee9-c9e0-bfb0-f7b1f554dd6c",
                  "type": "interface-option",
                  "head": "useHash",
                  "description": "When true, enable the location strategy that uses the URL fragment\ninstead of the history API.",
                  "name": "useHash",
                  "headId": "useHash",
                  "interface": "useHash?: boolean"
                },
                {
                  "id": "7d767260-23ee-7c85-a885-cbabf2ccbea4",
                  "type": "interface-option",
                  "head": "initialNavigation",
                  "description": "One of `enabled`, `enabledBlocking`, `enabledNonBlocking` or `disabled`.\nWhen set to `enabled` or `enabledBlocking`, the initial navigation starts before the root\ncomponent is created. The bootstrap is blocked until the initial navigation is complete. This\nvalue is required for [server-side rendering](guide/universal) to work. When set to\n`enabledNonBlocking`, the initial navigation starts after the root component has been created.\nThe bootstrap is not blocked on the completion of the initial navigation. When set to\n`disabled`, the initial navigation is not performed. The location listener is set up before the\nroot component gets created. Use if there is a reason to have more control over when the router\nstarts its initial navigation due to some complex initialization logic.",
                  "interface": "initialNavigation?: InitialNavigation",
                  "name": "initialNavigation",
                  "headId": "initialNavigation"
                },
                {
                  "id": "0b20903e-4aac-c78e-173a-3a743ca8514f",
                  "type": "interface-option",
                  "head": "errorHandler",
                  "description": "A custom error handler for failed navigations.\nIf the handler returns a value, the navigation Promise is resolved with this value.\nIf the handler throws an exception, the navigation Promise is rejected with the exception.",
                  "interface": "errorHandler?: ErrorHandler",
                  "name": "errorHandler",
                  "headId": "errorHandler"
                },
                {
                  "id": "8c63f72e-f94e-5a50-e6bf-860cbd7e4388",
                  "type": "interface-option",
                  "head": "preloadingStrategy",
                  "description": "Configures a preloading strategy.\nOne of `PreloadAllModules` or `NoPreloading` (the default).",
                  "interface": "preloadingStrategy?: any",
                  "name": "preloadingStrategy",
                  "headId": "preloadingStrategy"
                },
                {
                  "id": "06fb63ff-6736-2800-0594-e2c0459270d6",
                  "type": "interface-option",
                  "head": "onSameUrlNavigation",
                  "description": "Define what the router should do if it receives a navigation request to the current URL.\nDefault is `ignore`, which causes the router ignores the navigation.\nThis can disable features such as a \"refresh\" button.\nUse this option to configure the behavior when navigating to the\ncurrent URL. Default is 'ignore'.",
                  "interface": "onSameUrlNavigation?: 'reload'|'ignore'",
                  "name": "onSameUrlNavigation",
                  "headId": "onSameUrlNavigation",
                  "showAdditional": true,
                  "additional": "By default, the router will ignore this navigation. However, this prevents features such as a \"refresh\" button. Use this option to configure the behavior when navigating to the current URL. Default is 'ignore'."
                },
                {
                  "id": "354e0243-7177-c6ab-566a-1751208479f5",
                  "type": "interface-option",
                  "head": "scrollPositionRestoration",
                  "description": "Configures if the scroll position needs to be restored when navigating back.\n\n* 'disabled'- (Default) Does nothing. Scroll position is maintained on navigation.\n* 'top'- Sets the scroll position to x = 0, y = 0 on all navigation.\n* 'enabled'- Restores the previous scroll position on backward navigation, else sets the\nposition to the anchor if one is provided, or sets the scroll position to [0, 0] (forward\nnavigation). This option will be the default in the future.\n\nYou can implement custom scroll restoration behavior by adapting the enabled behavior as\nin the following example.\n\n```typescript\nclass AppModule {\n   constructor(router: Router, viewportScroller: ViewportScroller) {\n     router.events.pipe(\n       filter((e: Event): e is Scroll => e instanceof Scroll)\n     ).subscribe(e => {\n       if (e.position) {\n         // backward navigation\n         viewportScroller.scrollToPosition(e.position);\n       } else if (e.anchor) {\n         // anchor navigation\n         viewportScroller.scrollToAnchor(e.anchor);\n       } else {\n         // forward navigation\n         viewportScroller.scrollToPosition([0, 0]);\n       }\n     });\n   }\n}\n```",
                  "interface": "scrollPositionRestoration?: 'disabled'|'enabled'|'top'",
                  "name": "scrollPositionRestoration",
                  "headId": "scrollPositionRestoration",
                  "showAdditional": true,
                  "additional": "* `disabled` — does nothing (default).\n* `top` — set the scroll position to `0,0`.\n* `enabled` — set the scroll position to the stored position. This option will be the default in the future.\n\nWhen enabled, the router stores and restores scroll positions during navigation. When navigating forward, the scroll position will be set to `[0, 0]`, or to the anchor if one is provided.\n"
                },
                {
                  "id": "350d0a43-8648-889a-c90b-d39990b9b0a3",
                  "type": "interface-option",
                  "head": "anchorScrolling",
                  "description": "When set to 'enabled', scrolls to the anchor element when the URL has a fragment.\nAnchor scrolling is disabled by default.\n\nAnchor scrolling does not happen on 'popstate'. Instead, we restore the position\nthat we stored or scroll to the top.",
                  "interface": "anchorScrolling?: 'disabled'|'enabled'",
                  "name": "anchorScrolling",
                  "headId": "anchorScrolling",
                  "showAdditional": true,
                  "additional": "* `disabled` — does nothing (default).\n* `enabled` — scrolls to the element. This option will be the default in the future.\n\nAnchor scrolling does not happen on `popstate`. Instead, we restore the position that we stored or scroll to the top."
                },
                {
                  "id": "579a07ad-e31f-a282-3caf-09acf17c17a3",
                  "type": "interface-option",
                  "head": "scrollOffset",
                  "description": "Configures the scroll offset the router will use when scrolling to an element.\n\nWhen given a tuple with x and y position value,\nthe router uses that offset each time it scrolls.\nWhen given a function, the router invokes the function every time\nit restores scroll position.",
                  "interface": "scrollOffset?: [number, number]|(() => [number, number])",
                  "name": "scrollOffset",
                  "headId": "scrollOffset",
                  "showAdditional": true,
                  "additional": "When given a tuple with two numbers, the router will always use the numbers. When given a function, the router will invoke the function every time it restores scroll position."
                },
                {
                  "id": "489b4d66-10cb-ac34-888d-cabb6a27737c",
                  "type": "interface-option",
                  "head": "paramsInheritanceStrategy",
                  "description": "Defines how the router merges parameters, data, and resolved data from parent to child\nroutes. By default ('emptyOnly'), inherits parent parameters only for\npath-less or component-less routes.\n\nSet to 'always' to enable unconditional inheritance of parent parameters.\n\nNote that when dealing with matrix parameters, \"parent\" refers to the parent `Route`\nconfig which does not necessarily mean the \"URL segment to the left\". When the `Route` `path`\ncontains multiple segments, the matrix parameters must appear on the last segment. For example,\nmatrix parameters for `{path: 'a/b', component: MyComp}` should appear as `a/b;foo=bar` and not\n`a;foo=bar/b`.",
                  "interface": "paramsInheritanceStrategy?: 'emptyOnly'|'always'",
                  "name": "paramsInheritanceStrategy",
                  "headId": "paramsInheritanceStrategy",
                  "showAdditional": true,
                  "additional": "Available options are:\n\n* `emptyOnly` — the default, only inherits parent params for path-less or component-less routes.\n* `always` — enables unconditional inheritance of parent params."
                },
                {
                  "id": "ff958552-2a60-99c5-a2a1-288dbeb31b9f",
                  "type": "interface-option",
                  "head": "malformedUriErrorHandler",
                  "description": "A custom handler for malformed URI errors. The handler is invoked when `encodedURI` contains\ninvalid character sequences.\nThe default implementation is to redirect to the root URL, dropping\nany path or parameter information. The function takes three parameters:\n\n- `'URIError'` - Error thrown when parsing a bad URL.\n- `'UrlSerializer'` - UrlSerializer that’s configured with the router.\n- `'url'` -  The malformed URL that caused the URIError",
                  "interface": "malformedUriErrorHandler?: (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree",
                  "name": "malformedUriErrorHandler",
                  "headId": "malformedUriErrorHandler",
                  "showAdditional": true,
                  "additional": "The default implementation is to redirect to the root url dropping any path or param info. This function passes three parameters:\n\n* `URIError` — Error thrown when parsing a bad URL\n* `UrlSerializer` — UrlSerializer that’s configured with the router.\n* `url` — The malformed URL that caused the URIError.\n"
                },
                {
                  "id": "0df342c9-69f1-76c3-a0c5-a0a14567c97f",
                  "type": "interface-option",
                  "head": "urlUpdateStrategy",
                  "description": "Defines when the router updates the browser URL. By default ('deferred'),\nupdate after successful navigation.\nSet to 'eager' if prefer to update the URL at the beginning of navigation.\nUpdating the URL early allows you to handle a failure of navigation by\nshowing an error message with the URL that failed.",
                  "interface": "urlUpdateStrategy?: 'deferred'|'eager'",
                  "name": "urlUpdateStrategy",
                  "headId": "urlUpdateStrategy",
                  "showAdditional": true,
                  "additional": "The default behavior is to update after successful navigation. However, some applications may prefer a mode where the URL gets updated at the beginning of navigation. The most common use case would be updating the URL early so if navigation fails, you can show an error message with the URL that failed. Available options are:\n\n* `deferred` — the default, updates the browser URL after navigation has finished.\n* `eager` — updates browser URL at the beginning of navigation."
                },
                {
                  "id": "b3f5e7e1-1997-7b45-d3b5-cc9c31125528",
                  "type": "interface-option",
                  "head": "relativeLinkResolution",
                  "description": "Enables a bug fix that corrects relative link resolution in components with empty paths.\nExample:\n\n```\nconst routes = [\n   {\n     path: '',\n     component: ContainerComponent,\n     children: [\n       { path: 'a', component: AComponent },\n       { path: 'b', component: BComponent },\n     ]\n   }\n];\n```\n\nFrom the `ContainerComponent`, you should be able to navigate to `AComponent` using\nthe following `routerLink`, but it will not work if `relativeLinkResolution` is set\nto `'legacy'`:\n\n`<a [routerLink]=\"['./a']\">Link to A</a>`\n\nHowever, this will work:\n\n`<a [routerLink]=\"['../a']\">Link to A</a>`\n\nIn other words, you're required to use `../` rather than `./` when the relative link\nresolution is set to `'legacy'`.\n\nThe default in v11 is `corrected`.",
                  "interface": "relativeLinkResolution?: 'legacy'|'corrected'",
                  "name": "relativeLinkResolution",
                  "headId": "relativeLinkResolution",
                  "showAdditional": true,
                  "additional": "The current default in v6 is legacy, and this option will be removed in v7 to default to the corrected behavior."
                }
              ],
              "title": "ExtraOptions interface",
              "url": "extraoptions-interface",
              "generationType": "interface-options",
              "generationFile": "router/src/router_module.ts",
              "generationName": "ExtraOptions",
              "generationStartLine": 256,
              "generationEndLine": 430
            },
            {
              "id": "cf30650f-684c-05bd-5321-203588ad4f4f",
              "entries": [
                {
                  "id": "bafbace8-5d2b-9697-935c-0df9ad1f1440",
                  "type": "text",
                  "text": "Interface that a class can implement to be a guard deciding if a route can be activated."
                },
                {
                  "id": "0694ae94-464b-3c8f-65a9-5bbf1ab1a231",
                  "type": "text",
                  "text": "```typescript\ninterface CanActivate {\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n    Observable<boolean|UrlTree>|Promise<boolean|UrlTree>|boolean|UrlTree;\n}\n```"
                },
                {
                  "id": "278f8132-31ea-edad-c69d-8b83bc5801c9",
                  "type": "tutorials",
                  "links": [
                    {
                      "lang": "en",
                      "label": "New in Angular 7.1: Router Updates — Perform Navigation/Redirects from Guards by returning a UrlTree",
                      "url": "https://blog.angularindepth.com/new-in-angular-v7-1-updates-to-the-router-fd67d526ad05"
                    },
                    {
                      "lang": "en",
                      "label": "Better Redirects in Angular Route Guards",
                      "url": "https://juristr.com/blog/2018/11/better-route-guard-redirects/"
                    }
                  ]
                },
                {
                  "id": "c9e8fc60-d1e7-02c2-d5a8-924bf9fd4c77",
                  "type": "text",
                  "text": "#### Example\n"
                },
                {
                  "id": "f729a69e-056c-2140-fa34-0ba245dd0cba",
                  "type": "text",
                  "text": "```typescript\nclass UserToken {}\nclass Permissions {\n  canActivate(user: UserToken, id: string): boolean {\n    return true;\n  }\n}\n \n@Injectable()\nclass CanActivateTeam implements CanActivate {\n  constructor(private permissions: Permissions, private currentUser: UserToken) {}\n \n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean>|Promise<boolean>|boolean {\n    return this.permissions.canActivate(this.currentUser, route.params.id);\n  }\n}\n \n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      {\n        path: 'team/:id',\n        component: TeamCmp,\n        canActivate: [CanActivateTeam]\n      }\n    ])\n  ],\n  providers: [CanActivateTeam, UserToken, Permissions]\n})\nclass AppModule {}\n```"
                },
                {
                  "id": "040d6006-59ae-3daf-b570-c50bae2e4045",
                  "type": "text",
                  "text": "You can alternatively provide a function with the `canActivate` signature:"
                },
                {
                  "id": "2d6cfe1c-28d1-caa8-95cd-e6902c3fe453",
                  "type": "text",
                  "text": "```typescript\n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      {\n        path: 'team/:id',\n        component: TeamCmp,\n        canActivate: ['canActivateTeam']\n      }\n    ])\n  ],\n  providers: [\n    {\n      provide: 'canActivateTeam',\n      useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n    }\n  ]\n})\nclass AppModule {}\n```"
                }
              ],
              "title": "CanActivate interface",
              "url": "canactivate-interface"
            },
            {
              "id": "3795549b-febd-178f-7359-16015f372135",
              "entries": [
                {
                  "id": "5068bca9-fb4e-49f2-d937-71149850c460",
                  "type": "text",
                  "text": "Interface that a class can implement to be a guard deciding if a child route can be activated."
                },
                {
                  "id": "1192c8ea-b02c-43ed-a3f5-469c840d60ae",
                  "type": "text",
                  "text": "```typescript\ninterface CanActivateChild {\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean\n}\n```"
                },
                {
                  "id": "030e6bc2-30d4-ac4a-555c-a5e8f09cbd7f",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "7a24beaf-b221-21dd-7c54-c27e77a7084f",
                  "type": "text",
                  "text": "```typescript\nclass UserToken {}\nclass Permissions {\n  canActivate(user: UserToken, id: string): boolean {\n    return true;\n  }\n}\n \n@Injectable()\nclass CanActivateTeam implements CanActivateChild {\n  constructor(private permissions: Permissions, private currentUser: UserToken) {}\n \n  canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean>|Promise<boolean>|boolean {\n    return this.permissions.canActivate(this.currentUser, route.params.id);\n  }\n}\n \n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      {\n        path: 'root',\n        canActivateChild: [CanActivateTeam],\n        children: [\n          {\n             path: 'team/:id',\n             component: Team\n          }\n        ]\n      }\n    ])\n  ],\n  providers: [CanActivateTeam, UserToken, Permissions]\n})\nclass AppModule {}\n```"
                },
                {
                  "id": "f0e9ce29-251e-5177-2c0f-ff3a4217925e",
                  "type": "text",
                  "text": "You can alternatively provide a function with the `canActivateChild` signature:"
                },
                {
                  "id": "8e5f5541-6bc6-bd73-dc8c-d24a1580aaef",
                  "type": "text",
                  "text": "```typescript\n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      {\n        path: 'root',\n        canActivateChild: ['canActivateTeam'],\n        children: [\n          {\n            path: 'team/:id',\n            component: Team\n          }\n        ]\n      }\n    ])\n  ],\n  providers: [\n    {\n      provide: 'canActivateTeam',\n      useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n    }\n  ]\n})\nclass AppModule {}\n```"
                }
              ],
              "title": "CanActivateChild interface",
              "url": "canactivatechild-interface"
            },
            {
              "id": "ce3e9f85-d837-7c28-3394-93660e171ab2",
              "entries": [
                {
                  "id": "94a2b51a-e1af-472c-8a52-c50ca4c3f3cf",
                  "type": "text",
                  "text": "Interface that a class can implement to be a guard deciding if a route can be deactivated."
                },
                {
                  "id": "55d3d187-c3fe-1426-1ee3-48d0ab513034",
                  "type": "text",
                  "text": "```typescript\ninterface CanDeactivate<T> {\n  canDeactivate(component: T, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState?: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean\n}\n```"
                },
                {
                  "id": "3c0a97b7-c5eb-f3b2-27f4-1aa008e44a88",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "20d1c092-a84c-9dfb-4fdc-f17dd3ae5c0b",
                  "type": "text",
                  "text": "```typescript\nclass UserToken {}\nclass Permissions {\n  canDeactivate(user: UserToken, id: string): boolean {\n    return true;\n  }\n}\n \n@Injectable()\nclass CanDeactivateTeam implements CanDeactivate<TeamComponent> {\n  constructor(private permissions: Permissions, private currentUser: UserToken) {}\n \n  canDeactivate(\n    component: TeamComponent,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState: RouterStateSnapshot\n  ): Observable<boolean>|Promise<boolean>|boolean {\n    return this.permissions.canDeactivate(this.currentUser, route.params.id);\n  }\n}\n \n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      {\n        path: 'team/:id',\n        component: TeamCmp,\n        canDeactivate: [CanDeactivateTeam]\n      }\n    ])\n  ],\n  providers: [CanDeactivateTeam, UserToken, Permissions]\n})\nclass AppModule {}\n```"
                },
                {
                  "id": "1be66991-13b7-2aaf-b9fd-f69223f0f3f6",
                  "type": "text",
                  "text": "You can alternatively provide a function with the `canDeactivate` signature:"
                },
                {
                  "id": "86935bbc-7318-8d72-90d6-b0086ee89180",
                  "type": "text",
                  "text": "```typescript\n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      {\n        path: 'team/:id',\n        component: TeamCmp,\n        canDeactivate: ['canDeactivateTeam']\n      }\n    ])\n  ],\n  providers: [\n    {\n      provide: 'canDeactivateTeam',\n      useValue: (component: TeamComponent, currentRoute: ActivatedRouteSnapshot, currentState:\nRouterStateSnapshot, nextState: RouterStateSnapshot) => true\n    }\n  ]\n})\nclass AppModule {}\n```"
                }
              ],
              "title": "CanDeactivate interface",
              "url": "candeactivate-interface"
            },
            {
              "id": "c26dbe4a-381e-e93f-0448-ece85087ff9e",
              "entries": [
                {
                  "id": "820b923d-b898-85e2-4157-246dd730e910",
                  "type": "text",
                  "text": "Interface that class can implement to be a data provider."
                },
                {
                  "id": "9fa5c0d3-15c7-8e89-bcec-60f700463e09",
                  "type": "text",
                  "text": "```typescript\ninterface Resolve<T> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<T> | Promise<T> | T\n}\n```"
                },
                {
                  "id": "32892269-2f46-80bc-1a4d-6a17ced2d1ef",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Resolving route data in Angular by thoughtram",
                      "url": "https://blog.thoughtram.io/angular/2016/10/10/resolving-route-data-in-angular-2.html",
                      "lang": "en"
                    },
                    {
                      "label": "Angular Router: Route Resolvers",
                      "url": "https://alligator.io/angular/route-resolvers/",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "4c073feb-710d-f1f0-a54f-786d6716334b",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "637e2780-733c-6599-b7bb-05d6f75762b6",
                  "type": "text",
                  "text": "```typescript\nclass Backend {\n  fetchTeam(id: string) {\n    return 'someTeam';\n  }\n}\n \n@Injectable()\nclass TeamResolver implements Resolve<Team> {\n  constructor(private backend: Backend) {}\n \n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<any>|Promise<any>|any {\n    return this.backend.fetchTeam(route.params.id);\n  }\n}\n \n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      {\n        path: 'team/:id',\n        component: TeamCmp,\n        resolve: {\n          team: TeamResolver\n        }\n      }\n    ])\n  ],\n  providers: [TeamResolver]\n})\nclass AppModule {}\n```"
                },
                {
                  "id": "ed4f0703-5122-378f-0518-e5583116a0ae",
                  "type": "text",
                  "text": "You can alternatively provide a function with the `resolve` signature:"
                },
                {
                  "id": "09675de3-919a-f000-c6e7-dc0f14984dc0",
                  "type": "text",
                  "text": "```typescript\n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      {\n        path: 'team/:id',\n        component: TeamCmp,\n        resolve: {\n          team: 'teamResolver'\n        }\n      }\n    ])\n  ],\n  providers: [\n    {\n      provide: 'teamResolver',\n      useValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => 'team'\n    }\n  ]\n})\nclass AppModule {}\n```"
                }
              ],
              "title": "Resolve interface",
              "url": "resolve-interface"
            },
            {
              "id": "34feaca5-5bb3-d1ea-c09b-67eddfe44fd2",
              "entries": [
                {
                  "id": "acba529a-0273-8944-e848-335423c89ebd",
                  "type": "text",
                  "text": "Interface that a class can implement to be a guard deciding if a children can be loaded."
                },
                {
                  "id": "ce6ffa2b-461b-fd3f-1b88-f5e26ecb86fd",
                  "type": "text",
                  "text": "```typescript\ninterface CanLoad {\n  canLoad(route: Route, segments: UrlSegment[]): \n    Observable<boolean>|Promise<boolean>|boolean;\n}\n```"
                },
                {
                  "id": "870d284b-9f3d-b70d-47a7-1cb2ea941fc0",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "9e655086-5d67-0236-42e9-18ddf82720e1",
                  "type": "text",
                  "text": "```typescript\nclass UserToken {}\nclass Permissions {\n  canLoadChildren(user: UserToken, id: string, segments: UrlSegment[]): boolean {\n    return true;\n  }\n}\n\n@Injectable()\nclass CanLoadTeamSection implements CanLoad {\n  constructor(private permissions: Permissions, private currentUser: UserToken) {}\n\n  canLoad(route: Route, segments: UrlSegment[]): Observable<boolean>|Promise<boolean>|boolean {\n    return this.permissions.canLoadChildren(this.currentUser, route, segments);\n  }\n}\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      {\n        path: 'team/:id',\n        component: TeamCmp,\n        loadChildren: 'team.js',\n        canLoad: [CanLoadTeamSection]\n      }\n    ])\n  ],\n  providers: [CanLoadTeamSection, UserToken, Permissions]\n})\nclass AppModule {}\n```"
                },
                {
                  "id": "0dcd781a-ee16-f0d6-9643-b674b93fd3cf",
                  "type": "text",
                  "text": "You can alternatively provide a function with the `canLoad` signature:"
                },
                {
                  "id": "6203ae26-3f3e-b100-fcab-a5d68f413a13",
                  "type": "text",
                  "text": "```typescript\n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      {\n        path: 'team/:id',\n        component: TeamCmp,\n        loadChildren: 'team.js',\n        canLoad: ['canLoadTeamSection']\n      }\n    ])\n  ],\n  providers: [\n    {\n      provide: 'canLoadTeamSection',\n      useValue: (route: Route, segments: UrlSegment[]) => true,\n    }\n  ]\n})\nclass AppModule {}\n```"
                }
              ],
              "title": "CanLoad interface",
              "url": "canload-interface"
            },
            {
              "id": "12ef177f-35ba-cb7c-b108-787f6daff5d3",
              "entries": [
                {
                  "id": "bf587ad8-7759-d210-a551-fb49d6378338",
                  "type": "text",
                  "text": "Provides the navigation and url manipulation capabilities."
                },
                {
                  "id": "525e0caa-c83d-7a03-f03a-c3457be83142",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "c25e19ad-446e-38f3-1a92-62e66f52228e",
                  "type": "text",
                  "text": "Imperative navigation:"
                },
                {
                  "id": "9cd5039e-e970-d380-1e1d-f9c718e51c62",
                  "type": "text",
                  "text": "```typescript\nexport class AppComponent {\n  constructor(private router: Router) {\n  }\n\n  navigateToHome() {\n    this.router.navigate('/home');\n  }\n}\n```\n"
                },
                {
                  "id": "05b413e0-65c9-fa74-5bb2-c0549ee8748c",
                  "type": "text",
                  "text": "## Interface"
                },
                {
                  "id": "40729049-a8fd-25bb-a906-db2c4c4a6482",
                  "type": "toc"
                },
                {
                  "id": "5b0dc9c1-3d7f-88df-f5e3-2aca5951dfdb",
                  "type": "interface-option",
                  "head": "config",
                  "description": "[Routes configuration](../route-interface).",
                  "name": "config",
                  "headId": "config",
                  "interface": "config: Routes"
                },
                {
                  "id": "c5eba1ca-2ac8-02df-9f82-6d5d837432d7",
                  "type": "interface-option",
                  "head": "createUrlTree",
                  "description": "Appends URL segments to the current URL tree to create a new URL tree.\n\nReturns The new URL tree.\n\n```\n// create /team/33/user/11\nrouter.createUrlTree(['/team', 33, 'user', 11]);\n\n// create /team/33;expand=true/user/11\nrouter.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n\n// you can collapse static segments like this (this works only with the first passed-in value):\nrouter.createUrlTree(['/team/33/user', userId]);\n\n// If the first segment can contain slashes, and you do not want the router to split it,\n// you can do the following:\nrouter.createUrlTree([{segmentPath: '/one/two'}]);\n\n// create /team/33/(user/11//right:chat)\nrouter.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n\n// remove the right secondary node\nrouter.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n\n// assuming the current url is `/team/33/user/11` and the route points to `user/11`\n\n// navigate to /team/33/user/11/details\nrouter.createUrlTree(['details'], {relativeTo: route});\n\n// navigate to /team/33/user/22\nrouter.createUrlTree(['../22'], {relativeTo: route});\n\n// navigate to /team/44/user/22\nrouter.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n\nNote that a value of `null` or `undefined` for `relativeTo` indicates that the\ntree should be created relative to the root.\n```",
                  "interface": "createUrlTree(commands: any[], navigationExtras: UrlCreationOptions = {}): UrlTree",
                  "name": "createUrlTree",
                  "headId": "createUrlTree"
                },
                {
                  "id": "6d449d67-ab8e-e0a6-b082-2adb7afb87f1",
                  "type": "interface-option",
                  "head": "dispose",
                  "description": "Disposes of the router. ",
                  "interface": "dispose(): void",
                  "name": "dispose",
                  "headId": "dispose"
                },
                {
                  "id": "ba98a086-b473-f09e-b925-6d547dedfb05",
                  "type": "interface-option",
                  "head": "errorHandler",
                  "description": "A handler for navigation errors in this NgModule.",
                  "interface": "errorHandler: ErrorHandler",
                  "name": "errorHandler",
                  "headId": "errorHandler"
                },
                {
                  "id": "fddfed72-c594-33b7-447f-001d7980b31a",
                  "type": "interface-option",
                  "head": "events",
                  "description": "An event stream for routing events in this NgModule.",
                  "interface": "events: Observable<Event>",
                  "name": "events",
                  "headId": "events"
                },
                {
                  "id": "6947af46-13c1-e143-3d32-e29fba72a200",
                  "type": "interface-option",
                  "name": "getCurrentNavigation",
                  "head": "getCurrentNavigation",
                  "headId": "getCurrentNavigation",
                  "interface": "getCurrentNavigation(): Navigation|null",
                  "description": "Returns the current `Navigation` object when the router is navigating,\nand `null` when idle."
                },
                {
                  "id": "0d46437d-3eef-a01e-6218-bd8087c2561b",
                  "type": "interface-option",
                  "head": "initialNavigation",
                  "description": "Sets up the location change listener and performs the initial navigation.",
                  "interface": "initialNavigation(): void",
                  "name": "initialNavigation",
                  "headId": "initialNavigation"
                },
                {
                  "id": "01366334-1a14-9b22-3507-9b9efc6bccfb",
                  "type": "interface-option",
                  "head": "isActive",
                  "description": "",
                  "interface": "isActive(url: string|UrlTree, matchOptions: boolean|IsActiveMatchOptions): boolean",
                  "name": "isActive",
                  "headId": "isActive"
                },
                {
                  "id": "68acd81f-0ce4-ffbc-8fc8-1841d7c176c8",
                  "type": "interface-option",
                  "head": "malformedUriErrorHandler",
                  "description": "A handler for errors thrown by `Router.parseUrl(url)`\nwhen `url` contains an invalid character.\nThe most common case is a `%` sign\nthat's not encoded and is not part of a percent encoded sequence.",
                  "interface": "malformedUriErrorHandler: (error: URIError, urlSerializer: UrlSerializer,\n       url: string) => UrlTree",
                  "name": "malformedUriErrorHandler",
                  "headId": "malformedUriErrorHandler"
                },
                {
                  "id": "0407f3c2-b964-522b-d874-6d244da90bf3",
                  "type": "interface-option",
                  "head": "navigate",
                  "description": "Navigate based on the provided array of commands and a starting point.\nIf no starting route is provided, the navigation is absolute.\n\nReturns A Promise that resolves to `true` when navigation succeeds, to `false` when navigation\nfails,\nor is rejected on error.\n\nThe following calls request navigation to a dynamic route path relative to the current URL.\n\n```\nrouter.navigate(['team', 33, 'user', 11], {relativeTo: route});\n\n// Navigate without updating the URL, overriding the default behavior\nrouter.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n```",
                  "interface": "navigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}): Promise<boolean>",
                  "name": "navigate",
                  "headId": "navigate",
                  "showAdditional": true,
                  "additional": "Returns a `Promise` that:\n\n* resolves to `true` when navigation succeeds,\n* resolves to `false` when navigation fails,\n* is rejected when an error happens.\n\n#### Example\n\n```typescript\nrouter.navigate(['team', 33, 'user', 11], {relativeTo: route});\n\n// Navigate without updating the URL\nrouter.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n```\n\nThe first parameter of `navigate()` is a delta to be applied to the current URL or the one provided in the `relativeTo` property of the second parameter (the [NavigationExtras](../navigationextras))."
                },
                {
                  "id": "6a479b08-707e-18f1-3aed-e085e38e333e",
                  "type": "interface-option",
                  "head": "navigateByUrl",
                  "description": "Navigates to a view using an absolute route path.\n\nReturns A Promise that resolves to 'true' when navigation succeeds,\nto 'false' when navigation fails, or is rejected on error.\n\nThe following calls request navigation to an absolute path.\n\n```\nrouter.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n```",
                  "interface": "navigateByUrl(url: string|UrlTree, extras: NavigationBehaviorOptions = {\n    skipLocationChange: false\n  }): Promise<boolean>",
                  "name": "navigateByUrl",
                  "headId": "navigateByUrl",
                  "showAdditional": true,
                  "additional": "Returns a `Promise` that:\n\n* resolves to `true` when navigation succeeds,\n* resolves to `false` when navigation fails,\n* is rejected when an error happens.\n\n#### Example\n\n```typescript\nrouter.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n```\n\nSince `navigateByUrl()` takes an absolute URL as the first parameter, it will not apply any delta to the current URL and ignores any properties in the second parameter (the [`NavigationExtras`](../extraoptions-interface) that would change the provided URL."
                },
                {
                  "id": "49c8536a-c2c6-241e-5722-43f6f1715d58",
                  "type": "interface-option",
                  "head": "navigated",
                  "description": "True if at least one navigation event has occurred,\nfalse otherwise.",
                  "interface": "navigated: boolean",
                  "name": "navigated",
                  "headId": "navigated"
                },
                {
                  "id": "866f71bd-ef19-cc94-f8b6-cbc068fcbab8",
                  "type": "interface-option",
                  "head": "onSameUrlNavigation",
                  "description": "How to handle a navigation request to the current URL. One of:\n\n- `'ignore'` :  The router ignores the request.\n- `'reload'` : The router reloads the URL. Use to implement a \"refresh\" feature.\n\nNote that this only configures whether the Route reprocesses the URL and triggers related\naction and events like redirects, guards, and resolvers. By default, the router re-uses a\ncomponent instance when it re-navigates to the same component type without visiting a different\ncomponent first. This behavior is configured by the `RouteReuseStrategy`. In order to reload\nrouted components on same url navigation, you need to set `onSameUrlNavigation` to `'reload'`\n_and_ provide a `RouteReuseStrategy` which returns `false` for `shouldReuseRoute`.",
                  "interface": "onSameUrlNavigation: 'reload'|'ignore'",
                  "name": "onSameUrlNavigation",
                  "headId": "onSameUrlNavigation"
                },
                {
                  "id": "800c9b75-f740-f834-ccca-0fb37f2ae77b",
                  "type": "interface-option",
                  "head": "paramsInheritanceStrategy",
                  "description": "How to merge parameters, data, and resolved data from parent to child\nroutes. One of:\n\n- `'emptyOnly'` : Inherit parent parameters, data, and resolved data\nfor path-less or component-less routes.\n- `'always'` : Inherit parent parameters, data, and resolved data\nfor all child routes.",
                  "interface": "paramsInheritanceStrategy: 'emptyOnly'|'always'",
                  "name": "paramsInheritanceStrategy",
                  "headId": "paramsInheritanceStrategy"
                },
                {
                  "id": "07e647a9-8d40-b75c-bf8d-dede5d26e80b",
                  "type": "interface-option",
                  "head": "parseUrl",
                  "description": "Parses a string into a `UrlTree` ",
                  "interface": "parseUrl(url: string): UrlTree",
                  "name": "parseUrl",
                  "headId": "parseUrl"
                },
                {
                  "id": "d4c992f3-0186-022f-00b1-0a64d0314b1f",
                  "type": "interface-option",
                  "name": "relativeLinkResolution",
                  "head": "relativeLinkResolution",
                  "headId": "relativeLinkResolution",
                  "interface": "relativeLinkResolution: 'legacy'|'corrected'",
                  "description": "Enables a bug fix that corrects relative link resolution in components with empty paths."
                },
                {
                  "id": "12d71a6f-f03f-98cb-6865-cb9120b92a3d",
                  "type": "interface-option",
                  "head": "resetConfig",
                  "description": "Resets the route configuration used for navigation and generating links.\n\n```\nrouter.resetConfig([\n  { path: 'team/:id', component: TeamCmp, children: [\n    { path: 'simple', component: SimpleCmp },\n    { path: 'user/:name', component: UserCmp }\n  ]}\n]);\n```",
                  "interface": "resetConfig(config: Routes): void",
                  "name": "resetConfig",
                  "headId": "resetConfig"
                },
                {
                  "id": "d0a726fd-0a9f-bfd5-a144-553332482aeb",
                  "type": "interface-option",
                  "head": "routeReuseStrategy",
                  "description": "A strategy for re-using routes.",
                  "interface": "routeReuseStrategy: RouteReuseStrategy",
                  "name": "routeReuseStrategy",
                  "headId": "routeReuseStrategy"
                },
                {
                  "id": "485c9c80-70bb-528f-0280-d65373b598d3",
                  "type": "interface-option",
                  "head": "routerState",
                  "description": "The current state of routing in this NgModule.",
                  "interface": "routerState: RouterState",
                  "name": "routerState",
                  "headId": "routerState"
                },
                {
                  "id": "75615030-9689-0e31-3244-68f81f9ee3a1",
                  "type": "interface-option",
                  "head": "serializeUrl",
                  "description": "Serializes a `UrlTree` into a string ",
                  "interface": "serializeUrl(url: UrlTree): string",
                  "name": "serializeUrl",
                  "headId": "serializeUrl"
                },
                {
                  "id": "23848abe-7e2c-74eb-1897-bd8def3aac35",
                  "type": "interface-option",
                  "head": "setUpLocationChangeListener",
                  "description": "Sets up the location change listener. This listener detects navigations triggered from outside\nthe Router (the browser back/forward buttons, for example) and schedules a corresponding Router\nnavigation so that the correct events, guards, etc. are triggered.",
                  "interface": "setUpLocationChangeListener(): void",
                  "name": "setUpLocationChangeListener",
                  "headId": "setUpLocationChangeListener"
                },
                {
                  "id": "68bb5a94-4f3d-d6d6-3242-81269c1b1f04",
                  "type": "interface-option",
                  "head": "url",
                  "description": "The current URL. ",
                  "interface": "get url(): string",
                  "name": "url",
                  "headId": "url"
                },
                {
                  "id": "8acd6ebf-6acd-b1ce-c605-8cf4bcf7815b",
                  "type": "interface-option",
                  "head": "urlHandlingStrategy",
                  "description": "A strategy for extracting and merging URLs.\nUsed for AngularJS to Angular migrations.",
                  "interface": "urlHandlingStrategy: UrlHandlingStrategy",
                  "name": "urlHandlingStrategy",
                  "headId": "urlHandlingStrategy"
                },
                {
                  "id": "f3ef8051-855b-9580-226a-cd15fd7ddcef",
                  "type": "interface-option",
                  "head": "urlUpdateStrategy",
                  "description": "Determines when the router updates the browser URL.\nBy default (`\"deferred\"`), updates the browser URL after navigation has finished.\nSet to `'eager'` to update the browser URL at the beginning of navigation.\nYou can choose to update early so that, if navigation fails,\nyou can show an error message with the URL that failed.",
                  "interface": "urlUpdateStrategy: 'deferred'|'eager'",
                  "name": "urlUpdateStrategy",
                  "headId": "urlUpdateStrategy"
                }
              ],
              "title": "Router",
              "url": "router",
              "generationType": "interface-options",
              "generationFile": "router/src/router.ts",
              "generationName": "Router",
              "generationStartLine": 400,
              "generationEndLine": 1484
            },
            {
              "id": "c9e70793-1acd-f124-03c1-150f8f918b4d",
              "entries": [
                {
                  "id": "0849746f-4c1d-3d96-236b-e100a488e844",
                  "type": "text",
                  "text": "Represents the extra options used during navigation.\n"
                },
                {
                  "id": "cbacaccd-bed7-62ae-a797-e26efb189f8d",
                  "type": "text",
                  "text": "## Properties"
                },
                {
                  "id": "c25b2068-5d33-7212-0281-1e0ec07c9896",
                  "type": "toc"
                },
                {
                  "id": "6dd2334a-bb11-a6c4-1f68-c3add397c3d9",
                  "type": "interface-option",
                  "name": "fragment",
                  "head": "fragment",
                  "headId": "fragment",
                  "interface": "fragment?: string",
                  "description": "Sets the hash fragment for the URL.",
                  "showAdditional": true,
                  "additional": "```\n// Navigate to /results#top\nthis.router.navigate(['/results'], { fragment: 'top' });\n```"
                },
                {
                  "id": "19a3244c-c442-753d-6dc2-c86b3627cfcc",
                  "type": "interface-option",
                  "name": "preserveFragment",
                  "head": "preserveFragment",
                  "headId": "preserveFragment",
                  "interface": "preserveFragment?: boolean",
                  "description": "Preserves the fragment for the next navigation.",
                  "showAdditional": true,
                  "additional": "```\n// Preserve fragment from /results#top to /view#top\nthis.router.navigate(['/view'], { preserveFragment: true });\n```"
                },
                {
                  "id": "97b0929c-87d4-c511-0783-a1399da68e2d",
                  "type": "interface-option",
                  "name": "preserveQueryParams",
                  "head": "preserveQueryParams",
                  "headId": "preserveQueryParams",
                  "interface": "preserveQueryParams?: boolean",
                  "description": "Preserves the query parameters for the next navigation.\n\nDeprecated, use `queryParamsHandling` instead."
                },
                {
                  "id": "9e7a7be6-3246-5535-e7c6-df2df8fa58ae",
                  "type": "interface-option",
                  "name": "queryParams",
                  "head": "queryParams",
                  "headId": "queryParams",
                  "interface": "queryParams?: Params|null",
                  "description": "Sets query parameters to the URL.\n",
                  "showAdditional": true,
                  "additional": "```\n// Navigate to /results?page=1\nthis.router.navigate(['/results'], { queryParams: { page: 1 } });\n```"
                },
                {
                  "id": "7f2be572-5398-80b0-8573-757a98fc86aa",
                  "type": "interface-option",
                  "name": "queryParamsHandling",
                  "head": "queryParamsHandling",
                  "headId": "queryParamsHandling",
                  "interface": "queryParamsHandling?: QueryParamsHandling|null",
                  "description": "Config strategy to handle the query parameters for the next navigation.\n",
                  "showAdditional": true,
                  "additional": "```\n// from /results?page=1 to /view?page=1&page=2\nthis.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n```"
                },
                {
                  "id": "3873a85a-d10b-2065-6b39-31c676a87036",
                  "type": "interface-option",
                  "name": "relativeTo",
                  "head": "relativeTo",
                  "headId": "relativeTo",
                  "interface": "relativeTo?: ActivatedRoute|null",
                  "description": "Enables relative navigation from the current ActivatedRoute.\n",
                  "showAdditional": true,
                  "additional": "\nConfiguration:\n\n```\n[{\n  path: 'parent',\n  component: ParentComponent,\n  children: [{\n    path: 'list',\n    component: ListComponent\n  },{\n    path: 'child',\n    component: ChildComponent\n  }]\n}]\n```\n\nNavigate to list route from child route:\n\n```\n @Component({...})\n class ChildComponent {\n  constructor(private router: Router, private route: ActivatedRoute) {}\n\n  go() {\n    this.router.navigate(['../list'], { relativeTo: this.route });\n  }\n}\n```"
                },
                {
                  "id": "f37cb5dc-eefc-f550-3415-04f70b56922d",
                  "type": "interface-option",
                  "name": "replaceUrl",
                  "head": "replaceUrl",
                  "headId": "replaceUrl",
                  "interface": "replaceUrl?: boolean",
                  "description": "Navigates while replacing the current state in history.\n",
                  "showAdditional": true,
                  "additional": "```\n// Navigate to /view\nthis.router.navigate(['/view'], { replaceUrl: true });\n```"
                },
                {
                  "id": "9c2685b6-1fe0-99f7-b3e2-6384a944aacc",
                  "type": "interface-option",
                  "name": "skipLocationChange",
                  "head": "skipLocationChange",
                  "headId": "skipLocationChange",
                  "interface": "skipLocationChange?: boolean",
                  "description": "Navigates without pushing a new state into history.\n",
                  "showAdditional": true,
                  "additional": "```\n// Navigate silently to /view\nthis.router.navigate(['/view'], { skipLocationChange: true });\n```"
                },
                {
                  "id": "addb46cb-6278-d343-5415-dba96df00f40",
                  "type": "interface-option",
                  "name": "state",
                  "head": "state",
                  "headId": "state",
                  "interface": "state?: {[k: string]: any}",
                  "description": "State passed to any navigation.",
                  "showAdditional": true,
                  "additional": "This value will be accessible through the `extras` object\nreturned from `router.getCurrentNavigation()` while a navigation is executing. Once a\nnavigation completes, this value will be written to `history.state` when the `location.go`\nor `location.replaceState` method is called before activating of this route. Note that\n`history.state` will not pass an object equality test because the `navigationId` will be\nadded to the state before being written.\n\nWhile `history.state` can accept any type of value, because the router adds the `navigationId`\non each navigation, the `state` must always be an object."
                }
              ],
              "title": "NavigationExtras\n",
              "url": "navigationextras",
              "generationType": "interface-options",
              "generationFile": "router/src/router.ts",
              "generationName": "NavigationExtras",
              "generationStartLine": 213,
              "generationEndLine": 213
            },
            {
              "id": "19b8edde-421a-5743-68c8-f1fb4ab8f8db",
              "entries": [
                {
                  "id": "9eff8c12-9a51-57a5-fa11-443646fa9e0d",
                  "type": "text",
                  "text": "During each navigation, the `Router` emits navigation events through the `Router.events` property. These events range from when the navigation starts and ends to many points in between."
                },
                {
                  "id": "bce7dde9-8f89-f9da-4f9a-a6c569bb247d",
                  "type": "text",
                  "text": "* `NavigationStart` — An event triggered when navigation starts.\n* `RouteConfigLoadStart` — An event triggered before the Router lazy loads a route configuration.\n* `RouteConfigLoadEnd` — An event triggered after a route has been lazy loaded.\n* `RoutesRecognized` — An event triggered when the Router parses the URL and the routes are recognized.\n* `GuardsCheckStart` — An event triggered when the Router begins the Guards phase of routing.\n* `ChildActivationStart` — An event triggered when the Router begins activating a route's children.\n* `ActivationStart` — An event triggered when the Router begins activating a route.\n* `GuardsCheckEnd` — An event triggered when the Router finishes the Guards phase of routing successfully.\n* `ResolveStart` — An event triggered when the Router begins the Resolve phase of routing.\n* `ResolveEnd` — An event triggered when the Router finishes the Resolve phase of routing successfuly.\n* `ChildActivationEnd` — An event triggered when the Router finishes activating a route's children.\n* `ActivationEnd` — An event triggered when the Router finishes activating a route.\n* `NavigationEnd` — An event triggered when navigation ends successfully.\n* `NavigationCancel` — An event triggered when navigation is canceled. This is due to a Route Guard returning false during navigation.\n* `NavigationError` — An event triggered when navigation fails due to an unexpected error.\n* `Scroll` —  An event that represents a scrolling event."
                },
                {
                  "id": "72f5a3ae-1e0f-6fd3-cf38-429ef1058bf7",
                  "type": "text",
                  "text": "#### Example\n\n\n"
                },
                {
                  "id": "cd0f4f0a-d39a-0df6-86d3-a55b2c13aa26",
                  "type": "text",
                  "text": "Subscribe on `NavigationEnd` event:"
                },
                {
                  "id": "e4052397-c26e-20fb-1b63-5a7d5f113570",
                  "type": "text",
                  "text": "```typescript\nexport class AppComponent {\n  constructor(private router: Router) {\n  }\n\n  ngOnInit() {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => {\n        ...\n      });\n    }\n  }\n```"
                }
              ],
              "title": "Events",
              "url": "events"
            },
            {
              "id": "a64c011b-9960-955d-1a88-54c3a2298972",
              "entries": [
                {
                  "id": "83290014-db38-50b6-0717-b77562a5cf4a",
                  "type": "text",
                  "text": "Represents the parsed URL.\n\nSince a router state is a tree, and the URL is nothing but a serialized state, the URL is a\nserialized tree.\n\n`UrlTree` is a data structure that provides a lot of affordances in dealing with URLs."
                },
                {
                  "id": "d9abf1a8-68fb-fcb7-b333-aa506d2bdb6c",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "9e7d41fd-f812-a345-a00d-4bb5b14aa761",
                  "type": "text",
                  "text": "```typescript\n@Component({templateUrl:'template.html'})\nclass MyComponent {\n  constructor(router: Router) {\n    const tree: UrlTree =\n      router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n    const f = tree.fragment; // return 'fragment'\n    const q = tree.queryParams; // returns {debug: 'true'}\n    const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n    const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n    g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n    g.children['support'].segments; // return 1 segment 'help'\n  }\n}\n```"
                }
              ],
              "title": "UrlTree",
              "url": "urltree"
            },
            {
              "id": "3551861a-0fcf-dc05-dd75-3ba1afb07174",
              "entries": [
                {
                  "id": "a9ca3039-903b-81dd-a4a5-6360f3bc616a",
                  "type": "text",
                  "text": "Represents a single URL segment.\n\nA `UrlSegment` is a part of a URL between the two slashes. It contains a path and the matrix\nparameters associated with the segment."
                },
                {
                  "id": "fdfb6498-94df-8524-20b5-1761514aef29",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "9d817103-ab30-c51e-3160-02073570cca2",
                  "type": "text",
                  "text": "```typescript\n@Component({templateUrl:'template.html'})\nclass MyComponent {\n  constructor(router: Router) {\n    const tree: UrlTree = router.parseUrl('/team;id=33');\n    const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n    const s: UrlSegment[] = g.segments;\n    s[0].path; // returns 'team'\n    s[0].parameters; // returns {id: 33}\n  }\n}\n```"
                }
              ],
              "title": "UrlSegment",
              "url": "urlsegment"
            },
            {
              "id": "04bd79cb-1299-ec9d-2e02-1913eae7eb3a",
              "entries": [
                {
                  "id": "41a4ae8f-8910-8e04-f7ae-1f6fad8ab9d1",
                  "type": "text",
                  "text": "Router uses `UrlMatcher` to decide that `Route.path` from configuration is fit to a current navigation URL. Router splits `url` to [segments](../urlsegment) and calls `UrlMatcher` function.\n\n\n\n\n"
                },
                {
                  "id": "6bc14f5e-a6a9-0941-559a-9500b0175f92",
                  "type": "text",
                  "text": "```typescript\ntype UrlMatcher = (segments: UrlSegment[], group: UrlSegmentGroup, route: Route) => UrlMatchResult;\n```"
                },
                {
                  "id": "4f6d9cf5-67ed-49c3-b6a9-c1f2cb0a1986",
                  "type": "text",
                  "text": "A custom URL matcher can be provided when a combination of `path` and `pathMatch` isn't expressive enough.\n\nFor instance, the following matcher matches html files."
                },
                {
                  "id": "1b3c1c0c-0bc4-33fa-9cba-5d874d62db63",
                  "type": "text",
                  "text": "```typescript\nexport function htmlFiles(url: UrlSegment[]) {\n  return url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;\n}\n\nexport const routes = [{ matcher: htmlFiles, component: AnyComponent }];\n```"
                },
                {
                  "id": "e7dde42a-7d13-8165-8653-2ec444b817c9",
                  "type": "text",
                  "text": "## defaultUrlMatcher\n\nIf `Route.urlMatcher` is not defined, will be used `defaultUrlMatcher`. \n\n`defaultUrlMatcher` splits `path` to segments usign delimeter `/`. If segment starts from `:` it marks as parameter with the same name (except `:` at beginning)."
                },
                {
                  "id": "f798aae3-8ab4-637b-1657-1571d499656c",
                  "type": "text",
                  "text": "| Path | URL |\n|---|---|\n| `blog` | /blog |\n| `blog/post` | /blog/post |\n| `blog/post/:id` | /blog/post/123 |\n"
                },
                {
                  "id": "1b9d13ed-e174-a87c-49fb-d2ef661c5a5a",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "The Powerful URL Matching Engine of Angular Router",
                      "url": "https://vsavkin.com/the-powerful-url-matching-engine-of-angular-router-775dad593b03",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "UrlMatcher",
              "url": "urlmatcher"
            },
            {
              "id": "64a21c90-ee95-6f01-c2d0-5761162357c9",
              "entries": [
                {
                  "id": "3db82e7e-5aba-b8b7-151f-85cd3de886b8",
                  "type": "text",
                  "text": "Contains the information about a route associated with a component loaded in an outlet. An `ActivatedRoute` can also be used to traverse the router state tree."
                },
                {
                  "id": "ea77c04d-1a76-756e-fcd4-78adee4f4750",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "5d6a452c-fd8a-75a7-3ea1-6c1a99bdda36",
                  "type": "text",
                  "text": "```typescript\n@Component({...})\nclass MyComponent {\n  constructor(route: ActivatedRoute) {\n    const id: Observable<string> = route.params.map(p => p.id);\n    const url: Observable<string> = route.url.map(segments => segments.join(''));\n    // route.data includes both `data` and `resolve`\n    const user = route.data.map(d => d.user);\n  }\n}\n```"
                },
                {
                  "id": "bafe78a0-de43-45d8-b8ce-3557bc32fb05",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Router: Understanding Router State",
                      "url": "https://vsavkin.com/angular-router-understanding-router-state-7b5b95a12eab",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "f10730d0-3352-5712-dcd8-e2c3d1dbe78a",
                  "type": "text",
                  "text": "## Properties"
                },
                {
                  "id": "4ee499be-af40-4791-53a1-ade46e9a7ffd",
                  "type": "toc"
                },
                {
                  "id": "c3c9604a-d2f1-29d2-4f1c-6a13c53c3629",
                  "type": "interface-option",
                  "head": "children",
                  "description": "The children of this route in the router state tree. ",
                  "interface": "get children(): ActivatedRoute[]",
                  "name": "children",
                  "headId": "children"
                },
                {
                  "id": "d035c588-3f07-b4d0-8c59-2dcaaa18b665",
                  "type": "interface-option",
                  "head": "component",
                  "description": "The component of the route.",
                  "interface": "component: Type<any> | string | null",
                  "name": "component",
                  "headId": "component"
                },
                {
                  "id": "9b6db128-5eef-641d-8365-8d1572e5ab05",
                  "type": "interface-option",
                  "head": "data",
                  "description": "An observable of the static and resolved data of this route.",
                  "interface": "data: Observable<Data>",
                  "name": "data",
                  "headId": "data"
                },
                {
                  "id": "aebd0d28-276c-bd1c-7604-b985e64bde33",
                  "type": "interface-option",
                  "head": "firstChild",
                  "description": "The first child of this route in the router state tree. ",
                  "interface": "get firstChild(): ActivatedRoute|null",
                  "name": "firstChild",
                  "headId": "firstChild"
                },
                {
                  "id": "5c4e34c6-4900-f4e3-aa45-cf37d5ede01c",
                  "type": "interface-option",
                  "head": "fragment",
                  "description": "An observable of the URL fragment shared by all the routes.",
                  "interface": "fragment: Observable<string>",
                  "name": "fragment",
                  "headId": "fragment"
                },
                {
                  "id": "bf4cb71a-c0ca-24fb-3d23-29da3e28fcae",
                  "type": "interface-option",
                  "head": "outlet",
                  "description": "The outlet name of the route.",
                  "interface": "outlet: string",
                  "name": "outlet",
                  "headId": "outlet"
                },
                {
                  "id": "1946000a-2771-3c9f-6048-5c40af22474d",
                  "type": "interface-option",
                  "head": "paramMap",
                  "description": "An Observable that contains a map of the required and optional parameters\nspecific to the route.\nThe map supports retrieving single and multiple values from the same parameter.",
                  "interface": "get paramMap(): Observable<ParamMap>",
                  "name": "paramMap",
                  "headId": "paramMap"
                },
                {
                  "id": "a45a01c4-b593-f921-c1b6-31beb9cb0723",
                  "type": "interface-option",
                  "head": "params",
                  "description": "An observable of the matrix parameters scoped to this route.",
                  "interface": "params: Observable<Params>",
                  "name": "params",
                  "headId": "params"
                },
                {
                  "id": "e5377bce-b4a4-9927-d79c-9c9047e844a3",
                  "type": "interface-option",
                  "head": "parent",
                  "description": "The parent of this route in the router state tree. ",
                  "interface": "get parent(): ActivatedRoute|null",
                  "name": "parent",
                  "headId": "parent"
                },
                {
                  "id": "a6a153b3-1a64-5071-70e6-21f7c6efff75",
                  "type": "interface-option",
                  "head": "pathFromRoot",
                  "description": "The path from the root of the router state tree to this route. ",
                  "interface": "get pathFromRoot(): ActivatedRoute[]",
                  "name": "pathFromRoot",
                  "headId": "pathFromRoot"
                },
                {
                  "id": "b67ba1a6-ca69-c603-ca1d-12b2634a9fc0",
                  "type": "interface-option",
                  "head": "queryParamMap",
                  "description": "An Observable that contains a map of the query parameters available to all routes.\nThe map supports retrieving single and multiple values from the query parameter.",
                  "interface": "get queryParamMap(): Observable<ParamMap>",
                  "name": "queryParamMap",
                  "headId": "queryParamMap"
                },
                {
                  "id": "b5152a2d-5d84-0e8c-ba5b-8abe2d371197",
                  "type": "interface-option",
                  "head": "queryParams",
                  "description": "An observable of the query parameters shared by all the routes.",
                  "interface": "queryParams: Observable<Params>",
                  "name": "queryParams",
                  "headId": "queryParams"
                },
                {
                  "id": "49f43048-0e7e-2569-b548-4fdee42544d3",
                  "type": "interface-option",
                  "head": "root",
                  "description": "The root of the router state. ",
                  "interface": "get root(): ActivatedRoute",
                  "name": "root",
                  "headId": "root"
                },
                {
                  "id": "138716a7-9500-11f2-e5a4-ca90a1f10ab0",
                  "type": "interface-option",
                  "head": "routeConfig",
                  "description": "The configuration used to match this route. ",
                  "interface": "get routeConfig(): Route|null",
                  "name": "routeConfig",
                  "headId": "routeConfig"
                },
                {
                  "id": "cf244fd1-3559-a494-0ea8-7a9630f4ecff",
                  "type": "interface-option",
                  "head": "snapshot",
                  "description": "The current snapshot of this route ",
                  "interface": "snapshot: ActivatedRouteSnapshot",
                  "name": "snapshot",
                  "headId": "snapshot"
                },
                {
                  "id": "24c28586-67dc-49d6-d09a-aba653232819",
                  "type": "interface-option",
                  "name": "toString",
                  "head": "toString",
                  "headId": "toString",
                  "interface": "toString(): string",
                  "description": ""
                },
                {
                  "id": "8170e143-da2b-f06b-61a7-a4a36ff47cab",
                  "type": "interface-option",
                  "head": "url",
                  "description": "An observable of the URL segments matched by this route.",
                  "interface": "url: Observable<UrlSegment[]>",
                  "name": "url",
                  "headId": "url"
                }
              ],
              "title": "ActivatedRoute",
              "url": "activatedroute",
              "generationType": "interface-options",
              "generationFile": "router/src/router_state.ts",
              "generationName": "ActivatedRoute",
              "generationStartLine": 112,
              "generationEndLine": 201
            },
            {
              "id": "b78c8354-874e-d8f2-4a4a-a03ba0fe4757",
              "entries": [
                {
                  "id": "f04f8675-cb4e-c650-ff7c-4f7919ea53df",
                  "type": "text",
                  "text": "Contains the information about a route associated with a component loaded in an outlet at a particular moment in time. `ActivatedRouteSnapshot` can also be used to traverse the router state tree."
                },
                {
                  "id": "1899baa6-c34b-e37e-7d51-ca72d56e3e74",
                  "type": "text",
                  "text": "#### Example"
                },
                {
                  "id": "ad3e6334-ceb2-f56b-92c3-f90773f8197f",
                  "type": "text",
                  "text": "```typescript\n@Component({templateUrl:'./my-component.html'})\nclass MyComponent {\n  constructor(route: ActivatedRoute) {\n    const id: string = route.snapshot.params.id;\n    const url: string = route.snapshot.url.join('');\n    const user = route.snapshot.data.user;\n  }\n}\n```"
                },
                {
                  "id": "04c2c36b-b83f-03d5-bf28-7b2f4ec5d8cd",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Angular Router: Understanding Router State",
                      "url": "https://vsavkin.com/angular-router-understanding-router-state-7b5b95a12eab",
                      "lang": "en"
                    }
                  ]
                },
                {
                  "id": "ead960c0-bbf1-8824-2e8b-0b02fd5b9cb6",
                  "type": "text",
                  "text": "## Properties"
                },
                {
                  "id": "2decfb42-bf13-30d3-b719-c88eafd8491b",
                  "type": "toc"
                },
                {
                  "id": "f6572103-9ff8-6099-11f4-ece3f9b1132a",
                  "type": "interface-option",
                  "head": "children",
                  "description": "The children of this route in the router state tree ",
                  "interface": "get children(): ActivatedRouteSnapshot[]",
                  "name": "children",
                  "headId": "children"
                },
                {
                  "id": "1be201f9-afe2-3a37-7045-16cdf47b7a4c",
                  "type": "interface-option",
                  "head": "component",
                  "description": "The component of the route.",
                  "interface": "component: Type<any> | string | null",
                  "name": "component",
                  "headId": "component"
                },
                {
                  "id": "1793a704-66e4-6ebf-5c10-4e1357ad2003",
                  "type": "interface-option",
                  "head": "data",
                  "description": "The static and resolved data of this route.",
                  "interface": "data: Data",
                  "name": "data",
                  "headId": "data"
                },
                {
                  "id": "4024f7b2-3351-3fee-e709-1536775e41ac",
                  "type": "interface-option",
                  "head": "firstChild",
                  "description": "The first child of this route in the router state tree ",
                  "interface": "get firstChild(): ActivatedRouteSnapshot|null",
                  "name": "firstChild",
                  "headId": "firstChild"
                },
                {
                  "id": "0af65b14-eac9-7cd7-1220-cce2f0475557",
                  "type": "interface-option",
                  "head": "fragment",
                  "description": "The URL fragment shared by all the routes.",
                  "interface": "fragment: string",
                  "name": "fragment",
                  "headId": "fragment"
                },
                {
                  "id": "90fabf53-a4e1-1fd8-dfc7-730e869f7443",
                  "type": "interface-option",
                  "head": "outlet",
                  "description": "The outlet name of the route.",
                  "name": "outlet",
                  "headId": "outlet",
                  "interface": "outlet: string"
                },
                {
                  "id": "e2be7099-1386-eb85-a0bd-e6d7097e2e0b",
                  "type": "interface-option",
                  "head": "paramMap",
                  "description": "",
                  "interface": "get paramMap(): ParamMap",
                  "name": "paramMap",
                  "headId": "paramMap"
                },
                {
                  "id": "c7a135df-3f6e-6d2f-95cb-6ec9623e9463",
                  "type": "interface-option",
                  "head": "params",
                  "description": "The matrix parameters scoped to this route.",
                  "interface": "params: Params",
                  "name": "params",
                  "headId": "params"
                },
                {
                  "id": "fe469efa-a7c9-be84-3a76-9080abffaf8b",
                  "type": "interface-option",
                  "head": "parent",
                  "description": "The parent of this route in the router state tree ",
                  "interface": "get parent(): ActivatedRouteSnapshot|null",
                  "name": "parent",
                  "headId": "parent"
                },
                {
                  "id": "90fcdac6-f805-1e5e-d293-9e91b42bd98c",
                  "type": "interface-option",
                  "head": "pathFromRoot",
                  "description": "The path from the root of the router state tree to this route ",
                  "interface": "get pathFromRoot(): ActivatedRouteSnapshot[]",
                  "name": "pathFromRoot",
                  "headId": "pathFromRoot"
                },
                {
                  "id": "f2814943-3310-9ea6-6fd1-ef4f2ab5fe40",
                  "type": "interface-option",
                  "head": "queryParamMap",
                  "description": "",
                  "interface": "get queryParamMap(): ParamMap",
                  "name": "queryParamMap",
                  "headId": "queryParamMap"
                },
                {
                  "id": "a4c23384-9f31-de2c-c4d6-453730599160",
                  "type": "interface-option",
                  "head": "queryParams",
                  "description": "The query parameters shared by all the routes.",
                  "interface": "queryParams: Params",
                  "name": "queryParams",
                  "headId": "queryParams"
                },
                {
                  "id": "03d997d6-330d-dedf-f183-c317670b4d20",
                  "type": "interface-option",
                  "head": "root",
                  "description": "The root of the router state ",
                  "interface": "get root(): ActivatedRouteSnapshot",
                  "name": "root",
                  "headId": "root"
                },
                {
                  "id": "83500986-1caf-096e-14ef-8e0c0e384e8a",
                  "type": "interface-option",
                  "head": "routeConfig",
                  "description": "The configuration used to match this route *",
                  "interface": "routeConfig: Route|null",
                  "name": "routeConfig",
                  "headId": "routeConfig"
                },
                {
                  "id": "acbd85f7-26e3-2c9b-b9b5-a2613abcb5e4",
                  "type": "interface-option",
                  "name": "toString",
                  "head": "toString",
                  "headId": "toString",
                  "interface": "toString(): string",
                  "description": ""
                },
                {
                  "id": "2011cfcb-3da2-bc2f-d28c-32e746f65a72",
                  "type": "interface-option",
                  "head": "url",
                  "description": "The URL segments matched by this route.",
                  "interface": "url: UrlSegment[]",
                  "name": "url",
                  "headId": "url"
                }
              ],
              "title": "ActivatedRouteSnapshot",
              "url": "activatedroutesnapshot",
              "generationType": "interface-options",
              "generationFile": "router/src/router_state.ts",
              "generationName": "ActivatedRouteSnapshot",
              "generationStartLine": 279,
              "generationEndLine": 386
            },
            {
              "id": "554d1879-4294-9fea-d3e7-b3d654c87785",
              "entries": [
                {
                  "id": "a3f79338-c74e-9da2-9065-9a5c9ae90f94",
                  "type": "text",
                  "text": "Lets you link to specific routes in your app.\n\nConsider the following route configuration:\n\n`[{ path: 'user/:name', component: UserCmp }]`.\n\nWhen linking to this `user/:name` route, you use the `RouterLink` directive.\n\nIf the link is **static**, you can use the directive as follows:\n\n`<a routerLink=\"/user/bob\">link to user component</a>`\n\n\nIf you use **dynamic** values to generate the link, you can pass an array of path segments, followed by the params for each segment.\n\nFor instance `['/team', teamId, 'user', userName, {details: true}]` means that we want to generate a link to `/team/11/user/bob;details=true`.\n"
                },
                {
                  "id": "7bb8a0e6-cd39-8525-c093-e6b5602b9b14",
                  "type": "text",
                  "text": "Multiple static segments can be merged into one (e.g., `['/team/11/user', userName, {details: true}]`).\n\nThe first segment name can be prepended with `/`, `./`, or `../`:\n* If the first segment begins with `/`, the router will look up the route from the root of the app.\n* If the first segment begins with `./`, or doesn't begin with a slash, the router will instead look in the children of the current activated route.\n* And if the first segment begins with `../`, the router will go up one level."
                },
                {
                  "id": "90b5b39e-5cb1-18d0-5dd1-4c6a37177e12",
                  "type": "text",
                  "text": "You can set query params and fragment as follows:\n\n```\n<a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n  link to user component\n</a>\n```\n\nRouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n\nYou can also tell the directive to preserve the current query params and fragment:\n\n```\n<a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n  link to user component\n</a>\n```\n\nYou can tell the directive to how to handle queryParams, available options are:\n - `'merge'`: merge the queryParams into the current queryParams\n - `'preserve'`: preserve the current queryParams\n - default/`''`: use the queryParams only\n"
                },
                {
                  "id": "0e66e75b-2939-c3a7-d08b-b8219a420f93",
                  "type": "text",
                  "text": "The router link directive always treats the provided input as a delta to the current url.\n\nFor instance, if the current url is `/user/(box//aux:team)`.\n\nThen the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n`/user/(jim//aux:team)`.\n"
                }
              ],
              "title": "[routerLink] directive",
              "url": "routerlink-directive"
            },
            {
              "id": "ecbfc3ef-3819-5cda-c52f-42445614bb89",
              "entries": [
                {
                  "id": "ccb3ef72-9ee4-a699-e99e-4c160dd50faa",
                  "type": "text",
                  "text": "Lets you add a CSS class to an element when the link's route becomes active.\n\nThis directive lets you add a CSS class to an element when the link's route\nbecomes active.\n\nConsider the following example:\n\n```\n<a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n```\n\nWhen the url is either '/user' or '/user/bob', the active-link class will\nbe added to the `a` tag. If the url changes, the class will be removed.\n\nYou can set more than one class, as follows:\n\n```\n<a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n<a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n```\n\nYou can configure RouterLinkActive by passing `exact: true`. This will add the classes\nonly when the url matches the link exactly.\n\n```\n<a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\ntrue}\">Bob</a>\n```\n\nYou can assign the RouterLinkActive instance to a template variable and directly check\nthe `isActive` status.\n```\n<a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n  Bob {{ rla.isActive ? '(already open)' : ''}}\n</a>\n```\n\nFinally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n\n```\n<div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n  <a routerLink=\"/user/jim\">Jim</a>\n  <a routerLink=\"/user/bob\">Bob</a>\n</div>\n```\n\nThis will set the active-link class on the div tag if the url is either '/user/jim' or\n'/user/bob'."
                }
              ],
              "title": "[routerLinkActive] directive",
              "url": "routerlinkactive-directive"
            },
            {
              "id": "06270d07-ceef-81d2-e1a1-c6ba055d483e",
              "entries": [
                {
                  "id": "4fa057a1-d3d0-2feb-ddda-6bbe268bffa8",
                  "type": "text",
                  "text": "Acts as a placeholder that Angular dynamically fills based on the current router state.\n\n```\n<router-outlet></router-outlet>\n<router-outlet name='left'></router-outlet>\n<router-outlet name='right'></router-outlet>\n```\n\nA router outlet will emit an activate event any time a new component is being instantiated,\nand a deactivate event when it is being destroyed.\n\n```\n<router-outlet\n  (activate)='onActivate($event)'\n  (deactivate)='onDeactivate($event)'></router-outlet>\n```"
                },
                {
                  "id": "bce80294-9f0f-7329-6abe-693f41cba1a7",
                  "type": "tutorials",
                  "links": [
                    {
                      "label": "Using Auxiliary Routes",
                      "url": "https://angular-2-training-book.rangle.io/handout/routing/aux-routes.html",
                      "lang": "en"
                    },
                    {
                      "label": "Angular — Supercharge your Router transitions using animations",
                      "url": "https://medium.com/google-developer-experts/angular-supercharge-your-router-transitions-using-new-animation-features-v4-3-3eb341ede6c8",
                      "lang": "en"
                    }
                  ]
                }
              ],
              "title": "router-outlet directive",
              "url": "router-outlet-directive"
            }
          ],
          "title": "Router",
          "color": "#386ef3",
          "url": "router",
          "disabled": false,
          "langs": {
            "en": true
          }
        },
        {
          "id": "c3ec4722-f73d-e0d3-6bb6-7e9cbded0c0c",
          "menu": {
            "items": [
              {
                "id": "98d72006-54c2-56f4-9c9d-c486a61a6c9a",
                "label": "Introduction",
                "url": "intro"
              },
              {
                "id": "22a09cb7-01e1-a560-8d6d-8343c903f6c0",
                "label": "Model",
                "asGroup": true,
                "sub": {
                  "items": [
                    {
                      "id": "f23d1361-ca75-a485-e619-0af3ba35e1bd",
                      "label": "AbstractControlOptions",
                      "url": "abstractcontroloptions",
                      "sub": {
                        "items": [
                          {
                            "id": "54f900d2-d36d-c863-94c1-e66c1f6b1465",
                            "usePageEntries": true,
                            "usePageUrl": "abstractcontroloptions"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "012f0c9c-05ba-247b-f67c-25bf7ff093e0",
                      "label": "AbstractControl",
                      "url": "abstractcontrol",
                      "sub": {
                        "items": [
                          {
                            "id": "f85473dd-4ca3-b472-8dff-838507bf6da1",
                            "usePageEntries": true,
                            "usePageUrl": "abstractcontrol"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "9adaa179-798f-bb3b-b4ce-529dc906a4d8",
                      "label": "FormControl",
                      "url": "formcontrol",
                      "sub": {
                        "items": [
                          {
                            "id": "e1514939-d56b-3979-84ce-13e902a54f78",
                            "usePageEntries": true,
                            "usePageUrl": "formcontrol"
                          }
                        ]
                      },
                      "usePageEntries": false,
                      "subActiveOpt": true
                    },
                    {
                      "id": "27b165d4-bf4c-61b5-417b-eb75b30ffc73",
                      "label": "FormGroup",
                      "url": "formgroup",
                      "sub": {
                        "items": [
                          {
                            "id": "7f34b46a-70ab-853e-a828-53195e97cc91",
                            "sub": {
                              "items": []
                            },
                            "usePageEntries": true,
                            "usePageUrl": "formgroup"
                          }
                        ]
                      },
                      "usePageEntries": false,
                      "subActiveOpt": true
                    },
                    {
                      "id": "b7856b11-f8e0-a23f-082e-21ba5a6a25d8",
                      "label": "FormArray",
                      "url": "formarray",
                      "sub": {
                        "items": [
                          {
                            "id": "20bd5062-d96e-16f8-2216-d494c856d414",
                            "usePageEntries": true,
                            "usePageUrl": "formarray"
                          }
                        ]
                      },
                      "usePageEntries": false,
                      "subActiveOpt": true
                    }
                  ]
                }
              },
              {
                "id": "deb3c2b4-f0bf-8b10-5917-d933ef52ad5c",
                "label": "Control",
                "sub": {
                  "items": [
                    {
                      "id": "e5b063a3-4df2-f1ed-11bf-57d41e8b5526",
                      "label": "AbstractControlDirective",
                      "url": "abstractcontroldirective",
                      "sub": {
                        "items": [
                          {
                            "id": "89d8bf40-d550-5f35-5247-8a91fce3e1c5",
                            "subActiveOpt": false,
                            "usePageEntries": true,
                            "usePageUrl": "abstractcontroldirective"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "e74abd85-7cf4-d317-7718-f5ac457f8154",
                      "label": "NgControl",
                      "url": "ngcontrol",
                      "sub": {
                        "items": [
                          {
                            "id": "ba8ecd5c-500a-9df7-7806-656b5b5efdf2",
                            "usePageEntries": true,
                            "usePageUrl": "ngcontrol"
                          }
                        ]
                      },
                      "usePageEntries": false,
                      "subActiveOpt": true
                    },
                    {
                      "id": "60bca33f-fa8e-8506-0b49-e0a2f98f4dc6",
                      "label": "ControlContainer",
                      "url": "controlcontainer",
                      "sub": {
                        "items": [
                          {
                            "id": "627314d3-c5d3-ffc5-5f40-6e27cd84924b",
                            "usePageEntries": true,
                            "usePageUrl": "controlcontainer"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "782b7dbd-02ee-3df7-9b2d-36134296c6ca",
                      "label": "AbstractFormGroupDirective",
                      "url": "abstractformgroupdirective",
                      "sub": {
                        "items": [
                          {
                            "id": "6ad018dd-3535-f0c6-b306-1549d4d759a4",
                            "usePageEntries": true,
                            "usePageUrl": "abstractformgroupdirective"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "082a4ea3-83ce-f02d-fa62-ad6c379bcc7e",
                      "label": "ControlValueAccessor",
                      "url": "controlvalueaccessor",
                      "sub": {
                        "items": [
                          {
                            "id": "3d6ed7f7-0c64-d2c8-bae1-e164a05fb93f",
                            "usePageEntries": true,
                            "usePageUrl": "controlvalueaccessor"
                          }
                        ]
                      },
                      "subActiveOpt": true
                    },
                    {
                      "id": "b329f0b3-f060-bdaf-4770-8898925b9035",
                      "label": "Template-driven directives",
                      "sub": {
                        "items": [
                          {
                            "id": "470ec7da-9f74-d08c-d57a-aaa8b34a005a",
                            "label": "[ngModel]",
                            "url": "ngmodel-directive",
                            "sub": {
                              "items": [
                                {
                                  "id": "1fef3791-64db-440e-1513-54a912f1c8b6",
                                  "usePageEntries": true,
                                  "usePageUrl": "ngmodel-directive"
                                }
                              ]
                            },
                            "subActiveOpt": true
                          },
                          {
                            "id": "a3b12bc8-dc69-36da-ce17-f098c581f1a5",
                            "label": "[ngModelGroup]",
                            "url": "ngmodelgroup-directive",
                            "sub": {
                              "items": []
                            },
                            "subActiveOpt": false
                          }
                        ]
                      }
                    },
                    {
                      "id": "eb556189-c467-f6fc-a2e0-4a8f078a0544",
                      "label": "Reactive directives",
                      "sub": {
                        "items": [
                          {
                            "id": "47db7017-53ff-fdc5-d9d6-9f862f29ae77",
                            "label": "[formControl]",
                            "url": "formcontrol-directive",
                            "sub": {
                              "items": [
                                {
                                  "id": "cbe38223-aedb-b7c6-1a70-7738f9e409a0",
                                  "usePageEntries": true,
                                  "usePageUrl": "formcontrol-directive"
                                }
                              ]
                            },
                            "subActiveOpt": true
                          },
                          {
                            "id": "d8bde890-d190-49f1-d2c6-809e876098f1",
                            "label": "[formControlName]",
                            "url": "formcontrolname-directive",
                            "sub": {
                              "items": [
                                {
                                  "id": "f5fca094-4d1f-0b20-b627-1486fab0bb4d",
                                  "usePageEntries": true,
                                  "usePageUrl": "formcontrolname-directive"
                                }
                              ]
                            },
                            "subActiveOpt": true
                          },
                          {
                            "id": "520ad875-433f-d84a-1eb4-81f5034f7ac5",
                            "label": "[formGroup]",
                            "url": "formgroup-directive",
                            "sub": {
                              "items": [
                                {
                                  "id": "55c3f8ab-b2d9-343c-f369-c6ced08aefe9",
                                  "sub": {
                                    "items": []
                                  },
                                  "usePageEntries": true,
                                  "usePageUrl": "formgroup-directive"
                                }
                              ]
                            },
                            "subActiveOpt": true
                          },
                          {
                            "id": "4127265a-3d4c-ee79-9878-421991be320c",
                            "label": "[formGroupName]",
                            "url": "formgroupname-directive"
                          },
                          {
                            "id": "f89fc143-d3cf-0fd9-5018-632326f682cb",
                            "label": "[formArrayName]",
                            "url": "formarrayname-directive",
                            "sub": {
                              "items": [
                                {
                                  "id": "35cee44d-7bdf-2f50-e254-bbc344d2ca09",
                                  "usePageEntries": true,
                                  "usePageUrl": "formarrayname-directive"
                                }
                              ]
                            },
                            "subActiveOpt": true
                          }
                        ]
                      }
                    }
                  ]
                },
                "asGroup": true
              },
              {
                "id": "aeeec30e-b49e-dc41-4c66-e3c303217d5f",
                "label": "Form",
                "asGroup": true,
                "sub": {
                  "items": [
                    {
                      "id": "14fb45be-2db6-63b4-4f26-7489cfbc7efe",
                      "label": "Form",
                      "url": "form-interface",
                      "subActiveOpt": true,
                      "sub": {
                        "items": [
                          {
                            "id": "b1f1c60d-c318-3258-99a8-8c8b763228db",
                            "usePageEntries": true,
                            "usePageUrl": "form-interface"
                          }
                        ]
                      }
                    },
                    {
                      "id": "34d5fa8b-fcd1-858e-39e8-fa3c5d276ef6",
                      "label": "[ngForm]",
                      "url": "ngform-directive",
                      "subActiveOpt": true,
                      "sub": {
                        "items": [
                          {
                            "id": "bebb8118-294c-fc09-a9df-cffe230188e6",
                            "usePageEntries": true,
                            "usePageUrl": "ngform-directive"
                          }
                        ]
                      }
                    },
                    {
                      "id": "27a093b7-68d3-1b2f-b73b-857523d5af53",
                      "label": "FormBuilder",
                      "url": "formbuilder",
                      "subActiveOpt": true,
                      "sub": {
                        "items": [
                          {
                            "id": "77a70f93-5a6f-ce09-47f7-958cb360f0d3",
                            "usePageEntries": true,
                            "usePageUrl": "formbuilder"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "id": "7d118702-d313-d4c1-4bcf-4f9ee7acc81e",
                "label": "Validation",
                "sub": {
                  "items": [
                    {
                      "id": "cb350f46-7389-287f-8593-3d7c2e133a08",
                      "label": "Validators",
                      "url": "validators",
                      "subActiveOpt": true,
                      "sub": {
                        "items": [
                          {
                            "id": "d35e8a9b-ffe5-48b3-3978-96c412102aee",
                            "usePageEntries": true,
                            "usePageUrl": "validators"
                          }
                        ]
                      }
                    },
                    {
                      "id": "ca204892-5b99-6cfd-fbc8-60020c6d670e",
                      "label": "Validator",
                      "url": "validator-interface"
                    },
                    {
                      "id": "32e6ead2-4a57-4876-d777-d32594a115a5",
                      "label": "AsyncValidator",
                      "url": "asyncvalidator-interface"
                    },
                    {
                      "id": "76c7e0f9-9fa3-4757-7d7d-d55c228682b3",
                      "label": "Directives",
                      "sub": {
                        "items": [
                          {
                            "id": "39759fba-d390-51a7-3a08-5665b594364d",
                            "label": "[required]",
                            "url": "required-directive"
                          },
                          {
                            "id": "a9a5d3c0-0550-caf4-c840-e9838ef29473",
                            "label": "[email]",
                            "url": "email-directive"
                          },
                          {
                            "id": "c9a812df-9cb8-1223-2113-8dea18e234a1",
                            "label": "[minlength]",
                            "url": "minlength-directive"
                          },
                          {
                            "id": "62d4671b-c2a1-ea12-c23e-49115f618f6c",
                            "label": "[maxlength]",
                            "url": "maxlength-directive"
                          },
                          {
                            "id": "96a7f9f5-a5fc-195e-86a4-0ee046aa2a9a",
                            "label": "[pattern]",
                            "url": "pattern-directive"
                          },
                          {
                            "id": "84c98b39-566e-7917-4fcf-512b192e78a2",
                            "label": "[ngNativeValidate]",
                            "url": "ngnativevalidate-directive"
                          }
                        ]
                      }
                    }
                  ]
                },
                "asGroup": true
              }
            ]
          },
          "pages": [
            {
              "id": "fe8df1d7-3dfe-42a2-f66c-cc4a6dbfcf99",
              "entries": [
                {
                  "id": "27bcda32-2ec7-9c3d-99c7-44ec7bd02598",
                  "type": "text",
                  "text": "This simple Angular reference for developers describes forms, controls and models."
                },
                {
                  "id": "3304f320-fc16-107b-4250-661e8b5308df",
                  "type": "text",
                  "text": "## Additional information\n\nExample of hints and tutorials links. You can switch off these panels in the sidebar."
                },
                {
                  "id": "22de26f5-eaf0-de61-17db-9f60e2344f6f",
                  "type": "hint",
                  "text": "Hint with additional explanation."
                },
                {
                  "id": "1eb9a2b8-3f17-2317-a9b6-e2d2a75a6164",
                  "type": "tutorials",
                  "links": [
                    {
                      "url": "https://angular.io/start/forms",
                      "label": "Angular - Forms"
                    },
                    {
                      "url": "https://angular.io/guide/forms-overview",
                      "label": "Angular - Introduction to forms"
                    },
                    {
                      "url": "https://blog.angular-university.io/introduction-to-angular-2-forms-template-driven-vs-model-driven/",
                      "label": "Angular Forms Guide - Template Driven and Reactive Forms"
                    },
                    {
                      "url": "https://blog.nrwl.io/angular-forms-in-depth-ecb7c58166b5",
                      "label": "Angular Forms in Depth"
                    }
                  ]
                }
              ],
              "title": "Introduction",
              "url": "intro"
            },
            {
              "id": "24ab5ca2-c967-628d-ebc3-3f8572e76a79",
              "entries": [
                {
                  "id": "797d89ba-1081-647b-73f8-2a84790a4260",
                  "type": "text",
                  "text": "Interface for options provided to an [`AbstractControl`](../abstractcontrol)."
                },
                {
                  "id": "d3bec3fa-7c86-5b13-99ef-a126776bd274",
                  "type": "text",
                  "text": "### Properties"
                },
                {
                  "id": "285a27cc-f3b1-fee8-49e0-74b93410fb36",
                  "type": "toc"
                },
                {
                  "id": "87464bc1-6faf-208f-9c28-5d31969a8bb5",
                  "type": "interface-option",
                  "head": "validators",
                  "description": "The list of validators applied to a control.",
                  "interface": "validators?: ValidatorFn|ValidatorFn[]|null",
                  "name": "validators",
                  "headId": "validators"
                },
                {
                  "id": "249217a5-cf75-0535-6a36-4e6fb1c2bad8",
                  "type": "interface-option",
                  "head": "asyncValidators",
                  "description": "The list of async validators applied to control.",
                  "interface": "asyncValidators?: AsyncValidatorFn|AsyncValidatorFn[]|null",
                  "name": "asyncValidators",
                  "headId": "asyncValidators"
                },
                {
                  "id": "d9574a1f-5605-2391-8c19-48bb7f0dd448",
                  "type": "interface-option",
                  "head": "updateOn",
                  "description": "The event name for control to update upon.",
                  "interface": "updateOn?: 'change'|'blur'|'submit'",
                  "name": "updateOn",
                  "headId": "updateOn"
                }
              ],
              "title": "AbstractControlOptions",
              "url": "abstractcontroloptions",
              "generationType": "interface-options",
              "generationFile": "forms/src/model.ts",
              "generationName": "AbstractControlOptions",
              "generationStartLine": 114,
              "generationEndLine": 130
            },
            {
              "id": "92bacdd8-1833-37a6-b7e5-ef3d542e3f8d",
              "entries": [
                {
                  "id": "8e2caad3-4b8d-92a0-7b57-64cfc046376d",
                  "type": "text",
                  "text": "This is the base class for [`FormControl`](../formcontrol), [`FormGroup`](../formgroup), and [`FormArray`](../formarray).\n\nIt provides some of the shared behavior that all controls and groups of controls have, like\nrunning validators, calculating status, and resetting state. It also defines the properties\nthat are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\ninstantiated directly.\n"
                },
                {
                  "id": "af1ac8fb-3e44-9de0-a49e-069520971d47",
                  "type": "text",
                  "text": "## Interface"
                },
                {
                  "id": "215b2726-a17e-95a9-2a00-f350c8d7501b",
                  "type": "toc"
                },
                {
                  "id": "8249fb28-55fc-dfb0-4136-8e0e13f20102",
                  "type": "interface-option",
                  "name": "clearAsyncValidators",
                  "head": "clearAsyncValidators",
                  "headId": "clearAsyncValidators",
                  "interface": "clearAsyncValidators(): void",
                  "description": "Empties out the async validator list.\n\nWhen you add or remove a validator at run time, you must call\n`updateValueAndValidity()` for the new validation to take effect."
                },
                {
                  "id": "9f6a6f53-cab9-4a6a-5479-057640ee9aae",
                  "type": "interface-option",
                  "name": "clearValidators",
                  "head": "clearValidators",
                  "headId": "clearValidators",
                  "interface": "clearValidators(): void",
                  "description": "Empties out the sync validator list.\n\nWhen you add or remove a validator at run time, you must call\n`updateValueAndValidity()` for the new validation to take effect."
                },
                {
                  "id": "78861dff-1903-ccd4-9ce4-7b9c4f79f5df",
                  "type": "interface-option",
                  "name": "dirty",
                  "head": "dirty",
                  "headId": "dirty",
                  "interface": "get dirty(): boolean",
                  "description": "A control is `dirty` if the user has changed the value\nin the UI.\n\nReturns True if the user has changed the value of this control in the UI; compare `pristine`.\nProgrammatic changes to a control's value do not mark it dirty."
                },
                {
                  "id": "4ebde7c2-61ff-5d32-f7de-56ca9f6e3311",
                  "type": "interface-option",
                  "name": "disable",
                  "head": "disable",
                  "headId": "disable",
                  "interface": "disable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void",
                  "description": "Disables the control. This means the control is exempt from validation checks and\nexcluded from the aggregate value of any parent. Its status is `DISABLED`.\n\nIf the control has children, all children are also disabled."
                },
                {
                  "id": "ebd374d3-9b39-f1e4-582e-d7b461d3c29a",
                  "type": "interface-option",
                  "name": "disabled",
                  "head": "disabled",
                  "headId": "disabled",
                  "interface": "get disabled(): boolean",
                  "description": "A control is `disabled` when its `status` is `DISABLED`.\n\nDisabled controls are exempt from validation checks and\nare not included in the aggregate value of their ancestor\ncontrols.\n\nReturns True if the control is disabled, false otherwise."
                },
                {
                  "id": "db75d853-e87c-28b2-9c0f-8e94483e6388",
                  "type": "interface-option",
                  "name": "enable",
                  "head": "enable",
                  "headId": "enable",
                  "interface": "enable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void",
                  "description": "Enables the control. This means the control is included in validation checks and\nthe aggregate value of its parent. Its status recalculates based on its value and\nits validators.\n\nBy default, if the control has children, all children are enabled."
                },
                {
                  "id": "75db2b03-394d-95d6-8984-61dd9dcb47c4",
                  "type": "interface-option",
                  "name": "enabled",
                  "head": "enabled",
                  "headId": "enabled",
                  "interface": "get enabled(): boolean",
                  "description": "A control is `enabled` as long as its `status` is not `DISABLED`.\n\nReturns True if the control has any status other than 'DISABLED',\nfalse if the status is 'DISABLED'."
                },
                {
                  "id": "0b5dae4d-0219-f26f-049b-41acc5be2857",
                  "type": "interface-option",
                  "name": "errors",
                  "head": "errors",
                  "headId": "errors",
                  "interface": "errors: ValidationErrors|null",
                  "description": "An object containing any errors generated by failing validation,\nor null if there are no errors."
                },
                {
                  "id": "4bf19fc2-fdc9-5540-64e9-234c69575e10",
                  "type": "interface-option",
                  "name": "get",
                  "head": "get",
                  "headId": "get",
                  "interface": "get(path: Array<string|number>|string): AbstractControl|null",
                  "description": "Retrieves a child control given the control's name or path.\n\n### Retrieve a nested control\n\nFor example, to get a `name` control nested within a `person` sub-group:\n\n* `this.form.get('person.name');`\n\n-OR-\n\n* `this.form.get(['person', 'name']);`\n\n### Retrieve a control in a FormArray\n\nWhen accessing an element inside a FormArray, you can use an element index.\nFor example, to get a `price` control from the first element in an `items` array you can use:\n\n* `this.form.get('items.0.price');`\n\n-OR-\n\n* `this.form.get(['items', 0, 'price']);`"
                },
                {
                  "id": "314f9958-5a82-13e7-3b85-3ca6b775af5a",
                  "type": "interface-option",
                  "name": "getError",
                  "head": "getError",
                  "headId": "getError",
                  "interface": "getError(errorCode: string, path?: Array<string|number>|string): any",
                  "description": "Reports error data for the control with the given path.\n\nFor example, for the following `FormGroup`:\n\n```\nform = new FormGroup({\naddress: new FormGroup({ street: new FormControl() })\n});\n```\n\nThe path to the 'street' control from the root form would be 'address' -> 'street'.\n\nIt can be provided to this method in one of two formats:\n\n1. An array of string control names, e.g. `['address', 'street']`\n1. A period-delimited list of control names in one string, e.g. `'address.street'`\n\nReturns error data for that particular error. If the control or error is not present,\nnull is returned."
                },
                {
                  "id": "983eab91-2c58-c9c9-6746-5192a8fc4b2e",
                  "type": "interface-option",
                  "name": "hasError",
                  "head": "hasError",
                  "headId": "hasError",
                  "interface": "hasError(errorCode: string, path?: Array<string|number>|string): boolean",
                  "description": "Reports whether the control with the given path has the error specified.\n\nFor example, for the following `FormGroup`:\n\n```\nform = new FormGroup({\naddress: new FormGroup({ street: new FormControl() })\n});\n```\n\nThe path to the 'street' control from the root form would be 'address' -> 'street'.\n\nIt can be provided to this method in one of two formats:\n\n1. An array of string control names, e.g. `['address', 'street']`\n1. A period-delimited list of control names in one string, e.g. `'address.street'`\n\nIf no path is given, this method checks for the error on the current control.\n\nReturns whether the given error is present in the control at the given path.\n\nIf the control is not present, false is returned."
                },
                {
                  "id": "8355066a-ae81-072d-a1d9-3a658a017d7a",
                  "type": "interface-option",
                  "name": "invalid",
                  "head": "invalid",
                  "headId": "invalid",
                  "interface": "get invalid(): boolean",
                  "description": "A control is `invalid` when its `status` is `INVALID`.\n\nReturns True if this control has failed one or more of its validation checks,\nfalse otherwise."
                },
                {
                  "id": "0eb2930f-d45f-a3e4-5b40-c2c46d4436e6",
                  "type": "interface-option",
                  "name": "markAllAsTouched",
                  "head": "markAllAsTouched",
                  "headId": "markAllAsTouched",
                  "interface": "markAllAsTouched(): void",
                  "description": "Marks the control and all its descendant controls as `touched`."
                },
                {
                  "id": "e385856b-3d3a-fa11-faad-e735ea72a474",
                  "type": "interface-option",
                  "name": "markAsDirty",
                  "head": "markAsDirty",
                  "headId": "markAsDirty",
                  "interface": "markAsDirty(opts: {onlySelf?: boolean} = {}): void",
                  "description": "Marks the control as `dirty`. A control becomes dirty when\nthe control's value is changed through the UI; compare `markAsTouched`."
                },
                {
                  "id": "02c0ca71-956b-1a3e-dfb2-cbaa823897e0",
                  "type": "interface-option",
                  "name": "markAsPending",
                  "head": "markAsPending",
                  "headId": "markAsPending",
                  "interface": "markAsPending(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void",
                  "description": "Marks the control as `pending`.\n\nA control is pending while the control performs async validation."
                },
                {
                  "id": "8248b88a-6a7f-f366-b9a3-743ffad21bd2",
                  "type": "interface-option",
                  "name": "markAsPristine",
                  "head": "markAsPristine",
                  "headId": "markAsPristine",
                  "interface": "markAsPristine(opts: {onlySelf?: boolean} = {}): void",
                  "description": "Marks the control as `pristine`.\n\nIf the control has any children, marks all children as `pristine`,\nand recalculates the `pristine` status of all parent\ncontrols."
                },
                {
                  "id": "670f2360-0454-379c-b65e-4e7f5da63aed",
                  "type": "interface-option",
                  "name": "markAsTouched",
                  "head": "markAsTouched",
                  "headId": "markAsTouched",
                  "interface": "markAsTouched(opts: {onlySelf?: boolean} = {}): void",
                  "description": "Marks the control as `touched`. A control is touched by focus and\nblur events that do not change the value."
                },
                {
                  "id": "d89623ca-da11-8884-cc3b-659771381605",
                  "type": "interface-option",
                  "name": "markAsUntouched",
                  "head": "markAsUntouched",
                  "headId": "markAsUntouched",
                  "interface": "markAsUntouched(opts: {onlySelf?: boolean} = {}): void",
                  "description": "Marks the control as `untouched`.\n\nIf the control has any children, also marks all children as `untouched`\nand recalculates the `touched` status of all parent controls."
                },
                {
                  "id": "c2972775-ba32-dce2-e4fb-75b1c31a1656",
                  "type": "interface-option",
                  "name": "parent",
                  "head": "parent",
                  "headId": "parent",
                  "interface": "get parent(): FormGroup|FormArray|null",
                  "description": "The parent control."
                },
                {
                  "id": "e163706a-7a6a-c512-0960-b855fd66cc73",
                  "type": "interface-option",
                  "name": "patchValue",
                  "head": "patchValue",
                  "headId": "patchValue",
                  "interface": "patchValue(value: any, options?: Object): void",
                  "description": "Patches the value of the control. Abstract method (implemented in sub-classes)."
                },
                {
                  "id": "9f1d979d-8015-4f45-19d4-602d97b810db",
                  "type": "interface-option",
                  "name": "pending",
                  "head": "pending",
                  "headId": "pending",
                  "interface": "get pending(): boolean",
                  "description": "A control is `pending` when its `status` is `PENDING`.\n\nReturns True if this control is in the process of conducting a validation check,\nfalse otherwise."
                },
                {
                  "id": "21675673-c66a-8a80-a640-d28211ac2f65",
                  "type": "interface-option",
                  "name": "pristine",
                  "head": "pristine",
                  "headId": "pristine",
                  "interface": "pristine: boolean",
                  "description": "A control is `pristine` if the user has not yet changed\nthe value in the UI.\n\nReturns True if the user has not yet changed the value in the UI; compare `dirty`.\nProgrammatic changes to a control's value do not mark it dirty."
                },
                {
                  "id": "9cd16ca4-234c-2be1-7ecd-f5aa323ebb68",
                  "type": "interface-option",
                  "name": "reset",
                  "head": "reset",
                  "headId": "reset",
                  "interface": "reset(value?: any, options?: Object): void",
                  "description": "Resets the control. Abstract method (implemented in sub-classes)."
                },
                {
                  "id": "acda4ea4-caca-4d08-4a88-352d05ba9b65",
                  "type": "interface-option",
                  "name": "root",
                  "head": "root",
                  "headId": "root",
                  "interface": "get root(): AbstractControl",
                  "description": "Retrieves the top-level ancestor of this control."
                },
                {
                  "id": "5f4640e7-2215-5187-5676-0024ac7a5ac2",
                  "type": "interface-option",
                  "name": "setAsyncValidators",
                  "head": "setAsyncValidators",
                  "headId": "setAsyncValidators",
                  "interface": "setAsyncValidators(newValidator: AsyncValidatorFn|AsyncValidatorFn[]|null): void",
                  "description": "Sets the async validators that are active on this control. Calling this\noverwrites any existing async validators.\n\nWhen you add or remove a validator at run time, you must call\n`updateValueAndValidity()` for the new validation to take effect."
                },
                {
                  "id": "94e618c6-dc78-f65a-488d-45b15c7eebc7",
                  "type": "interface-option",
                  "name": "setErrors",
                  "head": "setErrors",
                  "headId": "setErrors",
                  "interface": "setErrors(errors: ValidationErrors|null, opts: {emitEvent?: boolean} = {}): void",
                  "description": "Sets errors on a form control when running validations manually, rather than automatically.\n\nCalling `setErrors` also updates the validity of the parent control.\n\n### Manually set the errors for a control\n\n```\nconst login = new FormControl('someLogin');\nlogin.setErrors({\n   notUnique: true\n});\n\nexpect(login.valid).toEqual(false);\nexpect(login.errors).toEqual({ notUnique: true });\n\nlogin.setValue('someOtherLogin');\n\nexpect(login.valid).toEqual(true);\n```"
                },
                {
                  "id": "9e75426d-eba8-dd58-1dde-2f8d09ed93b7",
                  "type": "interface-option",
                  "name": "setParent",
                  "head": "setParent",
                  "headId": "setParent",
                  "interface": "setParent(parent: FormGroup|FormArray): void",
                  "description": ""
                },
                {
                  "id": "976d5d5c-ba92-b29b-090b-3e86edd2af09",
                  "type": "interface-option",
                  "name": "setValidators",
                  "head": "setValidators",
                  "headId": "setValidators",
                  "interface": "setValidators(newValidator: ValidatorFn|ValidatorFn[]|null): void",
                  "description": "Sets the synchronous validators that are active on this control.  Calling\nthis overwrites any existing sync validators.\n\nWhen you add or remove a validator at run time, you must call\n`updateValueAndValidity()` for the new validation to take effect."
                },
                {
                  "id": "7b00dc38-b44e-8315-8638-f8069a4ac78f",
                  "type": "interface-option",
                  "name": "setValue",
                  "head": "setValue",
                  "headId": "setValue",
                  "interface": "setValue(value: any, options?: Object): void",
                  "description": "Sets the value of the control. Abstract method (implemented in sub-classes)."
                },
                {
                  "id": "dd8c86fe-5a6f-bfc5-9703-7069df7638f4",
                  "type": "interface-option",
                  "name": "status",
                  "head": "status",
                  "headId": "status",
                  "interface": "status: string",
                  "description": "The validation status of the control. There are four possible\nvalidation status values:\n\n* **VALID**: This control has passed all validation checks.\n* **INVALID**: This control has failed at least one validation check.\n* **PENDING**: This control is in the midst of conducting a validation check.\n* **DISABLED**: This control is exempt from validation checks.\n\nThese status values are mutually exclusive, so a control cannot be\nboth valid AND invalid or invalid AND disabled."
                },
                {
                  "id": "2b7da10c-c248-f585-51e8-e429ad4bf6d5",
                  "type": "interface-option",
                  "name": "statusChanges",
                  "head": "statusChanges",
                  "headId": "statusChanges",
                  "interface": "statusChanges: Observable<any>",
                  "description": "A multicasting observable that emits an event every time the validation `status` of the control\nrecalculates."
                },
                {
                  "id": "11267c89-d9c1-ffd6-df43-80d00d36368a",
                  "type": "interface-option",
                  "name": "touched",
                  "head": "touched",
                  "headId": "touched",
                  "interface": "touched: boolean",
                  "description": "True if the control is marked as `touched`.\n\nA control is marked `touched` once the user has triggered\na `blur` event on it."
                },
                {
                  "id": "82fe30b8-37a7-3d7e-c10d-903644ae2119",
                  "type": "interface-option",
                  "name": "untouched",
                  "head": "untouched",
                  "headId": "untouched",
                  "interface": "get untouched(): boolean",
                  "description": "True if the control has not been marked as touched\n\nA control is `untouched` if the user has not yet triggered\na `blur` event on it."
                },
                {
                  "id": "b2b94b17-d5b6-9e5a-3ad6-78c63f28a8fe",
                  "type": "interface-option",
                  "name": "updateOn",
                  "head": "updateOn",
                  "headId": "updateOn",
                  "interface": "get updateOn(): FormHooks",
                  "description": "Reports the update strategy of the `AbstractControl` (meaning\nthe event on which the control updates itself).\nPossible values: `'change'` | `'blur'` | `'submit'`\nDefault value: `'change'`"
                },
                {
                  "id": "822f92d9-b215-2f8a-e153-b4ad2759b240",
                  "type": "interface-option",
                  "name": "updateValueAndValidity",
                  "head": "updateValueAndValidity",
                  "headId": "updateValueAndValidity",
                  "interface": "updateValueAndValidity(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void",
                  "description": "Recalculates the value and validation status of the control.\n\nBy default, it also updates the value and validity of its ancestors."
                },
                {
                  "id": "46057f83-949e-66e7-1a75-c1d68e2f54b5",
                  "type": "interface-option",
                  "name": "valid",
                  "head": "valid",
                  "headId": "valid",
                  "interface": "get valid(): boolean",
                  "description": "A control is `valid` when its `status` is `VALID`.\n\nReturns True if the control has passed all of its validation tests,\nfalse otherwise."
                },
                {
                  "id": "969d0599-c5f0-8273-3cb3-c9bae2ad7eab",
                  "type": "interface-option",
                  "name": "value",
                  "head": "value",
                  "headId": "value",
                  "interface": "value: any",
                  "description": "The current value of the control.\n\n* For a `FormControl`, the current value.\n* For an enabled `FormGroup`, the values of enabled controls as an object\nwith a key-value pair for each member of the group.\n* For a disabled `FormGroup`, the values of all controls as an object\nwith a key-value pair for each member of the group.\n* For a `FormArray`, the values of enabled controls as an array."
                },
                {
                  "id": "0fc148b6-aeb5-12fb-ab17-f7a7f552691c",
                  "type": "interface-option",
                  "name": "valueChanges",
                  "head": "valueChanges",
                  "headId": "valueChanges",
                  "interface": "valueChanges: Observable<any>",
                  "description": "A multicasting observable that emits an event every time the value of the control changes, in\nthe UI or programmatically. It also emits an event each time you call enable() or disable()\nwithout passing along {emitEvent: false} as a function argument."
                },
                {
                  "id": "f0db57ca-10e1-1c40-fe6b-f97f270ec673",
                  "type": "interface-option",
                  "name": "validator",
                  "head": "validator",
                  "headId": "validator",
                  "interface": "get validator(): ValidatorFn|null",
                  "description": "The function that is used to determine the validity of this control synchronously."
                },
                {
                  "id": "6c95602d-415f-fa25-5048-4e486169206a",
                  "type": "interface-option",
                  "name": "validator",
                  "head": "validator",
                  "headId": "validator",
                  "interface": "set validator(validatorFn: ValidatorFn|null)",
                  "description": ""
                },
                {
                  "id": "1133b31e-c9a7-8ef8-055d-2d56161ec989",
                  "type": "interface-option",
                  "name": "asyncValidator",
                  "head": "asyncValidator",
                  "headId": "asyncValidator",
                  "interface": "get asyncValidator(): AsyncValidatorFn|null",
                  "description": "The function that is used to determine the validity of this control asynchronously."
                },
                {
                  "id": "585ae684-4759-11d4-d868-183186861a6f",
                  "type": "interface-option",
                  "name": "asyncValidator",
                  "head": "asyncValidator",
                  "headId": "asyncValidator",
                  "interface": "set asyncValidator(asyncValidatorFn: AsyncValidatorFn|null)",
                  "description": ""
                }
              ],
              "title": "AbstractControl",
              "url": "abstractcontrol",
              "generationType": "interface-options",
              "generationFile": "forms/src/model.ts",
              "generationName": "AbstractControl",
              "generationStartLine": 154,
              "generationEndLine": 1034
            },
            {
              "id": "1e11ba97-23a3-7a6c-7f1d-9fbc462c4d8e",
              "entries": [
                {
                  "id": "87bb7426-c049-8090-ba68-c1b52f2f9eed",
                  "type": "text",
                  "text": "Tracks the value and validation status of an individual form control.\n\nThis is one of the three fundamental building blocks of Angular forms, along with [`FormGroup`](../formgroup) and [`FormArray`](../formarray). It extends the [`AbstractControl`](../abstractcontrol) class that implements most of the base functionality for accessing the value, validation status, user interactions and events."
                },
                {
                  "id": "33f86536-5d3a-2c48-2a39-bcd5e00d523b",
                  "type": "text",
                  "text": "## Interface, extends [AbstractControl](../abstractcontrol)"
                },
                {
                  "id": "704b366f-8caa-b97d-f803-57af297b3aeb",
                  "type": "toc"
                },
                {
                  "id": "b0840872-a228-e22d-c1a1-265a7324298e",
                  "type": "interface-option",
                  "name": "setValue",
                  "head": "setValue",
                  "headId": "setValue",
                  "interface": "setValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void",
                  "description": "Sets a new value for the form control."
                },
                {
                  "id": "eb640ffb-2c41-502a-56b1-5428bf44b812",
                  "type": "interface-option",
                  "name": "patchValue",
                  "head": "patchValue",
                  "headId": "patchValue",
                  "interface": "patchValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void",
                  "description": "Patches the value of a control.\n\nThis function is functionally the same as {@link FormControl#setValue setValue} at this level.\nIt exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n`FormArrays`, where it does behave differently."
                },
                {
                  "id": "75e24739-1bb4-0285-6ea6-3c5b16a0a47d",
                  "type": "interface-option",
                  "name": "reset",
                  "head": "reset",
                  "headId": "reset",
                  "interface": "reset(formState: any = null, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void",
                  "description": "Resets the form control, marking it `pristine` and `untouched`, and setting\nthe value to null."
                },
                {
                  "id": "1f86ed5b-a852-2df9-0a48-98e1970a9ab1",
                  "type": "interface-option",
                  "name": "registerOnChange",
                  "head": "registerOnChange",
                  "headId": "registerOnChange",
                  "interface": "registerOnChange(fn: Function): void",
                  "description": "Register a listener for change events."
                },
                {
                  "id": "eb4a990d-8366-a9e0-512a-8e602382dc99",
                  "type": "interface-option",
                  "name": "registerOnDisabledChange",
                  "head": "registerOnDisabledChange",
                  "headId": "registerOnDisabledChange",
                  "interface": "registerOnDisabledChange(fn: (isDisabled: boolean) => void): void",
                  "description": "Register a listener for disabled events."
                }
              ],
              "title": "FormControl",
              "url": "formcontrol",
              "generationType": "interface-options",
              "generationFile": "forms/src/model.ts",
              "generationName": "FormControl",
              "generationStartLine": 1133,
              "generationEndLine": 1335
            },
            {
              "id": "25c41186-7aad-4fd8-dd5d-672fca05c4fa",
              "entries": [
                {
                  "id": "0a1817ff-3ed6-08ae-0018-f93eceb6a2b2",
                  "type": "text",
                  "text": "Tracks the value and validity state of a group of [`FormControl`](../formcontrol) instances.\n\nA `FormGroup` aggregates the values of each child [`FormControl`](../formcontrol) into one object,\nwith each control name as the key.  It calculates its status by reducing the status values\nof its children. For example, if one of the controls in a group is invalid, the entire\ngroup becomes invalid.\n\n`FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\nalong with [`FormControl`](../formcontrol) and [`FormArray`](../formarray).\n\nWhen instantiating a `FormGroup`, pass in a collection of child controls as the first\nargument. The key for each child registers the name for the control."
                },
                {
                  "id": "5667e981-8c11-326a-9394-8bcd9a699694",
                  "type": "text",
                  "text": "## Interface, extends [AbstractControl](../abstractcontrol)"
                },
                {
                  "id": "d2e1e214-874d-7d3f-5604-e806572df07e",
                  "type": "toc"
                },
                {
                  "id": "ae47973d-97d3-eec7-e71a-6d4851abe9b3",
                  "type": "interface-option",
                  "name": "registerControl",
                  "head": "registerControl",
                  "headId": "registerControl",
                  "interface": "registerControl(name: string, control: AbstractControl): AbstractControl",
                  "description": "Registers a control with the group's list of controls.\n\nThis method does not update the value or validity of the control.\nUse {@link FormGroup#addControl addControl} instead."
                },
                {
                  "id": "1b675809-93b0-b97d-2ca6-f845d38af312",
                  "type": "interface-option",
                  "name": "addControl",
                  "head": "addControl",
                  "headId": "addControl",
                  "interface": "addControl(name: string, control: AbstractControl, options: {emitEvent?: boolean} = {}): void",
                  "description": "Add a control to this group.\n\nThis method also updates the value and validity of the control."
                },
                {
                  "id": "9b11faee-b9ef-f334-e677-b6eea4ffd6ac",
                  "type": "interface-option",
                  "name": "removeControl",
                  "head": "removeControl",
                  "headId": "removeControl",
                  "interface": "removeControl(name: string, options: {emitEvent?: boolean} = {}): void",
                  "description": "Remove a control from this group.\n\nThis method also updates the value and validity of the control."
                },
                {
                  "id": "ae864843-1c1d-65d5-1e94-3c9c565a2c7a",
                  "type": "interface-option",
                  "name": "setControl",
                  "head": "setControl",
                  "headId": "setControl",
                  "interface": "setControl(name: string, control: AbstractControl, options: {emitEvent?: boolean} = {}): void",
                  "description": "Replace an existing control."
                },
                {
                  "id": "e0c01c31-477b-9f1c-5a4a-5d8fc9650493",
                  "type": "interface-option",
                  "name": "contains",
                  "head": "contains",
                  "headId": "contains",
                  "interface": "contains(controlName: string): boolean",
                  "description": "Check whether there is an enabled control with the given name in the group.\n\nReports false for disabled controls. If you'd like to check for existence in the group\nonly, use {@link AbstractControl#get get} instead.\n\nReturns false for disabled controls, true otherwise."
                },
                {
                  "id": "e9990826-35c9-58db-d946-f7f3a7840a9a",
                  "type": "interface-option",
                  "name": "setValue",
                  "head": "setValue",
                  "headId": "setValue",
                  "interface": "setValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void",
                  "description": "Sets the value of the `FormGroup`. It accepts an object that matches\nthe structure of the group, with control names as keys.\n\n### Set the complete value for the form group\n\n```\nconst form = new FormGroup({\nfirst: new FormControl(),\nlast: new FormControl()\n});\n\nconsole.log(form.value);   // {first: null, last: null}\n\nform.setValue({first: 'Nancy', last: 'Drew'});\nconsole.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n```"
                },
                {
                  "id": "00ef5cc7-9784-4aed-18c6-d9d2679b5047",
                  "type": "interface-option",
                  "name": "patchValue",
                  "head": "patchValue",
                  "headId": "patchValue",
                  "interface": "patchValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void",
                  "description": "Patches the value of the `FormGroup`. It accepts an object with control\nnames as keys, and does its best to match the values to the correct controls\nin the group.\n\nIt accepts both super-sets and sub-sets of the group without throwing an error.\n\n### Patch the value for a form group\n\n```\nconst form = new FormGroup({\nfirst: new FormControl(),\nlast: new FormControl()\n});\nconsole.log(form.value);   // {first: null, last: null}\n\nform.patchValue({first: 'Nancy'});\nconsole.log(form.value);   // {first: 'Nancy', last: null}\n```"
                },
                {
                  "id": "9cb1e5bf-d266-3ea5-8be3-88598fae144a",
                  "type": "interface-option",
                  "name": "reset",
                  "head": "reset",
                  "headId": "reset",
                  "interface": "reset(value: any = {}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void",
                  "description": "Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets\nthe value of all descendants to null.\n\nYou reset to a specific form state by passing in a map of states\nthat matches the structure of your form, with control names as keys. The state\nis a standalone value or a form state object with both a value and a disabled\nstatus.\n\n### Reset the form group values\n\n```ts\nconst form = new FormGroup({\n   first: new FormControl('first name'),\n   last: new FormControl('last name')\n});\n\nconsole.log(form.value);  // {first: 'first name', last: 'last name'}\n\nform.reset({ first: 'name', last: 'last name' });\n\nconsole.log(form.value);  // {first: 'name', last: 'last name'}\n```\n\n### Reset the form group values and disabled status\n\n```\nconst form = new FormGroup({\n   first: new FormControl('first name'),\n   last: new FormControl('last name')\n});\n\nform.reset({\n   first: {value: 'name', disabled: true},\n   last: 'last'\n});\n\nconsole.log(form.value);  // {last: 'last'}\nconsole.log(form.get('first').status);  // 'DISABLED'\n```"
                },
                {
                  "id": "92783e57-a7de-1869-cb2a-aaef15f34847",
                  "type": "interface-option",
                  "name": "getRawValue",
                  "head": "getRawValue",
                  "headId": "getRawValue",
                  "interface": "getRawValue(): any",
                  "description": "The aggregate value of the `FormGroup`, including any disabled controls.\n\nRetrieves all values regardless of disabled status.\nThe `value` property is the best way to get the value of the group, because\nit excludes disabled controls in the `FormGroup`."
                }
              ],
              "title": "FormGroup",
              "url": "formgroup",
              "generationType": "interface-options",
              "generationFile": "forms/src/model.ts",
              "generationName": "FormGroup",
              "generationStartLine": 1409,
              "generationEndLine": 1796
            },
            {
              "id": "c8582723-b07d-9a0d-36e1-1843b3762716",
              "entries": [
                {
                  "id": "e03275c0-97fe-91f4-855f-a70a8ae35393",
                  "type": "text",
                  "text": "A `FormArray` aggregates the values of each child [`FormControl`](../formcontrol) into an array. It calculates its status by reducing the status values of its children. For example, if one of the controls in a `FormArray` is invalid, the entire array becomes invalid.\n\n`FormArray` is one of the three fundamental building blocks used to define forms in Angular, along with [`FormControl`](../formcontrol) and [`FormGroup`](../formgroup)."
                },
                {
                  "id": "154a1019-4a35-a9cb-efef-cbeeea292e53",
                  "type": "text",
                  "text": "## Interface, extends [AbstractControl](../abstractcontrol)"
                },
                {
                  "id": "1748a394-38ef-0156-683b-ea583f5ec692",
                  "type": "toc"
                },
                {
                  "id": "46b0b865-fd5e-00b3-8f81-3c78f5ec729f",
                  "type": "interface-option",
                  "name": "at",
                  "head": "at",
                  "headId": "at",
                  "interface": "at(index: number): AbstractControl",
                  "description": "Get the `AbstractControl` at the given `index` in the array."
                },
                {
                  "id": "f8836f1d-d32d-d0f6-c353-1f774b278886",
                  "type": "interface-option",
                  "name": "push",
                  "head": "push",
                  "headId": "push",
                  "interface": "push(control: AbstractControl, options: {emitEvent?: boolean} = {}): void",
                  "description": "Insert a new `AbstractControl` at the end of the array."
                },
                {
                  "id": "6c51a549-754e-9098-3bbb-e5228e6dcf4b",
                  "type": "interface-option",
                  "name": "insert",
                  "head": "insert",
                  "headId": "insert",
                  "interface": "insert(index: number, control: AbstractControl, options: {emitEvent?: boolean} = {}): void",
                  "description": "Insert a new `AbstractControl` at the given `index` in the array."
                },
                {
                  "id": "747ecedc-e120-1f2e-8761-bc06cf8c9b98",
                  "type": "interface-option",
                  "name": "removeAt",
                  "head": "removeAt",
                  "headId": "removeAt",
                  "interface": "removeAt(index: number, options: {emitEvent?: boolean} = {}): void",
                  "description": "Remove the control at the given `index` in the array."
                },
                {
                  "id": "60fa7175-e49f-1482-2765-8cc3a38910e2",
                  "type": "interface-option",
                  "name": "setControl",
                  "head": "setControl",
                  "headId": "setControl",
                  "interface": "setControl(index: number, control: AbstractControl, options: {emitEvent?: boolean} = {}): void",
                  "description": "Replace an existing control."
                },
                {
                  "id": "50165e64-5293-0c9a-96f7-83135a37fd72",
                  "type": "interface-option",
                  "name": "length",
                  "head": "length",
                  "headId": "length",
                  "interface": "get length(): number",
                  "description": "Length of the control array."
                },
                {
                  "id": "9479a54f-69b5-c54e-776b-71d1edb5783a",
                  "type": "interface-option",
                  "name": "setValue",
                  "head": "setValue",
                  "headId": "setValue",
                  "interface": "setValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void",
                  "description": "Sets the value of the `FormArray`. It accepts an array that matches\nthe structure of the control.\n\nThis method performs strict checks, and throws an error if you try\nto set the value of a control that doesn't exist or if you exclude the\nvalue of a control.\n\n### Set the values for the controls in the form array\n\n```\nconst arr = new FormArray([\nnew FormControl(),\nnew FormControl()\n]);\nconsole.log(arr.value);   // [null, null]\n\narr.setValue(['Nancy', 'Drew']);\nconsole.log(arr.value);   // ['Nancy', 'Drew']\n```"
                },
                {
                  "id": "dc38400f-ebb4-25d7-041a-3b1ef38f3911",
                  "type": "interface-option",
                  "name": "patchValue",
                  "head": "patchValue",
                  "headId": "patchValue",
                  "interface": "patchValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void",
                  "description": "Patches the value of the `FormArray`. It accepts an array that matches the\nstructure of the control, and does its best to match the values to the correct\ncontrols in the group.\n\nIt accepts both super-sets and sub-sets of the array without throwing an error.\n\n### Patch the values for controls in a form array\n\n```\nconst arr = new FormArray([\nnew FormControl(),\nnew FormControl()\n]);\nconsole.log(arr.value);   // [null, null]\n\narr.patchValue(['Nancy']);\nconsole.log(arr.value);   // ['Nancy', null]\n```"
                },
                {
                  "id": "ea494778-6561-7a2b-c0b8-44d760650248",
                  "type": "interface-option",
                  "name": "reset",
                  "head": "reset",
                  "headId": "reset",
                  "interface": "reset(value: any = [], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void",
                  "description": "Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\nvalue of all descendants to null or null maps.\n\nYou reset to a specific form state by passing in an array of states\nthat matches the structure of the control. The state is a standalone value\nor a form state object with both a value and a disabled status.\n\n### Reset the values in a form array\n\n```ts\nconst arr = new FormArray([\nnew FormControl(),\nnew FormControl()\n]);\narr.reset(['name', 'last name']);\n\nconsole.log(arr.value);  // ['name', 'last name']\n```\n\n### Reset the values in a form array and the disabled status for the first control\n\n```\narr.reset([\n{value: 'name', disabled: true},\n'last'\n]);\n\nconsole.log(arr.value);  // ['last']\nconsole.log(arr.at(0).status);  // 'DISABLED'\n```"
                },
                {
                  "id": "16b03f2a-437d-df12-270a-8ce7e765a164",
                  "type": "interface-option",
                  "name": "getRawValue",
                  "head": "getRawValue",
                  "headId": "getRawValue",
                  "interface": "getRawValue(): any[]",
                  "description": "The aggregate value of the array, including any disabled controls.\n\nReports all values regardless of disabled status.\nFor enabled controls only, the `value` property is the best way to get the value of the array."
                },
                {
                  "id": "a6e080e7-13ca-d7c2-6002-7fadc7b47f4a",
                  "type": "interface-option",
                  "name": "clear",
                  "head": "clear",
                  "headId": "clear",
                  "interface": "clear(options: {emitEvent?: boolean} = {}): void",
                  "description": "Remove all controls in the `FormArray`.\n\n### Remove all elements from a FormArray\n\n```ts\nconst arr = new FormArray([\nnew FormControl(),\nnew FormControl()\n]);\nconsole.log(arr.length);  // 2\n\narr.clear();\nconsole.log(arr.length);  // 0\n```\n\nIt's a simpler and more efficient alternative to removing all elements one by one:\n\n```ts\nconst arr = new FormArray([\nnew FormControl(),\nnew FormControl()\n]);\n\nwhile (arr.length) {\narr.removeAt(0);\n}\n```"
                }
              ],
              "title": "FormArray",
              "url": "formarray",
              "generationType": "interface-options",
              "generationFile": "forms/src/model.ts",
              "generationName": "FormArray",
              "generationStartLine": 1862,
              "generationEndLine": 2253
            },
            {
              "id": "9db2bb4b-ddab-579e-57cf-d1afe81fb5c3",
              "entries": [
                {
                  "id": "1c39bb1d-bf96-6481-ec67-d39097e53bd4",
                  "type": "text",
                  "text": "Base class for control directives.\n\nThis class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n\n"
                },
                {
                  "id": "653e536b-48d4-a342-6c4c-872ccf251419",
                  "type": "text",
                  "text": "### Subclasses\n\n* [ControlContainer](../controlcontainer)\n    * [AbstractFormGroupDirective](../abstractformgroupdirective)\n        * [NgModelGroup](../ngmodelgroup-directive)\n        * [FormGroupName](../formgroupname-directive)\n    * [NgForm](../ngform-directive)\n    * [FormGroupDirective](../formgroup-directive)\n    * [FormArrayName](../formarrayname-directive)\n* [NgControl](../ngcontrol)\n    * [NgModel](../ngmodel-directive)\n    * [FormControlDirective](../formcontrol-directive)\n    * [FormControlName](../formcontrolname-directive)"
                },
                {
                  "id": "53c50694-2310-c698-320a-46daa1003ac5",
                  "type": "text",
                  "text": "## Interface"
                },
                {
                  "id": "ecb75b26-28e7-24dc-f8a0-b885b87db327",
                  "type": "toc"
                },
                {
                  "id": "5cc0813e-d4cf-946f-394c-94f3a26ee9d1",
                  "type": "interface-option",
                  "name": "control",
                  "head": "control",
                  "headId": "control",
                  "interface": "get control(): AbstractControl|null",
                  "description": "A reference to the underlying control.\n\nReturns the control that backs this directive. Most properties fall through to that instance."
                },
                {
                  "id": "6f442993-f08b-eb38-269b-76c850d97cf5",
                  "type": "interface-option",
                  "name": "value",
                  "head": "value",
                  "headId": "value",
                  "interface": "get value(): any",
                  "description": "Reports the value of the control if it is present, otherwise null."
                },
                {
                  "id": "f8ca9ec5-5049-8511-5d4d-24d3c3d818d6",
                  "type": "interface-option",
                  "name": "valid",
                  "head": "valid",
                  "headId": "valid",
                  "interface": "get valid(): boolean|null",
                  "description": "Reports whether the control is valid. A control is considered valid if no\nvalidation errors exist with the current value.\nIf the control is not present, null is returned."
                },
                {
                  "id": "03037da5-db4e-7368-0edc-d04a537ddb0d",
                  "type": "interface-option",
                  "name": "invalid",
                  "head": "invalid",
                  "headId": "invalid",
                  "interface": "get invalid(): boolean|null",
                  "description": "Reports whether the control is invalid, meaning that an error exists in the input value.\nIf the control is not present, null is returned."
                },
                {
                  "id": "d0262cc1-3144-1826-b2b6-3ffca8a68f5c",
                  "type": "interface-option",
                  "name": "pending",
                  "head": "pending",
                  "headId": "pending",
                  "interface": "get pending(): boolean|null",
                  "description": "Reports whether a control is pending, meaning that that async validation is occurring and\nerrors are not yet available for the input value. If the control is not present, null is\nreturned."
                },
                {
                  "id": "e9dc80a8-613e-39a1-8b4e-60636d2ef920",
                  "type": "interface-option",
                  "name": "disabled",
                  "head": "disabled",
                  "headId": "disabled",
                  "interface": "get disabled(): boolean|null",
                  "description": "Reports whether the control is disabled, meaning that the control is disabled\nin the UI and is exempt from validation checks and excluded from aggregate\nvalues of ancestor controls. If the control is not present, null is returned."
                },
                {
                  "id": "29e7058a-60f8-0342-a223-bf28f83070ee",
                  "type": "interface-option",
                  "name": "enabled",
                  "head": "enabled",
                  "headId": "enabled",
                  "interface": "get enabled(): boolean|null",
                  "description": "Reports whether the control is enabled, meaning that the control is included in ancestor\ncalculations of validity or value. If the control is not present, null is returned."
                },
                {
                  "id": "42c59b93-4712-ac64-bc90-1d58227f9dc4",
                  "type": "interface-option",
                  "name": "errors",
                  "head": "errors",
                  "headId": "errors",
                  "interface": "get errors(): ValidationErrors|null",
                  "description": "Reports the control's validation errors. If the control is not present, null is returned."
                },
                {
                  "id": "587b14c0-5ad4-cd09-5163-0a880a264efb",
                  "type": "interface-option",
                  "name": "pristine",
                  "head": "pristine",
                  "headId": "pristine",
                  "interface": "get pristine(): boolean|null",
                  "description": "Reports whether the control is pristine, meaning that the user has not yet changed\nthe value in the UI. If the control is not present, null is returned."
                },
                {
                  "id": "31fe9817-b174-35b1-f827-75141e08519f",
                  "type": "interface-option",
                  "name": "dirty",
                  "head": "dirty",
                  "headId": "dirty",
                  "interface": "get dirty(): boolean|null",
                  "description": "Reports whether the control is dirty, meaning that the user has changed\nthe value in the UI. If the control is not present, null is returned."
                },
                {
                  "id": "10338b7d-c4c7-51f7-5836-08fa2a637609",
                  "type": "interface-option",
                  "name": "touched",
                  "head": "touched",
                  "headId": "touched",
                  "interface": "get touched(): boolean|null",
                  "description": "Reports whether the control is touched, meaning that the user has triggered\na `blur` event on it. If the control is not present, null is returned."
                },
                {
                  "id": "958068b6-8c39-a82a-2544-0ae397ec307c",
                  "type": "interface-option",
                  "name": "status",
                  "head": "status",
                  "headId": "status",
                  "interface": "get status(): string|null",
                  "description": "Reports the validation status of the control. Possible values include:\n'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\nIf the control is not present, null is returned."
                },
                {
                  "id": "758516a6-0e88-7307-8bca-2e61ff11d0be",
                  "type": "interface-option",
                  "name": "untouched",
                  "head": "untouched",
                  "headId": "untouched",
                  "interface": "get untouched(): boolean|null",
                  "description": "Reports whether the control is untouched, meaning that the user has not yet triggered\na `blur` event on it. If the control is not present, null is returned."
                },
                {
                  "id": "dfb42a2f-be4a-fc85-e4d4-6ce8487dca73",
                  "type": "interface-option",
                  "name": "statusChanges",
                  "head": "statusChanges",
                  "headId": "statusChanges",
                  "interface": "get statusChanges(): Observable<any>|null",
                  "description": "Returns a multicasting observable that emits a validation status whenever it is\ncalculated for the control. If the control is not present, null is returned."
                },
                {
                  "id": "bdcd0324-c243-b596-26dd-da6369bfa949",
                  "type": "interface-option",
                  "name": "valueChanges",
                  "head": "valueChanges",
                  "headId": "valueChanges",
                  "interface": "get valueChanges(): Observable<any>|null",
                  "description": "Returns a multicasting observable of value changes for the control that emits every time the\nvalue of the control changes in the UI or programmatically.\nIf the control is not present, null is returned."
                },
                {
                  "id": "2e1e9a6e-3727-ecf3-ba69-e84d6817a155",
                  "type": "interface-option",
                  "name": "path",
                  "head": "path",
                  "headId": "path",
                  "interface": "get path(): string[]|null",
                  "description": "Returns an array that represents the path from the top-level form to this control.\nEach index is the string name of the control on that level."
                },
                {
                  "id": "f3cbfdd9-b61a-6d4b-673d-31b24954ee07",
                  "type": "interface-option",
                  "name": "reset",
                  "head": "reset",
                  "headId": "reset",
                  "interface": "reset(value: any = undefined): void",
                  "description": "Resets the control with the provided value if the control is present."
                },
                {
                  "id": "e3e19759-b849-6955-f7d2-e544925693ca",
                  "type": "interface-option",
                  "name": "hasError",
                  "head": "hasError",
                  "headId": "hasError",
                  "interface": "hasError(errorCode: string, path?: Array<string|number>|string): boolean",
                  "description": "Reports whether the control with the given path has the error specified.\n\nFor example, for the following `FormGroup`:\n\n```\nform = new FormGroup({\naddress: new FormGroup({ street: new FormControl() })\n});\n```\n\nThe path to the 'street' control from the root form would be 'address' -> 'street'.\n\nIt can be provided to this method in one of two formats:\n\n1. An array of string control names, e.g. `['address', 'street']`\n1. A period-delimited list of control names in one string, e.g. `'address.street'`\n\nIf no path is given, this method checks for the error on the current control.\n\nReturns whether the given error is present in the control at the given path.\n\nIf the control is not present, false is returned."
                },
                {
                  "id": "1141c283-d509-9423-d995-8efeed1206e0",
                  "type": "interface-option",
                  "name": "getError",
                  "head": "getError",
                  "headId": "getError",
                  "interface": "getError(errorCode: string, path?: Array<string|number>|string): any",
                  "description": "Reports error data for the control with the given path.\n\nFor example, for the following `FormGroup`:\n\n```\nform = new FormGroup({\naddress: new FormGroup({ street: new FormControl() })\n});\n```\n\nThe path to the 'street' control from the root form would be 'address' -> 'street'.\n\nIt can be provided to this method in one of two formats:\n\n1. An array of string control names, e.g. `['address', 'street']`\n1. A period-delimited list of control names in one string, e.g. `'address.street'`\n\nReturns error data for that particular error. If the control or error is not present,\nnull is returned."
                },
                {
                  "id": "e07cfd0b-91b4-f0e9-ce55-c77a96070a80",
                  "type": "interface-option",
                  "name": "validator",
                  "head": "validator",
                  "headId": "validator",
                  "interface": "get validator(): ValidatorFn|null",
                  "description": "Synchronous validator function composed of all the synchronous validators registered with this\ndirective."
                },
                {
                  "id": "5823563e-c94a-9f91-09a7-385d82d09a99",
                  "type": "interface-option",
                  "name": "asyncValidator",
                  "head": "asyncValidator",
                  "headId": "asyncValidator",
                  "interface": "get asyncValidator(): AsyncValidatorFn|null",
                  "description": "Asynchronous validator function composed of all the asynchronous validators registered with\nthis directive."
                }
              ],
              "title": "AbstractControlDirective",
              "url": "abstractcontroldirective",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/abstract_control_directive.ts",
              "generationName": "AbstractControlDirective",
              "generationStartLine": 25,
              "generationEndLine": 329
            },
            {
              "id": "518c3d14-c121-100b-7b24-2b26c1f04103",
              "entries": [
                {
                  "id": "6253631f-a860-a393-563f-71da2e908e71",
                  "type": "text",
                  "text": "A base class that all control `FormControl`-based directives extend. It binds a [`FormControl`](../formcontrol) object to a DOM element."
                },
                {
                  "id": "b872c1ab-40d1-7b89-1b7c-e84a98e0a1cc",
                  "type": "text",
                  "text": "### Subclasses\n\n* [NgModel](../ngmodel-directive)\n* [FormControlDirective](../formcontrol-directive)\n* [FormControlName](../formcontrolname-directive)"
                },
                {
                  "id": "d58c726c-156d-1ee4-a02a-b129919b3a98",
                  "type": "text",
                  "text": "## Interface, extends [AbstractControlDirective](../abstractcontroldirective)\n"
                },
                {
                  "id": "fa483bc2-c89a-6952-cd12-e2c583eefe8f",
                  "type": "toc"
                },
                {
                  "id": "15df432d-e341-fb16-10b3-7026b1f08357",
                  "type": "interface-option",
                  "name": "name",
                  "head": "name",
                  "headId": "name",
                  "interface": "name: string|number|null",
                  "description": "The name for the control"
                },
                {
                  "id": "13defc27-c7d0-d589-cfac-14046e4d52f4",
                  "type": "interface-option",
                  "name": "valueAccessor",
                  "head": "valueAccessor",
                  "headId": "valueAccessor",
                  "interface": "valueAccessor: ControlValueAccessor|null",
                  "description": "The value accessor for the control"
                },
                {
                  "id": "54db7152-cc92-61be-61bb-72dab2345fad",
                  "type": "interface-option",
                  "name": "validator",
                  "head": "validator",
                  "headId": "validator",
                  "interface": "get validator(): ValidatorFn|null",
                  "description": "The registered synchronous validator function for the control"
                },
                {
                  "id": "4aa18f70-4d0a-e61f-84d5-b0e6a5c60cbc",
                  "type": "interface-option",
                  "name": "asyncValidator",
                  "head": "asyncValidator",
                  "headId": "asyncValidator",
                  "interface": "get asyncValidator(): AsyncValidatorFn|null",
                  "description": "The registered async validator function for the control"
                },
                {
                  "id": "fc018d35-dd52-2bb0-d0ed-2281ac1a76b5",
                  "type": "interface-option",
                  "name": "viewToModelUpdate",
                  "head": "viewToModelUpdate",
                  "headId": "viewToModelUpdate",
                  "interface": "viewToModelUpdate(newValue: any): void",
                  "description": "The callback method to update the model from the view when requested"
                }
              ],
              "title": "NgControl",
              "url": "ngcontrol",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/ng_control.ts",
              "generationName": "NgControl",
              "generationStartLine": 21,
              "generationEndLine": 49
            },
            {
              "id": "1b4dd51a-7b9b-99b4-b88e-a137fbdd54b9",
              "entries": [
                {
                  "id": "a3f0445e-b55b-8016-d69e-8a4452377636",
                  "type": "text",
                  "text": "A base class for directives that contain multiple registered instances of [`NgControl`](../ngcontrol). Only used by the forms module."
                },
                {
                  "id": "1daa1bd0-09e4-c1b1-3ac7-af2a8dff300d",
                  "type": "text",
                  "text": "### Subclasses\n\n* [AbstractFormGroupDirective](../abstractformgroupdirective)\n    * [NgModelGroup](../ngmodelgroup-directive)\n    * [FormGroupName](../formgroupname-directive)\n* [NgForm](../ngform-directive)\n* [FormGroupDirective](../formgroup-directive)\n* [FormArrayName](../formarrayname-directive)"
                },
                {
                  "id": "11309235-bb15-8386-392c-806801f7006e",
                  "type": "text",
                  "text": "## Interface, extends [AbstractControlDirective](../abstractcontroldirective)\n"
                },
                {
                  "id": "7b17eb86-9b62-a60e-75d9-62c67b6ee2f7",
                  "type": "toc"
                },
                {
                  "id": "9a5b5ef0-e76d-a858-fd92-b56c76fdbac4",
                  "type": "interface-option",
                  "name": "name",
                  "head": "name",
                  "headId": "name",
                  "interface": "name: string|number|null",
                  "description": "The name for the control"
                },
                {
                  "id": "4ea87e9b-adbb-85fb-dcdd-48b3faa854f8",
                  "type": "interface-option",
                  "name": "formDirective",
                  "head": "formDirective",
                  "headId": "formDirective",
                  "interface": "get formDirective(): Form|null",
                  "description": "The top-level form directive for the control."
                },
                {
                  "id": "d73b5190-c673-e855-b78e-3708a53365fa",
                  "type": "interface-option",
                  "name": "path",
                  "head": "path",
                  "headId": "path",
                  "interface": "get path(): string[]|null",
                  "description": "The path to this group."
                }
              ],
              "title": "ControlContainer",
              "url": "controlcontainer",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/control_container.ts",
              "generationName": "ControlContainer",
              "generationStartLine": 20,
              "generationEndLine": 43
            },
            {
              "id": "7d77bb9b-cba0-9f79-b8d1-9b67840f9dfc",
              "entries": [
                {
                  "id": "717e7cee-9928-b207-d450-4f22ac1237d2",
                  "type": "text",
                  "text": "A base class for code shared between the [`NgModelGroup`](../ngmodelgroup-directive) and [`FormGroupName`](../formgroupname-directive) directives."
                },
                {
                  "id": "ad4b58a8-a883-f710-f028-916b6827651a",
                  "type": "text",
                  "text": "## Interface, extends [ControlContainer](../controlcontainer)\n\n"
                },
                {
                  "id": "cd7f46ef-8695-b093-bbb0-bc60c83dc7f9",
                  "type": "toc"
                },
                {
                  "id": "aa25cf3f-1215-c4e6-3604-b7dd7c24895b",
                  "type": "interface-option",
                  "name": "control",
                  "head": "control",
                  "headId": "control",
                  "interface": "get control(): FormGroup",
                  "description": "The `FormGroup` bound to this directive."
                },
                {
                  "id": "bc8801a3-9b0b-b9c3-eff6-e25d8d7f37e8",
                  "type": "interface-option",
                  "name": "path",
                  "head": "path",
                  "headId": "path",
                  "interface": "get path(): string[]",
                  "description": "The path to this group from the top-level directive."
                },
                {
                  "id": "9cc4042e-707c-0a3f-5c14-7b77e5649d59",
                  "type": "interface-option",
                  "name": "formDirective",
                  "head": "formDirective",
                  "headId": "formDirective",
                  "interface": "get formDirective(): Form|null",
                  "description": "The top-level directive for this group if present, otherwise null."
                },
                {
                  "id": "8c1355d7-2710-b6fc-a8ed-2992fbc161c4",
                  "type": "interface-option",
                  "name": "validator",
                  "head": "validator",
                  "headId": "validator",
                  "interface": "get validator(): ValidatorFn|null",
                  "description": "The synchronous validators registered with this group."
                },
                {
                  "id": "c7a6d0dd-ca15-6028-dca3-ca3ab8e9494f",
                  "type": "interface-option",
                  "name": "asyncValidator",
                  "head": "asyncValidator",
                  "headId": "asyncValidator",
                  "interface": "get asyncValidator(): AsyncValidatorFn|null",
                  "description": "The async validators registered with this group."
                }
              ],
              "title": "AbstractFormGroupDirective",
              "url": "abstractformgroupdirective",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/abstract_form_group_directive.ts",
              "generationName": "AbstractFormGroupDirective",
              "generationStartLine": 25,
              "generationEndLine": 77
            },
            {
              "id": "2a267edb-4f09-ace9-0cbe-1648d7b0a552",
              "entries": [
                {
                  "id": "9a95663d-9d83-247d-3ca3-7c93ace92552",
                  "type": "text",
                  "text": "Defines an interface that acts as a bridge between the Angular forms API and a native element in the DOM.\n\nImplement this interface to create a custom form control directive that integrates with Angular forms."
                },
                {
                  "id": "9987e220-94df-149d-1d8b-2140d74b1757",
                  "type": "tutorials",
                  "links": [
                    {
                      "url": "https://indepth.dev/never-again-be-confused-when-implementing-controlvalueaccessor-in-angular-forms/",
                      "label": "Never again be confused when implementing ControlValueAccessor in Angular forms"
                    }
                  ]
                },
                {
                  "id": "6578029d-bd11-0a5b-d23b-326cd6dbb337",
                  "type": "text",
                  "text": "## Interface"
                },
                {
                  "id": "c6b2a03e-3658-00dc-6546-eaea79bd9330",
                  "type": "toc"
                },
                {
                  "id": "0a74447a-eb3f-b9b3-3ec1-2fdd853b71e5",
                  "type": "interface-option",
                  "name": "writeValue",
                  "head": "writeValue",
                  "headId": "writeValue",
                  "interface": "writeValue(obj: any): void",
                  "description": "Writes a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n### Write a value to the element\n\nThe following example writes a value to the native DOM element.\n\n```ts\nwriteValue(value: any): void {\nthis._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n}\n```"
                },
                {
                  "id": "8beec04c-af0f-8b73-437d-2e7a07294983",
                  "type": "interface-option",
                  "name": "registerOnChange",
                  "head": "registerOnChange",
                  "headId": "registerOnChange",
                  "interface": "registerOnChange(fn: any): void",
                  "description": "Registers a callback function that is called when the control's value\nchanges in the UI.\n\nThis method is called by the forms API on initialization to update the form\nmodel when values propagate from the view to the model.\n\nWhen implementing the `registerOnChange` method in your own value accessor,\nsave the given function so your class calls it at the appropriate time.\n\n### Store the change function\n\nThe following example stores the provided function as an internal method.\n\n```ts\nregisterOnChange(fn: (_: any) => void): void {\nthis._onChange = fn;\n}\n```\n\nWhen the value changes in the UI, call the registered\nfunction to allow the forms API to update itself:\n\n```ts\nhost: {\n'(change)': '_onChange($event.target.value)'\n}\n```"
                },
                {
                  "id": "01250467-0677-d140-c154-c41f09530e24",
                  "type": "interface-option",
                  "name": "registerOnTouched",
                  "head": "registerOnTouched",
                  "headId": "registerOnTouched",
                  "interface": "registerOnTouched(fn: any): void",
                  "description": "Registers a callback function that is called by the forms API on initialization\nto update the form model on blur.\n\nWhen implementing `registerOnTouched` in your own value accessor, save the given\nfunction so your class calls it when the control should be considered\nblurred or \"touched\".\n\n### Store the callback function\n\nThe following example stores the provided function as an internal method.\n\n```ts\nregisterOnTouched(fn: any): void {\nthis._onTouched = fn;\n}\n```\n\nOn blur (or equivalent), your class should call the registered function to allow\nthe forms API to update itself:\n\n```ts\nhost: {\n'(blur)': '_onTouched()'\n}\n```"
                },
                {
                  "id": "7e2c32d2-a887-6d88-42be-6ffd3e0c17ee",
                  "type": "interface-option",
                  "name": "setDisabledState",
                  "head": "setDisabledState",
                  "headId": "setDisabledState",
                  "interface": "setDisabledState(isDisabled: boolean)?: void",
                  "description": "Function that is called by the forms API when the control status changes to\nor from 'DISABLED'. Depending on the status, it enables or disables the\nappropriate DOM element.\n\nThe following is an example of writing the disabled property to a native DOM element:\n\n```ts\nsetDisabledState(isDisabled: boolean): void {\nthis._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n}\n```"
                }
              ],
              "title": "ControlValueAccessor",
              "url": "controlvalueaccessor",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/control_value_accessor.ts",
              "generationName": "ControlValueAccessor",
              "generationStartLine": 23,
              "generationEndLine": 132
            },
            {
              "id": "b2323215-ecbf-7e95-1f77-69c501f18f25",
              "entries": [
                {
                  "id": "9d6da037-5f2d-5201-b4b9-fdbffa2da5c9",
                  "type": "text",
                  "text": "Creates a [`FormControl`](../formcontrol) instance from a domain model and binds it to a form control element.\n\nThe [`FormControl`](../formcontrol) instance tracks the value, user interaction, and\nvalidation status of the control and keeps the view synced with the model. If used\nwithin a parent form, the directive also registers itself with the form as a child\ncontrol.\n\nThis directive is used by itself or as part of a larger form. Use the\n`ngModel` selector to activate it.\n\nIt accepts a domain model as an optional `Input`. If you have a one-way binding\nto `ngModel` with `[]` syntax, changing the value of the domain model in the component\nclass sets the value in the view. If you have a two-way binding with `[()]` syntax\n(also known as 'banana-box syntax'), the value in the UI always syncs back to\nthe domain model in your class.\n\nTo inspect the properties of the associated [`FormControl`](../formcontrol) (like validity state), \nexport the directive into a local template variable using `ngModel` as the key (ex: `#myVar=\"ngModel\"`).\nYou then access the control using the directive's `control` property, \nbut most properties used (like `valid` and `dirty`) fall through to the control anyway for direct access. \nSee a full list of properties directly available in [`AbstractControlDirective`](../abstractcontroldirective).\n"
                },
                {
                  "id": "e492f2ab-3f85-8d46-9e52-e879c2c9e185",
                  "type": "demo",
                  "demo": "V6TemplatesNgmodel1DemoComponent",
                  "source": "```html\n<input [(ngModel)]=\"name\">\n{{ name }}\n```\n"
                },
                {
                  "id": "e4081ae9-fb12-74bf-d941-0ba3d3f22770",
                  "type": "text",
                  "text": "## Interface, extends [NgControl](../ngcontrol)"
                },
                {
                  "id": "7a4138ca-f233-cc23-2e7a-761b37b6541f",
                  "type": "toc"
                },
                {
                  "id": "85169a6c-e6b1-8cfe-f892-622caa1be691",
                  "type": "interface-option",
                  "name": "control",
                  "head": "control",
                  "headId": "control",
                  "interface": "control: FormControl",
                  "description": ""
                },
                {
                  "id": "b83490a5-9867-42b3-acf2-be0d9e3675ef",
                  "type": "interface-option",
                  "name": "ngAcceptInputType_isDisabled",
                  "head": "ngAcceptInputType_isDisabled",
                  "headId": "ngAcceptInputType_isDisabled",
                  "interface": "static ngAcceptInputType_isDisabled: boolean|string",
                  "description": ""
                },
                {
                  "id": "a8924407-716c-a74b-c185-20b4f8f40a29",
                  "type": "interface-option",
                  "name": "viewModel",
                  "head": "viewModel",
                  "headId": "viewModel",
                  "interface": "viewModel: any",
                  "description": "Internal reference to the view model value."
                },
                {
                  "id": "b466dffd-1499-9250-5f35-b42a9981d492",
                  "type": "interface-option",
                  "name": "name",
                  "head": "name",
                  "headId": "name",
                  "interface": "@Input() name: string",
                  "description": "Tracks the name bound to the directive. If a parent form exists, it\nuses this name as a key to retrieve this control's value."
                },
                {
                  "id": "97d05244-d5a7-b3e8-6923-6cd79fe92e01",
                  "type": "interface-option",
                  "name": "isDisabled",
                  "head": "isDisabled",
                  "headId": "isDisabled",
                  "interface": "@Input('disabled') isDisabled: boolean",
                  "description": "Tracks whether the control is disabled."
                },
                {
                  "id": "32a14424-9776-890a-16d4-ae119cdefea8",
                  "type": "interface-option",
                  "name": "model",
                  "head": "model",
                  "headId": "model",
                  "interface": "@Input('ngModel') model: any",
                  "description": "Tracks the value bound to this directive."
                },
                {
                  "id": "8795ac12-7119-7b2d-824d-31d72e809fb7",
                  "type": "interface-option",
                  "name": "options",
                  "head": "options",
                  "headId": "options",
                  "interface": "@Input('ngModelOptions') options: {name?: string, standalone?: boolean, updateOn?: FormHooks}",
                  "description": "Tracks the configuration options for this `ngModel` instance.\n\n**name**: An alternative to setting the name attribute on the form control element. See\nthe [example](api/forms/NgModel#using-ngmodel-on-a-standalone-control) for using `NgModel`\nas a standalone control.\n\n**standalone**: When set to true, the `ngModel` will not register itself with its parent form,\nand acts as if it's not in the form. Defaults to false. If no parent form exists, this option\nhas no effect.\n\n**updateOn**: Defines the event upon which the form control value and validity update.\nDefaults to 'change'. Possible values: `'change'` | `'blur'` | `'submit'`."
                },
                {
                  "id": "e454013a-a0b3-47d5-abc0-fb79120fc644",
                  "type": "interface-option",
                  "name": "update",
                  "head": "update",
                  "headId": "update",
                  "interface": "@Output('ngModelChange') update",
                  "description": "Event emitter for producing the `ngModelChange` event after\nthe view model updates."
                },
                {
                  "id": "378f8c41-3e88-ee6d-1068-80909775f32c",
                  "type": "interface-option",
                  "name": "path",
                  "head": "path",
                  "headId": "path",
                  "interface": "get path(): string[]",
                  "description": "Returns an array that represents the path from the top-level form to this control.\nEach index is the string name of the control on that level."
                },
                {
                  "id": "a12c2145-fa7a-c021-3e48-197fa949894c",
                  "type": "interface-option",
                  "name": "formDirective",
                  "head": "formDirective",
                  "headId": "formDirective",
                  "interface": "get formDirective(): any",
                  "description": "The top-level directive for this control if present, otherwise null."
                },
                {
                  "id": "bffdcd50-7c5c-1316-0e14-750f2e5ef145",
                  "type": "interface-option",
                  "name": "validator",
                  "head": "validator",
                  "headId": "validator",
                  "interface": "get validator(): ValidatorFn|null",
                  "description": "Synchronous validator function composed of all the synchronous validators\nregistered with this directive."
                },
                {
                  "id": "dbd4692b-ba03-20b6-c0ac-5df0e27a8e1d",
                  "type": "interface-option",
                  "name": "asyncValidator",
                  "head": "asyncValidator",
                  "headId": "asyncValidator",
                  "interface": "get asyncValidator(): AsyncValidatorFn|null",
                  "description": "Async validator function composed of all the async validators registered with this\ndirective."
                },
                {
                  "id": "43124171-231b-8af3-5bf9-ce919b0ce53d",
                  "type": "interface-option",
                  "name": "viewToModelUpdate",
                  "head": "viewToModelUpdate",
                  "headId": "viewToModelUpdate",
                  "interface": "viewToModelUpdate(newValue: any): void",
                  "description": "Sets the new value for the view model and emits an `ngModelChange` event."
                }
              ],
              "title": "[ngModel] directive",
              "url": "ngmodel-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/ng_model.ts",
              "generationName": "NgModel",
              "generationStartLine": 133,
              "generationEndLine": 332
            },
            {
              "id": "84dc8bae-b1d1-ec16-4a1f-eed391e8d4d1",
              "entries": [
                {
                  "id": "d34aa898-d516-c6e6-5c90-9ce571edfbbc",
                  "type": "text",
                  "text": "Creates and binds a [`FormGroup`](../formgroup) instance to a DOM element.\n\nThis directive can only be used as a child of [`NgForm`](../ngform-directive) (within `<form>` tags).\n\nUse this directive to validate a sub-group of your form separately from the\nrest of your form, or if some values in your domain model make more sense\nto consume together in a nested object.\n\nProvide a name for the sub-group and it will become the key\nfor the sub-group in the form's full value. If you need direct access, export the directive into\na local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`)."
                },
                {
                  "id": "17781acc-848d-61c6-9cee-48d4ef629da6",
                  "type": "text",
                  "text": "### Consuming controls in a grouping\n\nThe following example shows you how to combine controls together in a sub-group of the form.\n\n```\nimport {Component} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\n      <p *ngIf=\"nameCtrl.invalid\">Name is invalid.</p>\n    \n      <div ngModelGroup=\"name\" #nameCtrl=\"ngModelGroup\">\n        <input name=\"first\" [ngModel]=\"name.first\" minlength=\"2\">\n        <input name=\"last\" [ngModel]=\"name.last\" required>\n      </div>\n      \n      <input name=\"email\" ngModel> \n      <button>Submit</button>\n    </form>\n    \n    <button (click)=\"setValue()\">Set value</button>\n  `,\n})\nexport class NgModelGroupComp {\n  name = {first: 'Nancy', last: 'Drew'};\n\n  onSubmit(f: NgForm) {\n    console.log(f.value);  // {name: {first: 'Nancy', last: 'Drew'}, email: ''}\n    console.log(f.valid);  // true\n  }\n\n  setValue() { this.name = {first: 'Bess', last: 'Marvin'}; }\n}\n```"
                },
                {
                  "id": "e93263e1-535e-9839-1be1-ba9a44a0ee8b",
                  "type": "text",
                  "text": "## Interface, extends [AbstractFormGroupDirective](../abstractformgroupdirective)"
                },
                {
                  "id": "b8969562-9a2b-02ae-9c81-1edcd9f44627",
                  "type": "interface-option",
                  "name": "name",
                  "head": "name",
                  "headId": "name",
                  "interface": "@Input('ngModelGroup') name: string",
                  "description": "Tracks the name of the `NgModelGroup` bound to the directive. The name corresponds\nto a key in the parent `NgForm`."
                }
              ],
              "title": "[ngModelGroup] directive",
              "url": "ngmodelgroup-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/ng_model_group.ts",
              "generationName": "NgModelGroup",
              "generationStartLine": 50,
              "generationEndLine": 78
            },
            {
              "id": "6945d97e-f116-e108-bfa0-3ab887319368",
              "entries": [
                {
                  "id": "2e2f13ac-95f6-bbf2-f7c5-9934ea1dfd77",
                  "type": "text",
                  "text": "Syncs a standalone [`FormControl`](../formcontrol) instance to a form control element.\n"
                },
                {
                  "id": "0e5b7ada-aa0b-128e-c831-0023005e24ee",
                  "type": "text",
                  "text": "### Registering a single form control\n\nThe following examples shows how to register a standalone control and set its value.\n\n```\nimport {Component} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n     <input [formControl]=\"control\">\n      \n     <p>Value: {{ control.value }}</p>\n     <p>Validation status: {{ control.status }}</p>\n     \n     <button (click)=\"setValue()\">Set value</button>\n  `,\n})\nexport class SimpleFormControl {\n  control: FormControl = new FormControl('value', Validators.minLength(2));\n\n  setValue() { this.control.setValue('new value'); }\n}\n```"
                },
                {
                  "id": "b9f0086d-0bcb-98e8-8926-6376d0d4b2b4",
                  "type": "text",
                  "text": "## Interface, extends [NgControl](../ngcontrol)\n"
                },
                {
                  "id": "fedba2fd-6b91-9668-9cb1-dcef5301dd47",
                  "type": "toc"
                },
                {
                  "id": "614291cc-86a4-ae07-ca44-532a30713b72",
                  "type": "interface-option",
                  "name": "viewModel",
                  "head": "viewModel",
                  "headId": "viewModel",
                  "interface": "viewModel: any",
                  "description": "Internal reference to the view model value."
                },
                {
                  "id": "076829b3-9542-a787-8d0a-5ee77f584af1",
                  "type": "interface-option",
                  "name": "form",
                  "head": "form",
                  "headId": "form",
                  "interface": "@Input('formControl') form: FormControl",
                  "description": "Tracks the `FormControl` instance bound to the directive."
                },
                {
                  "id": "4b4d67bb-e0bb-e58c-2863-d76479de1638",
                  "type": "interface-option",
                  "name": "isDisabled",
                  "head": "isDisabled",
                  "headId": "isDisabled",
                  "interface": "@Input('disabled') set isDisabled(isDisabled: boolean)",
                  "description": "Triggers a warning in dev mode that this input should not be used with reactive forms."
                },
                {
                  "id": "b0da6573-1a81-975a-52c4-92708e8cfc5b",
                  "type": "interface-option",
                  "name": "model",
                  "head": "model",
                  "headId": "model",
                  "interface": "@Input('ngModel') model: any",
                  "description": ""
                },
                {
                  "id": "5967d88b-8b8e-e7bc-787a-ae537a9278d2",
                  "type": "interface-option",
                  "name": "update",
                  "head": "update",
                  "headId": "update",
                  "interface": "@Output('ngModelChange') update",
                  "description": ""
                },
                {
                  "id": "39374199-3a39-211d-28d4-452be44c861f",
                  "type": "interface-option",
                  "name": "path",
                  "head": "path",
                  "headId": "path",
                  "interface": "get path(): string[]",
                  "description": "Returns an array that represents the path from the top-level form to this control.\nEach index is the string name of the control on that level."
                },
                {
                  "id": "3067dc94-8dcb-8f76-9400-efe18856b129",
                  "type": "interface-option",
                  "name": "validator",
                  "head": "validator",
                  "headId": "validator",
                  "interface": "get validator(): ValidatorFn|null",
                  "description": "Synchronous validator function composed of all the synchronous validators\nregistered with this directive."
                },
                {
                  "id": "6574edfc-09ac-0ba1-be96-09642ce47d88",
                  "type": "interface-option",
                  "name": "asyncValidator",
                  "head": "asyncValidator",
                  "headId": "asyncValidator",
                  "interface": "get asyncValidator(): AsyncValidatorFn|null",
                  "description": "Async validator function composed of all the async validators registered with this\ndirective."
                },
                {
                  "id": "d5d9fd08-8629-15f2-e293-6b358cbe23cf",
                  "type": "interface-option",
                  "name": "control",
                  "head": "control",
                  "headId": "control",
                  "interface": "get control(): FormControl",
                  "description": "The `FormControl` bound to this directive."
                },
                {
                  "id": "514d8ce3-eb25-a760-ac06-1fabab6dbf73",
                  "type": "interface-option",
                  "name": "viewToModelUpdate",
                  "head": "viewToModelUpdate",
                  "headId": "viewToModelUpdate",
                  "interface": "viewToModelUpdate(newValue: any): void",
                  "description": "Sets the new value for the view model and emits an `ngModelChange` event."
                }
              ],
              "title": "[formControl] directive",
              "url": "formcontrol-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/reactive_directives/form_control_directive.ts",
              "generationName": "FormControlDirective",
              "generationStartLine": 53,
              "generationEndLine": 178
            },
            {
              "id": "ccc48d6c-176f-bf23-2a32-35734ac4e8b0",
              "entries": [
                {
                  "id": "458af31c-e080-fece-4de0-ad604a29142d",
                  "type": "text",
                  "text": "Syncs a [`FormControl`](../formcontrol) in an existing [`FormGroup`](../formgroup) to a form control element by name."
                },
                {
                  "id": "4cc0837c-446b-b26c-99b5-8c0ec55f4d49",
                  "type": "text",
                  "text": "### Register `FormControl` within a group\n\nThe following example shows how to register multiple form controls within a form group and set their value.\n\n```\nimport {Component} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <div *ngIf=\"first.invalid\"> Name is too short. </div>\n\n      <input formControlName=\"first\" placeholder=\"First name\">\n      <input formControlName=\"last\" placeholder=\"Last name\">\n\n      <button type=\"submit\">Submit</button>\n   </form>\n   <button (click)=\"setValue()\">Set preset value</button>\n  `,\n})\nexport class SimpleFormGroup {\n  form = new FormGroup({\n    first: new FormControl('Nancy', Validators.minLength(2)),\n    last: new FormControl('Drew'),\n  });\n\n  get first(): any { return this.form.get('first'); }\n\n  onSubmit(): void {\n    console.log(this.form.value);  // {first: 'Nancy', last: 'Drew'}\n  }\n\n  setValue() { this.form.setValue({first: 'Carson', last: 'Drew'}); }\n}\n```"
                },
                {
                  "id": "0f3a149d-ec04-516d-6d80-663210066398",
                  "type": "text",
                  "text": "## Interface, extends [NgControl](../ngcontrol)"
                },
                {
                  "id": "584e6468-64a6-7f6c-23b1-a68886643f84",
                  "type": "toc"
                },
                {
                  "id": "5204b2d6-44da-e1fc-8b35-6bb2a6920047",
                  "type": "interface-option",
                  "name": "control",
                  "head": "control",
                  "headId": "control",
                  "interface": "control: FormControl",
                  "description": "Tracks the `FormControl` instance bound to the directive."
                },
                {
                  "id": "dd7c6142-ccfe-58b0-d340-19fa5870e76b",
                  "type": "interface-option",
                  "name": "name",
                  "head": "name",
                  "headId": "name",
                  "interface": "@Input('formControlName') name: string|number|null",
                  "description": "Tracks the name of the `FormControl` bound to the directive. The name corresponds\nto a key in the parent `FormGroup` or `FormArray`.\nAccepts a name as a string or a number.\nThe name in the form of a string is useful for individual forms,\nwhile the numerical form allows for form controls to be bound\nto indices when iterating over controls in a `FormArray`."
                },
                {
                  "id": "a78ef4c0-7a90-8d42-214c-fa4e9bc8836d",
                  "type": "interface-option",
                  "name": "isDisabled",
                  "head": "isDisabled",
                  "headId": "isDisabled",
                  "interface": "@Input('disabled') set isDisabled(isDisabled: boolean)",
                  "description": "Triggers a warning in dev mode that this input should not be used with reactive forms."
                },
                {
                  "id": "69871164-2eb8-7f72-c2a5-c67ea4654455",
                  "type": "interface-option",
                  "name": "model",
                  "head": "model",
                  "headId": "model",
                  "interface": "@Input('ngModel') model: any",
                  "description": ""
                },
                {
                  "id": "7f45b9b4-a714-6262-a2c1-d4f2adc4787d",
                  "type": "interface-option",
                  "name": "update",
                  "head": "update",
                  "headId": "update",
                  "interface": "@Output('ngModelChange') update",
                  "description": ""
                },
                {
                  "id": "3bdad745-9d72-e6ec-d1ff-dbee7cb79d9e",
                  "type": "interface-option",
                  "name": "viewToModelUpdate",
                  "head": "viewToModelUpdate",
                  "headId": "viewToModelUpdate",
                  "interface": "viewToModelUpdate(newValue: any): void",
                  "description": "Sets the new value for the view model and emits an `ngModelChange` event."
                },
                {
                  "id": "6026ab73-101a-850e-c2a6-d909c6dcf043",
                  "type": "interface-option",
                  "name": "path",
                  "head": "path",
                  "headId": "path",
                  "interface": "get path(): string[]",
                  "description": "Returns an array that represents the path from the top-level form to this control.\nEach index is the string name of the control on that level."
                },
                {
                  "id": "08147204-ce01-111c-2f42-efb9eca7dd5d",
                  "type": "interface-option",
                  "name": "formDirective",
                  "head": "formDirective",
                  "headId": "formDirective",
                  "interface": "get formDirective(): any",
                  "description": "The top-level directive for this group if present, otherwise null."
                },
                {
                  "id": "a2a67930-0ba6-748a-99d8-08ef5bd45fe8",
                  "type": "interface-option",
                  "name": "validator",
                  "head": "validator",
                  "headId": "validator",
                  "interface": "get validator(): ValidatorFn|null",
                  "description": "Synchronous validator function composed of all the synchronous validators\nregistered with this directive."
                },
                {
                  "id": "58919acd-e0ea-1efa-19d8-9046a18062a5",
                  "type": "interface-option",
                  "name": "asyncValidator",
                  "head": "asyncValidator",
                  "headId": "asyncValidator",
                  "interface": "get asyncValidator(): AsyncValidatorFn",
                  "description": "Async validator function composed of all the async validators registered with this\ndirective."
                }
              ],
              "title": "[formControlName] directive",
              "url": "formcontrolname-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/reactive_directives/form_control_name.ts",
              "generationName": "FormControlName",
              "generationStartLine": 64,
              "generationEndLine": 213
            },
            {
              "id": "9f65dff0-a39c-f95b-7262-ac69f942a4b4",
              "entries": [
                {
                  "id": "8591a03e-425a-80e5-dec7-177e7bb8d068",
                  "type": "text",
                  "text": "Binds an existing [`FormGroup`](../formgroup) to a DOM element.\n\nThis directive accepts an existing [`FormGroup`](../formgroup) instance. It will then use this\n[`FormGroup`](../formgroup) instance to match any child [`FormControl`](../formcontrol), [`FormGroup`](../formgroup),\nand [`FormArray`](../formarray) instances to child [`FormControlName`](../formcontrolname-directive), [`FormGroupName`](../formgroupname-directive),\nand [`FormArrayName`](../formarrayname-directive) directives."
                },
                {
                  "id": "273d5b4c-1520-c40c-9961-35d5c7b1c1ba",
                  "type": "text",
                  "text": "### Register Form Group\n\nThe following example registers a `FormGroup` with first name and last name controls,\nand listens for the *ngSubmit* event when the button is clicked.\n\n```\nimport {Component} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <div *ngIf=\"first.invalid\"> Name is too short. </div>\n\n      <input formControlName=\"first\" placeholder=\"First name\">\n      <input formControlName=\"last\" placeholder=\"Last name\">\n\n      <button type=\"submit\">Submit</button>\n   </form>\n   <button (click)=\"setValue()\">Set preset value</button>\n  `,\n})\nexport class SimpleFormGroup {\n  form = new FormGroup({\n    first: new FormControl('Nancy', Validators.minLength(2)),\n    last: new FormControl('Drew'),\n  });\n\n  get first(): any { return this.form.get('first'); }\n\n  onSubmit(): void {\n    console.log(this.form.value);  // {first: 'Nancy', last: 'Drew'}\n  }\n\n  setValue() { this.form.setValue({first: 'Carson', last: 'Drew'}); }\n}\n```"
                },
                {
                  "id": "3d523c24-0937-8474-a509-b5f84aa93563",
                  "type": "text",
                  "text": "## Interface, extends [ControlContainer](../controlcontainer)\n"
                },
                {
                  "id": "7a17ea41-5709-b0fe-591f-f8ffd4a17256",
                  "type": "toc"
                },
                {
                  "id": "a1446bcb-e02f-71cb-e33f-678fc3375b36",
                  "type": "interface-option",
                  "name": "submitted",
                  "head": "submitted",
                  "headId": "submitted",
                  "interface": "submitted: boolean",
                  "description": "Reports whether the form submission has been triggered."
                },
                {
                  "id": "ecc8b8f3-5a8c-f314-001e-a82dd863b295",
                  "type": "interface-option",
                  "name": "directives",
                  "head": "directives",
                  "headId": "directives",
                  "interface": "directives: FormControlName[]",
                  "description": "Tracks the list of added `FormControlName` instances"
                },
                {
                  "id": "240300e5-9af0-86df-8ea4-0d52c4c502e0",
                  "type": "interface-option",
                  "name": "form",
                  "head": "form",
                  "headId": "form",
                  "interface": "@Input('formGroup') form: FormGroup",
                  "description": "Tracks the `FormGroup` bound to this directive."
                },
                {
                  "id": "d9a2be13-b884-5997-51de-c5d1aba2199f",
                  "type": "interface-option",
                  "name": "ngSubmit",
                  "head": "ngSubmit",
                  "headId": "ngSubmit",
                  "interface": "@Output() ngSubmit",
                  "description": "Emits an event when the form submission has been triggered."
                },
                {
                  "id": "e26e05b7-3be9-894c-0509-d26c5265e4b6",
                  "type": "interface-option",
                  "name": "formDirective",
                  "head": "formDirective",
                  "headId": "formDirective",
                  "interface": "get formDirective(): Form",
                  "description": "Returns this directive's instance."
                },
                {
                  "id": "7215ce09-07f4-f4a7-1331-35faafad8a0b",
                  "type": "interface-option",
                  "name": "control",
                  "head": "control",
                  "headId": "control",
                  "interface": "get control(): FormGroup",
                  "description": "Returns the `FormGroup` bound to this directive."
                },
                {
                  "id": "c0464f5c-50e8-8c5d-1738-6cda487e4e59",
                  "type": "interface-option",
                  "name": "path",
                  "head": "path",
                  "headId": "path",
                  "interface": "get path(): string[]",
                  "description": "Returns an array representing the path to this group. Because this directive\nalways lives at the top level of a form, it always an empty array."
                },
                {
                  "id": "b88497a9-667d-2920-6e28-07a4f3c0143d",
                  "type": "interface-option",
                  "name": "addControl",
                  "head": "addControl",
                  "headId": "addControl",
                  "interface": "addControl(dir: FormControlName): FormControl",
                  "description": "Method that sets up the control directive in this group, re-calculates its value\nand validity, and adds the instance to the internal list of directives."
                },
                {
                  "id": "64e3bf50-0f0a-2829-0d9d-b37d76bd5d2b",
                  "type": "interface-option",
                  "name": "getControl",
                  "head": "getControl",
                  "headId": "getControl",
                  "interface": "getControl(dir: FormControlName): FormControl",
                  "description": "Retrieves the `FormControl` instance from the provided `FormControlName` directive"
                },
                {
                  "id": "6e7d031e-842e-28b1-90ca-b3a7fab7974a",
                  "type": "interface-option",
                  "name": "removeControl",
                  "head": "removeControl",
                  "headId": "removeControl",
                  "interface": "removeControl(dir: FormControlName): void",
                  "description": "Removes the `FormControlName` instance from the internal list of directives"
                },
                {
                  "id": "aca332cb-be4d-aea5-aafa-069c89b6c672",
                  "type": "interface-option",
                  "name": "addFormGroup",
                  "head": "addFormGroup",
                  "headId": "addFormGroup",
                  "interface": "addFormGroup(dir: FormGroupName): void",
                  "description": "Adds a new `FormGroupName` directive instance to the form."
                },
                {
                  "id": "8b4c1430-9f7b-3ee6-820f-5a969ddc73cd",
                  "type": "interface-option",
                  "name": "removeFormGroup",
                  "head": "removeFormGroup",
                  "headId": "removeFormGroup",
                  "interface": "removeFormGroup(dir: FormGroupName): void",
                  "description": "Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the\nview."
                },
                {
                  "id": "aad8c202-d040-d396-2ec2-91c93b8bf62e",
                  "type": "interface-option",
                  "name": "getFormGroup",
                  "head": "getFormGroup",
                  "headId": "getFormGroup",
                  "interface": "getFormGroup(dir: FormGroupName): FormGroup",
                  "description": "Retrieves the `FormGroup` for a provided `FormGroupName` directive instance"
                },
                {
                  "id": "eb4e9881-a48f-a4d3-7e85-9e5c83a366a5",
                  "type": "interface-option",
                  "name": "addFormArray",
                  "head": "addFormArray",
                  "headId": "addFormArray",
                  "interface": "addFormArray(dir: FormArrayName): void",
                  "description": "Performs the necessary setup when a `FormArrayName` directive instance is added to the view."
                },
                {
                  "id": "4fbdc1f8-2c5a-9337-5d81-14d380bd1505",
                  "type": "interface-option",
                  "name": "removeFormArray",
                  "head": "removeFormArray",
                  "headId": "removeFormArray",
                  "interface": "removeFormArray(dir: FormArrayName): void",
                  "description": "Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the\nview."
                },
                {
                  "id": "ff8146f7-6bbe-2f02-428a-9846ced7c8cf",
                  "type": "interface-option",
                  "name": "getFormArray",
                  "head": "getFormArray",
                  "headId": "getFormArray",
                  "interface": "getFormArray(dir: FormArrayName): FormArray",
                  "description": "Retrieves the `FormArray` for a provided `FormArrayName` directive instance."
                },
                {
                  "id": "79c8a033-c277-12e9-275b-846fa34025d0",
                  "type": "interface-option",
                  "name": "updateModel",
                  "head": "updateModel",
                  "headId": "updateModel",
                  "interface": "updateModel(dir: FormControlName, value: any): void",
                  "description": "Sets the new value for the provided `FormControlName` directive."
                },
                {
                  "id": "708629fc-c98b-edbd-4f4a-9d8f3650f93a",
                  "type": "interface-option",
                  "name": "onSubmit",
                  "head": "onSubmit",
                  "headId": "onSubmit",
                  "interface": "onSubmit($event: Event): boolean",
                  "description": "Method called with the \"submit\" event is triggered on the form.\nTriggers the `ngSubmit` emitter to emit the \"submit\" event as its payload."
                },
                {
                  "id": "cfe33281-ae04-0504-51fa-8bf11071fc6b",
                  "type": "interface-option",
                  "name": "onReset",
                  "head": "onReset",
                  "headId": "onReset",
                  "interface": "onReset(): void",
                  "description": "Method called when the \"reset\" event is triggered on the form."
                },
                {
                  "id": "b92950ab-9dcc-677e-006b-8d458eeecdd3",
                  "type": "interface-option",
                  "name": "resetForm",
                  "head": "resetForm",
                  "headId": "resetForm",
                  "interface": "resetForm(value: any = undefined): void",
                  "description": "Resets the form to an initial value and resets its submitted status."
                }
              ],
              "title": "[formGroup] directive",
              "url": "formgroup-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/reactive_directives/form_group_directive.ts",
              "generationName": "FormGroupDirective",
              "generationStartLine": 51,
              "generationEndLine": 362
            },
            {
              "id": "1beae93c-4145-1d32-c811-208c8df968b3",
              "entries": [
                {
                  "id": "04a2c0de-e1bc-f067-20ef-dcabc0a81a5b",
                  "type": "text",
                  "text": "Syncs a nested [`FormGroup`](../formgroup) to a DOM element.\n\nThis directive can only be used with a parent [`FormGroupDirective`](../formgroup-directive).\nIt accepts the string name of the nested [`FormGroup`](../formgroup) to link, and\nlooks for a [`FormGroup`](../formgroup) registered with that name in the parent\n[`FormGroup`](../formgroup) instance you passed into [`FormGroupDirective`](../formgroup-directive).\n\nUse nested form groups to validate a sub-group of a\nform separately from the rest or to group the values of certain\ncontrols into their own nested object."
                },
                {
                  "id": "6fdfbcda-9aee-b8a6-bde5-9bb13e4f7009",
                  "type": "text",
                  "text": "### Access the group by name\n\nThe following example uses the [get](../abstractcontrol#get) method to access the associated `FormGroup`.\n\n```ts\n  this.form.get('name');\n```\n"
                },
                {
                  "id": "72c0935e-8b91-365f-d647-66956fd47649",
                  "type": "text",
                  "text": "### Access individual controls in the group\n\nThe following example uses the [get](../abstractcontrol#get) method to access\nindividual controls within the group using dot syntax.\n\n```ts\n  this.form.get('name.first');\n```\n"
                },
                {
                  "id": "cd0968f3-d3d3-40ce-a668-f5756c7d018e",
                  "type": "text",
                  "text": "### Register a nested `FormGroup`.\n\nThe following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\nand provides methods to retrieve the nested `FormGroup` and individual controls.\n\n```\nimport {Component} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <p *ngIf=\"name.invalid\">Name is invalid.</p>\n\n      <div formGroupName=\"name\">\n        <input formControlName=\"first\" placeholder=\"First name\">\n        <input formControlName=\"last\" placeholder=\"Last name\">\n      </div>\n      <input formControlName=\"email\" placeholder=\"Email\">\n      <button type=\"submit\">Submit</button>\n    </form>\n\n    <button (click)=\"setPreset()\">Set preset</button>\n`,\n})\nexport class NestedFormGroupComp {\n  form = new FormGroup({\n    name: new FormGroup({\n      first: new FormControl('Nancy', Validators.minLength(2)),\n      last: new FormControl('Drew', Validators.required)\n    }),\n    email: new FormControl()\n  });\n\n  get first(): any { return this.form.get('name.first'); }\n\n  get name(): any { return this.form.get('name'); }\n\n  onSubmit() {\n    console.log(this.first.value);  // 'Nancy'\n    console.log(this.name.value);   // {first: 'Nancy', last: 'Drew'}\n    console.log(this.form.value);   // {name: {first: 'Nancy', last: 'Drew'}, email: ''}\n    console.log(this.form.status);  // VALID\n  }\n\n  setPreset() { this.name.setValue({first: 'Bess', last: 'Marvin'}); }\n}\n```"
                },
                {
                  "id": "3819e8c6-cdf1-f24a-1a14-b869ce7ff2bd",
                  "type": "text",
                  "text": "## Interface, extends [AbstractFormGroupDirective](../abstractformgroupdirective)\n"
                },
                {
                  "id": "0484fd99-36e3-57f1-a085-424337738b79",
                  "type": "interface-option",
                  "name": "name",
                  "head": "name",
                  "headId": "name",
                  "interface": "@Input('formGroupName') name: string|number|null",
                  "description": "Tracks the name of the `FormGroup` bound to the directive. The name corresponds\nto a key in the parent `FormGroup` or `FormArray`.\nAccepts a name as a string or a number.\nThe name in the form of a string is useful for individual forms,\nwhile the numerical form allows for form groups to be bound\nto indices when iterating over groups in a `FormArray`."
                }
              ],
              "title": "[formGroupName] directive",
              "url": "formgroupname-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/reactive_directives/form_group_name.ts",
              "generationName": "FormGroupName",
              "generationStartLine": 73,
              "generationEndLine": 104
            },
            {
              "id": "34bd9dc0-4274-6eb6-965d-ae7552a4f6c9",
              "entries": [
                {
                  "id": "536d89b2-bd92-2ca1-534a-ebad1dc68fb5",
                  "type": "text",
                  "text": "Syncs a nested [`FormArray`](../formarray) to a DOM element.\n\nThis directive is designed to be used with a parent `FormGroupDirective` (selector:\n`[formGroup]`).\n\nIt accepts the string name of the nested [`FormArray`](../formarray) you want to link, and\nwill look for a [`FormArray`](../formarray) registered with that name in the parent\n[`FormGroup`](../formgroup) instance you passed into [`FormGroupDirective`](../formgroup-directive).\n\n```\nimport {Component} from '@angular/core';\nimport {FormArray, FormControl, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cities.controls; index as i\">\n          <input [formControlName]=\"i\" placeholder=\"City\">\n        </div>\n      </div>\n      <button>Submit</button>\n    </form>\n    \n    <button (click)=\"addCity()\">Add City</button>\n    <button (click)=\"setPreset()\">Set preset</button>\n  `,\n})\nexport class NestedFormArray {\n  form = new FormGroup({\n    cities: new FormArray([\n      new FormControl('SF'),\n      new FormControl('NY'),\n    ]),\n  });\n\n  get cities(): FormArray { return this.form.get('cities') as FormArray; }\n\n  addCity() { this.cities.push(new FormControl()); }\n\n  onSubmit() {\n    console.log(this.cities.value);  // ['SF', 'NY']\n    console.log(this.form.value);    // { cities: ['SF', 'NY'] }\n  }\n\n  setPreset() { this.cities.patchValue(['LA', 'MTV']); }\n}\n```"
                },
                {
                  "id": "d0d74f9a-6a0e-7ec7-2cb8-157eba8176b4",
                  "type": "text",
                  "text": "## Interface, extends [ControlContainer](../controlcontainer)\n"
                },
                {
                  "id": "0d5ddd51-443b-e36d-3141-696aa3f23bad",
                  "type": "toc"
                },
                {
                  "id": "2d6296d1-f926-17e5-dd89-23251eab9a07",
                  "type": "interface-option",
                  "name": "name",
                  "head": "name",
                  "headId": "name",
                  "interface": "@Input('formArrayName') name: string|number|null",
                  "description": "Tracks the name of the `FormArray` bound to the directive. The name corresponds\nto a key in the parent `FormGroup` or `FormArray`.\nAccepts a name as a string or a number.\nThe name in the form of a string is useful for individual forms,\nwhile the numerical form allows for form arrays to be bound\nto indices when iterating over arrays in a `FormArray`."
                },
                {
                  "id": "40c7781f-1825-6d79-37c5-28782a842e42",
                  "type": "interface-option",
                  "name": "control",
                  "head": "control",
                  "headId": "control",
                  "interface": "get control(): FormArray",
                  "description": "The `FormArray` bound to this directive."
                },
                {
                  "id": "c53721ae-aad9-07e7-5836-53c72102ce1a",
                  "type": "interface-option",
                  "name": "formDirective",
                  "head": "formDirective",
                  "headId": "formDirective",
                  "interface": "get formDirective(): FormGroupDirective|null",
                  "description": "The top-level directive for this group if present, otherwise null."
                },
                {
                  "id": "388143c0-9d5d-e377-f2f2-3758df8f14c0",
                  "type": "interface-option",
                  "name": "path",
                  "head": "path",
                  "headId": "path",
                  "interface": "get path(): string[]",
                  "description": "Returns an array that represents the path from the top-level form to this control.\nEach index is the string name of the control on that level."
                },
                {
                  "id": "e56e861d-b904-e695-031c-ac957c734c44",
                  "type": "interface-option",
                  "name": "validator",
                  "head": "validator",
                  "headId": "validator",
                  "interface": "get validator(): ValidatorFn|null",
                  "description": "Synchronous validator function composed of all the synchronous validators registered with this\ndirective."
                },
                {
                  "id": "458edb33-9eb6-4716-7170-24ecbe14b27c",
                  "type": "interface-option",
                  "name": "asyncValidator",
                  "head": "asyncValidator",
                  "headId": "asyncValidator",
                  "interface": "get asyncValidator(): AsyncValidatorFn|null",
                  "description": "Async validator function composed of all the async validators registered with this directive."
                }
              ],
              "title": "[formArrayName] directive",
              "url": "formarrayname-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/reactive_directives/form_group_name.ts",
              "generationName": "FormArrayName",
              "generationStartLine": 135,
              "generationEndLine": 213
            },
            {
              "id": "88d3065b-b589-8a9b-4166-3cd293da97c7",
              "entries": [
                {
                  "id": "68a792bf-fcd5-5774-d6b7-8c256297661f",
                  "type": "text",
                  "text": "An interface implemented by [`FormGroupDirective`](../formgroup-directive) and [`NgForm`](../ngform-directive) directives.\n\nOnly used by the `ReactiveFormsModule` and `FormsModule`."
                },
                {
                  "id": "0b7c7f99-031c-4f53-70a5-98c90258ae75",
                  "type": "text",
                  "text": "## Interface"
                },
                {
                  "id": "b376fea2-be7e-8458-4cee-2802caa2d860",
                  "type": "toc"
                },
                {
                  "id": "9f0655c3-6a4e-d2c1-015f-a496054653e2",
                  "type": "interface-option",
                  "name": "addControl",
                  "head": "addControl",
                  "headId": "addControl",
                  "interface": "addControl(dir: NgControl): void",
                  "description": "Add a control to this form."
                },
                {
                  "id": "9118acce-5eaf-0412-8826-bf103077f884",
                  "type": "interface-option",
                  "name": "removeControl",
                  "head": "removeControl",
                  "headId": "removeControl",
                  "interface": "removeControl(dir: NgControl): void",
                  "description": "Remove a control from this form."
                },
                {
                  "id": "a25cc520-4758-d516-d0ba-0e0732175312",
                  "type": "interface-option",
                  "name": "getControl",
                  "head": "getControl",
                  "headId": "getControl",
                  "interface": "getControl(dir: NgControl): FormControl",
                  "description": "The control directive from which to get the `FormControl`."
                },
                {
                  "id": "651abfed-3832-396a-a7b7-e1758a622659",
                  "type": "interface-option",
                  "name": "addFormGroup",
                  "head": "addFormGroup",
                  "headId": "addFormGroup",
                  "interface": "addFormGroup(dir: AbstractFormGroupDirective): void",
                  "description": "Add a group of controls to this form."
                },
                {
                  "id": "cbff6bcf-bd43-f32a-5d57-bb882b9d2d42",
                  "type": "interface-option",
                  "name": "removeFormGroup",
                  "head": "removeFormGroup",
                  "headId": "removeFormGroup",
                  "interface": "removeFormGroup(dir: AbstractFormGroupDirective): void",
                  "description": "Remove a group of controls to this form."
                },
                {
                  "id": "afe8b7ed-7668-6ce9-6f5d-0db25ac5256a",
                  "type": "interface-option",
                  "name": "getFormGroup",
                  "head": "getFormGroup",
                  "headId": "getFormGroup",
                  "interface": "getFormGroup(dir: AbstractFormGroupDirective): FormGroup",
                  "description": "The `FormGroup` associated with a particular `AbstractFormGroupDirective`."
                },
                {
                  "id": "59a58b98-22ff-43ab-6245-c2c945d90e7e",
                  "type": "interface-option",
                  "name": "updateModel",
                  "head": "updateModel",
                  "headId": "updateModel",
                  "interface": "updateModel(dir: NgControl, value: any): void",
                  "description": "Update the model for a particular control with a new value."
                }
              ],
              "title": "Form interface",
              "url": "form-interface",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/form_interface.ts",
              "generationName": "Form",
              "generationStartLine": 24,
              "generationEndLine": 81
            },
            {
              "id": "32cbdfa3-58e5-18b2-d5bf-a8d7d47615af",
              "entries": [
                {
                  "id": "c7ee155e-e116-bb0b-af69-eac55cd61079",
                  "type": "text",
                  "text": "Creates a top-level [`FormGroup`](../formgroup) instance and binds it to a form\nto track aggregate form value and validation status.\n\nAs soon as you import the `FormsModule`, this directive becomes active by default on\nall `<form>` tags.  You don't need to add a special selector.\n\nYou optionally export the directive into a local template variable using `ngForm` as the key\n(ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n[`FormGroup`](../formgroup) instance are duplicated on the directive itself, so a reference to it\ngives you access to the aggregate value and validity status of the form, as well as\nuser interaction properties like `dirty` and `touched`.\n\nTo register child controls with the form, use [`NgModel`](../ngmodel-directive) with a `name`\nattribute. You may use [`NgModelGroup`](../ngmodelgroup-directive) to create sub-groups within the form.\n\nIf necessary, listen to the directive's `ngSubmit` event to be notified when the user has\ntriggered a form submission. The `ngSubmit` event emits the original form\nsubmission event.\n\nIn template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\nTo import the `FormsModule` but skip its usage in some forms,\nfor example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\ntags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\nunnecessary because the `<form>` tags are inert. In that case, you would\nrefrain from using the [`formGroup` directive](../formgroup-directive)."
                },
                {
                  "id": "1cfc6286-8038-c58f-f2f6-3f954289e61a",
                  "type": "text",
                  "text": "### Listening for form submission\n\nThe following example shows how to capture the form values from the \"ngSubmit\" event.\n\n```\nimport {Component} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\" novalidate>\n      <input name=\"first\" ngModel required #first=\"ngModel\">\n      <input name=\"last\" ngModel>\n      <button>Submit</button>\n    </form>\n    \n    <p>First name value: {{ first.value }}</p>\n    <p>First name valid: {{ first.valid }}</p>\n    <p>Form value: {{ f.value | json }}</p>\n    <p>Form valid: {{ f.valid }}</p>\n  `,\n})\nexport class SimpleFormComp {\n  onSubmit(f: NgForm) {\n    console.log(f.value);  // { first: '', last: '' }\n    console.log(f.valid);  // false\n  }\n}\n```\n"
                },
                {
                  "id": "1290ab26-ebba-3b2a-834c-d1e29c363243",
                  "type": "text",
                  "text": "### Setting the update options\n\nThe following example shows you how to change the `updateOn` option from its default using\n`ngFormOptions`.\n\n```html\n<form [ngFormOptions]=\"{updateOn: 'blur'}\">\n   <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n</form>\n```\n"
                },
                {
                  "id": "c0fff413-b960-0c17-22cf-2bc56fe8adb5",
                  "type": "text",
                  "text": "## Interface, extends [ControlContainer](../controlcontainer)"
                },
                {
                  "id": "3830e04e-e5f8-f30f-044b-1a8ba0eb82e1",
                  "type": "toc"
                },
                {
                  "id": "e6df0d27-e3ab-a2a1-2f36-1b6d990779be",
                  "type": "interface-option",
                  "name": "submitted",
                  "head": "submitted",
                  "headId": "submitted",
                  "interface": "submitted: boolean",
                  "description": "Returns whether the form submission has been triggered."
                },
                {
                  "id": "23b64469-c28e-6256-726b-cd7562ff6b82",
                  "type": "interface-option",
                  "name": "form",
                  "head": "form",
                  "headId": "form",
                  "interface": "form: FormGroup",
                  "description": "The `FormGroup` instance created for this form."
                },
                {
                  "id": "a1134caf-b43c-0d24-65ff-c86125651132",
                  "type": "interface-option",
                  "name": "ngSubmit",
                  "head": "ngSubmit",
                  "headId": "ngSubmit",
                  "interface": "ngSubmit",
                  "description": "Event emitter for the \"ngSubmit\" event"
                },
                {
                  "id": "3f1191c8-1557-750c-c012-d280329e6710",
                  "type": "interface-option",
                  "name": "options",
                  "head": "options",
                  "headId": "options",
                  "interface": "@Input('ngFormOptions') options: {updateOn?: FormHooks}",
                  "description": "Tracks options for the `NgForm` instance.\n\n**updateOn**: Sets the default `updateOn` value for all child `NgModels` below it\nunless explicitly set by a child `NgModel` using `ngModelOptions`). Defaults to 'change'.\nPossible values: `'change'` | `'blur'` | `'submit'`."
                },
                {
                  "id": "62f9ee6e-1df6-3168-0a82-c28a84230faf",
                  "type": "interface-option",
                  "name": "formDirective",
                  "head": "formDirective",
                  "headId": "formDirective",
                  "interface": "get formDirective(): Form",
                  "description": "The directive instance."
                },
                {
                  "id": "d8c9ed4b-0052-a513-5d7b-4c5ddf064db6",
                  "type": "interface-option",
                  "name": "control",
                  "head": "control",
                  "headId": "control",
                  "interface": "get control(): FormGroup",
                  "description": "The internal `FormGroup` instance."
                },
                {
                  "id": "a49c6e5c-88d6-3036-2aac-526d01e69da0",
                  "type": "interface-option",
                  "name": "path",
                  "head": "path",
                  "headId": "path",
                  "interface": "get path(): string[]",
                  "description": "Returns an array representing the path to this group. Because this directive\nalways lives at the top level of a form, it is always an empty array."
                },
                {
                  "id": "b46d922e-34ba-5c3d-4d0a-a3db7a4499ac",
                  "type": "interface-option",
                  "name": "controls",
                  "head": "controls",
                  "headId": "controls",
                  "interface": "get controls(): {[key: string]: AbstractControl}",
                  "description": "Returns a map of the controls in this group."
                },
                {
                  "id": "5eecabe3-5468-2262-5baa-ca4386ab2dcd",
                  "type": "interface-option",
                  "name": "addControl",
                  "head": "addControl",
                  "headId": "addControl",
                  "interface": "addControl(dir: NgModel): void",
                  "description": "Method that sets up the control directive in this group, re-calculates its value\nand validity, and adds the instance to the internal list of directives."
                },
                {
                  "id": "9dfe4814-19f1-9e6e-f901-4d4905fc7ee6",
                  "type": "interface-option",
                  "name": "getControl",
                  "head": "getControl",
                  "headId": "getControl",
                  "interface": "getControl(dir: NgModel): FormControl",
                  "description": "Retrieves the `FormControl` instance from the provided `NgModel` directive."
                },
                {
                  "id": "a1277390-589d-4c58-94ac-de93ae6afdef",
                  "type": "interface-option",
                  "name": "removeControl",
                  "head": "removeControl",
                  "headId": "removeControl",
                  "interface": "removeControl(dir: NgModel): void",
                  "description": "Removes the `NgModel` instance from the internal list of directives"
                },
                {
                  "id": "2ef8f73c-5d96-65b2-e837-7b35d58539a7",
                  "type": "interface-option",
                  "name": "addFormGroup",
                  "head": "addFormGroup",
                  "headId": "addFormGroup",
                  "interface": "addFormGroup(dir: NgModelGroup): void",
                  "description": "Adds a new `NgModelGroup` directive instance to the form."
                },
                {
                  "id": "3d4c58c4-fe52-1da5-318d-ce30593bb81f",
                  "type": "interface-option",
                  "name": "removeFormGroup",
                  "head": "removeFormGroup",
                  "headId": "removeFormGroup",
                  "interface": "removeFormGroup(dir: NgModelGroup): void",
                  "description": "Removes the `NgModelGroup` directive instance from the form."
                },
                {
                  "id": "3302e196-effe-975d-719d-104e29adceca",
                  "type": "interface-option",
                  "name": "getFormGroup",
                  "head": "getFormGroup",
                  "headId": "getFormGroup",
                  "interface": "getFormGroup(dir: NgModelGroup): FormGroup",
                  "description": "Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance"
                },
                {
                  "id": "8b874644-6b00-c399-6cad-24274fa51280",
                  "type": "interface-option",
                  "name": "updateModel",
                  "head": "updateModel",
                  "headId": "updateModel",
                  "interface": "updateModel(dir: NgControl, value: any): void",
                  "description": "Sets the new value for the provided `NgControl` directive."
                },
                {
                  "id": "17d19363-b85d-890a-f161-d7872abd27ed",
                  "type": "interface-option",
                  "name": "setValue",
                  "head": "setValue",
                  "headId": "setValue",
                  "interface": "setValue(value: {[key: string]: any}): void",
                  "description": "Sets the value for this `FormGroup`."
                },
                {
                  "id": "5fa15962-c443-1802-1013-1dccf3e2507f",
                  "type": "interface-option",
                  "name": "onSubmit",
                  "head": "onSubmit",
                  "headId": "onSubmit",
                  "interface": "onSubmit($event: Event): boolean",
                  "description": "Method called when the \"submit\" event is triggered on the form.\nTriggers the `ngSubmit` emitter to emit the \"submit\" event as its payload."
                },
                {
                  "id": "53a5dc16-decc-9782-1d44-c50c3446cac8",
                  "type": "interface-option",
                  "name": "onReset",
                  "head": "onReset",
                  "headId": "onReset",
                  "interface": "onReset(): void",
                  "description": "Method called when the \"reset\" event is triggered on the form."
                },
                {
                  "id": "bd9d55ed-82d1-7822-e026-f6318ad74b63",
                  "type": "interface-option",
                  "name": "resetForm",
                  "head": "resetForm",
                  "headId": "resetForm",
                  "interface": "resetForm(value: any = undefined): void",
                  "description": "Resets the form to an initial value and resets its submitted status."
                }
              ],
              "title": "[ngForm] directive",
              "url": "ngform-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/ng_form.ts",
              "generationName": "NgForm",
              "generationStartLine": 93,
              "generationEndLine": 332
            },
            {
              "id": "580df1b0-a4f5-5b65-519c-92cdcc185282",
              "entries": [
                {
                  "id": "e92cf42f-5499-577f-ebc1-6788161be996",
                  "type": "text",
                  "text": "Creates an [`AbstractControl`](../abstractcontrol) from a user-specified configuration.\n\nThe `FormBuilder` provides syntactic sugar that shortens creating instances of a [`FormControl`](../formcontrol),\n[`FormGroup`](../formgroup), or [`FormArray`](../formarray). It reduces the amount of boilerplate needed to build complex\nforms.\n"
                },
                {
                  "id": "4bd9f8dc-51b9-6307-5d16-759a2e1bc229",
                  "type": "tutorials",
                  "links": [
                    {
                      "url": "https://angular.io/guide/reactive-forms",
                      "label": "Angular - Reactive forms"
                    },
                    {
                      "url": "https://medium.com/angular-in-depth/dive-into-reactive-forms-cfc9adbb4467",
                      "label": "Dive into Reactive Forms"
                    },
                    {
                      "label": "Understanding Angular Reactive Forms",
                      "url": "https://itnext.io/understanding-angular-reactive-forms-241f9ed42c56"
                    },
                    {
                      "label": "Angular Form Builder and Validation Management",
                      "url": "https://coryrylan.com/blog/angular-form-builder-and-validation-management"
                    }
                  ]
                },
                {
                  "id": "3c840ade-cd8b-8dc4-97d5-27d1022909fb",
                  "type": "text",
                  "text": "### Generating form controls\n\nThe `FormBuilder` service has three methods: `control()`, `group()`, and `array()`. These are factory methods for generating instances in your component classes including form controls, form groups, and form arrays.\n\n```\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ValidationService } from 'app/validation.service';\n\n@Component({\n  selector: 'demo-app',\n  templateUrl: 'app/app.component.html'\n})\nexport class AppComponent {\n  userForm: any;\n\n  constructor(private formBuilder: FormBuilder) {\n    this.userForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, ValidationService.emailValidator]],\n      profile: ['', [Validators.required, Validators.minLength(10)]]\n    });\n  }\n\n  saveUser() {\n    if (this.userForm.dirty && this.userForm.valid) {\n      alert(\n        `Name: ${this.userForm.value.name} Email: ${this.userForm.value.email}`\n      );\n    }\n  }\n}\n```"
                },
                {
                  "id": "7e83dba7-92cd-f8c6-e9b5-3888fd0cb045",
                  "type": "text",
                  "text": "## Interface"
                },
                {
                  "id": "fd9d376d-38c3-31c5-e201-5387f99f3956",
                  "type": "toc"
                },
                {
                  "id": "548e250e-b938-4f98-042f-2456e01874f8",
                  "type": "interface-option",
                  "name": "group",
                  "head": "group",
                  "headId": "group",
                  "interface": "group(controlsConfig: {[key: string]: any}, options: AbstractControlOptions|{[key: string]: any}|null = null): FormGroup",
                  "description": ""
                },
                {
                  "id": "cc025544-b3bb-349f-9e91-cac5f450b413",
                  "type": "interface-option",
                  "name": "control",
                  "head": "control",
                  "headId": "control",
                  "interface": "control(formState: any, validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null, asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormControl",
                  "description": "Construct a new `FormControl` with the given state, validators and options.\n\n### Initialize a control as disabled\n\nThe following example returns a control with an initial value in a disabled state.\n\n<code-example path=\"forms/ts/formBuilder/form_builder_example.ts\" region=\"disabled-control\">\n</code-example>"
                },
                {
                  "id": "cd01d230-9d2e-2bdf-336a-51591cffa594",
                  "type": "interface-option",
                  "name": "array",
                  "head": "array",
                  "headId": "array",
                  "interface": "array(controlsConfig: any[], validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null, asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormArray",
                  "description": "Constructs a new `FormArray` from the given array of configurations,\nvalidators and options."
                }
              ],
              "title": "FormBuilder",
              "url": "formbuilder",
              "generationType": "interface-options",
              "generationFile": "forms/src/form_builder.ts",
              "generationName": "FormBuilder",
              "generationStartLine": 34,
              "generationEndLine": 182
            },
            {
              "id": "903f9e3b-737c-abc3-c933-69c4bd3bbef0",
              "entries": [
                {
                  "id": "7f3a6608-29c0-9f2c-bfd5-3aaf66d2126b",
                  "type": "text",
                  "text": "Provides a set of built-in validators that can be used by form controls.\n\nA validator is a function that processes a [`FormControl`](../formcontrol) or collection of\ncontrols and returns an error map or null. A null map means that validation has passed.\n"
                },
                {
                  "id": "b3c5b50f-b34e-9332-e86f-0771151b3a53",
                  "type": "tutorials",
                  "links": [
                    {
                      "url": "https://angular.io/guide/form-validation",
                      "label": "Angular - Form validation"
                    },
                    {
                      "label": "Custom Validators in Angular",
                      "url": "https://blog.thoughtram.io/angular/2016/03/14/custom-validators-in-angular-2.html"
                    }
                  ]
                },
                {
                  "id": "6e8c06a7-7c94-e50b-66f8-3f648c6f021b",
                  "type": "text",
                  "text": "## Interface"
                },
                {
                  "id": "393902e2-96fa-b837-9867-07e133fed8a4",
                  "type": "toc"
                },
                {
                  "id": "37b3d273-b797-4871-d29b-683b8ec8f643",
                  "type": "interface-option",
                  "name": "min",
                  "head": "min",
                  "headId": "min",
                  "interface": "static min(min: number): ValidatorFn",
                  "description": "Validator that requires the control's value to be greater than or equal to the provided number.\n\n### Validate against a minimum of 3\n\n```typescript\nconst control = new FormControl(2, Validators.min(3));\n\nconsole.log(control.errors); // {min: {min: 3, actual: 2}}\n```\n\nReturns A validator function that returns an error map with the\n`min` property if the validation check fails, otherwise `null`."
                },
                {
                  "id": "4beabf62-ee6a-d4a7-66d1-eb851fbc42e5",
                  "type": "interface-option",
                  "name": "max",
                  "head": "max",
                  "headId": "max",
                  "interface": "static max(max: number): ValidatorFn",
                  "description": "Validator that requires the control's value to be less than or equal to the provided number.\n\n### Validate against a maximum of 15\n\n```typescript\nconst control = new FormControl(16, Validators.max(15));\n\nconsole.log(control.errors); // {max: {max: 15, actual: 16}}\n```\n\nReturns A validator function that returns an error map with the\n`max` property if the validation check fails, otherwise `null`."
                },
                {
                  "id": "1f63cfa8-0bfc-5111-fc7a-93aa45e7031c",
                  "type": "interface-option",
                  "name": "required",
                  "head": "required",
                  "headId": "required",
                  "interface": "static required(control: AbstractControl): ValidationErrors|null",
                  "description": "Validator that requires the control have a non-empty value.\n\n### Validate that the field is non-empty\n\n```typescript\nconst control = new FormControl('', Validators.required);\n\nconsole.log(control.errors); // {required: true}\n```\n\nReturns An error map with the `required` property\nif the validation check fails, otherwise `null`."
                },
                {
                  "id": "89f9d4bf-74db-abce-115e-4d4c3aaaff61",
                  "type": "interface-option",
                  "name": "requiredTrue",
                  "head": "requiredTrue",
                  "headId": "requiredTrue",
                  "interface": "static requiredTrue(control: AbstractControl): ValidationErrors|null",
                  "description": "Validator that requires the control's value be true. This validator is commonly\nused for required checkboxes.\n\n### Validate that the field value is true\n\n```typescript\nconst control = new FormControl('', Validators.requiredTrue);\n\nconsole.log(control.errors); // {required: true}\n```\n\nReturns An error map that contains the `required` property\nset to `true` if the validation check fails, otherwise `null`."
                },
                {
                  "id": "827bd7a4-bdaf-52dd-78e3-342f30ead638",
                  "type": "interface-option",
                  "name": "email",
                  "head": "email",
                  "headId": "email",
                  "interface": "static email(control: AbstractControl): ValidationErrors|null",
                  "description": "symbol) to begin or end with a period (`.`).\n- Disallow `local-part` to be longer than 64 characters.\n- Disallow the whole address to be longer than 254 characters.\n\nIf this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\nvalidate the value against a different pattern., Validators.email);\n\nconsole.log(control.errors); // {email: true}\n```\n\nValidator that requires the control's value pass an email validation test.\n\nTests the value using a [regular\nexpression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\npattern suitable for common usecases. The pattern is based on the definition of a valid email\naddress in the [WHATWG HTML\nspecification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\nsome enhancements to incorporate more RFC rules (such as rules related to domain names and the\nlengths of different parts of the address).\n\nThe differences from the WHATWG version include:\n- Disallow `local-part` (the part before the `\n\n### Validate that the field matches a valid email pattern\n\n```typescript\nconst control = new FormControl('bad\n\nReturns An error map with the `email` property\nif the validation check fails, otherwise `null`."
                },
                {
                  "id": "dcfa0cf2-5d2b-d4dd-39ae-77619a818181",
                  "type": "interface-option",
                  "name": "minLength",
                  "head": "minLength",
                  "headId": "minLength",
                  "interface": "static minLength(minLength: number): ValidatorFn",
                  "description": "Validator that requires the length of the control's value to be greater than or equal\nto the provided minimum length. This validator is also provided by default if you use the\nthe HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used\nonly for types that have a numeric `length` property, such as strings or arrays. The\n`minLength` validator logic is also not invoked for values when their `length` property is 0\n(for example in case of an empty string or an empty array), to support optional controls. You\ncan use the standard `required` validator if empty values should not be considered valid.\n\n### Validate that the field has a minimum of 3 characters\n\n```typescript\nconst control = new FormControl('ng', Validators.minLength(3));\n\nconsole.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n```\n\n```html\n<input minlength=\"5\">\n```\n\nReturns A validator function that returns an error map with the\n`minlength` property if the validation check fails, otherwise `null`."
                },
                {
                  "id": "d0d7658e-5475-f3bb-7fc6-660fc502a9e9",
                  "type": "interface-option",
                  "name": "maxLength",
                  "head": "maxLength",
                  "headId": "maxLength",
                  "interface": "static maxLength(maxLength: number): ValidatorFn",
                  "description": "Validator that requires the length of the control's value to be less than or equal\nto the provided maximum length. This validator is also provided by default if you use the\nthe HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used\nonly for types that have a numeric `length` property, such as strings or arrays.\n\n### Validate that the field has maximum of 5 characters\n\n```typescript\nconst control = new FormControl('Angular', Validators.maxLength(5));\n\nconsole.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n```\n\n```html\n<input maxlength=\"5\">\n```\n\nReturns A validator function that returns an error map with the\n`maxlength` property if the validation check fails, otherwise `null`."
                },
                {
                  "id": "54dac499-8d13-d59c-8412-d06dcebd7d1b",
                  "type": "interface-option",
                  "name": "pattern",
                  "head": "pattern",
                  "headId": "pattern",
                  "interface": "static pattern(pattern: string|RegExp): ValidatorFn",
                  "description": "Validator that requires the control's value to match a regex pattern. This validator is also\nprovided by default if you use the HTML5 `pattern` attribute.\n\n### Validate that the field only contains letters or spaces\n\n```typescript\nconst control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n\nconsole.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n```\n\n```html\n<input pattern=\"[a-zA-Z ]*\">\n```\n\n### Pattern matching with the global or sticky flag\n\n`RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`\ncan produce different results on the same input when validations are run consecutively. This is\ndue to how the behavior of `RegExp.prototype.test` is\nspecified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)\n(`RegExp` preserves the index of the last match when the global or sticky flag is used).\nDue to this behavior, it is recommended that when using\n`Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky\nflag enabled.\n\n```typescript\n// Not recommended (since the `g` flag is used)\nconst controlOne = new FormControl('1', Validators.pattern(/foo/g));\n\n// Good\nconst controlTwo = new FormControl('1', Validators.pattern(/foo/));\n```\n\nReturns A validator function that returns an error map with the\n`pattern` property if the validation check fails, otherwise `null`."
                },
                {
                  "id": "5997e428-5190-ba0a-7bc9-64fafb662f45",
                  "type": "interface-option",
                  "name": "nullValidator",
                  "head": "nullValidator",
                  "headId": "nullValidator",
                  "interface": "static nullValidator(control: AbstractControl): ValidationErrors|null",
                  "description": "Validator that performs no operation."
                },
                {
                  "id": "c79f6da8-058f-837b-e403-c18876f5314d",
                  "type": "interface-option",
                  "name": "compose",
                  "head": "compose",
                  "headId": "compose",
                  "interface": "static compose(validators: (ValidatorFn|null|undefined)[]|null): ValidatorFn|null",
                  "description": ""
                },
                {
                  "id": "8511b60a-81cb-bad1-c5c3-9ee8b2567825",
                  "type": "interface-option",
                  "name": "composeAsync",
                  "head": "composeAsync",
                  "headId": "composeAsync",
                  "interface": "static composeAsync(validators: (AsyncValidatorFn|null)[]): AsyncValidatorFn|null",
                  "description": "Compose multiple async validators into a single function that returns the union\nof the individual error objects for the provided control.\n\nReturns A validator function that returns an error map with the\nmerged error objects of the async validators if the validation check fails, otherwise `null`."
                }
              ],
              "title": "Validators",
              "url": "validators",
              "generationType": "interface-options",
              "generationFile": "forms/src/validators.ts",
              "generationName": "Validators",
              "generationStartLine": 112,
              "generationEndLine": 410
            },
            {
              "id": "0dd95295-40be-8682-1427-6014433eb51f",
              "entries": [
                {
                  "id": "165f91e5-1ea2-9b8b-0f89-0a1eda120078",
                  "type": "text",
                  "text": "An interface implemented by classes that perform synchronous validation.\n"
                },
                {
                  "id": "3e058250-546c-31f1-2fad-85d0958dda40",
                  "type": "text",
                  "text": "### Provide a custom validator\n\nThe following example implements the `Validator` interface to create a\nvalidator directive with a custom error key.\n\n```typescript\n@Directive({\n  selector: '[customValidator]',\n  providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}\n})\nclass CustomValidatorDirective implements Validator {\n  validate(control: AbstractControl): ValidationErrors|null {\n    return {'custom': true};\n  }\n}\n```"
                },
                {
                  "id": "0fabb80f-445c-581a-8e1c-ae5638e71d1f",
                  "type": "tutorials",
                  "links": [
                    {
                      "url": "https://blog.thoughtram.io/angular/2016/03/14/custom-validators-in-angular-2.html",
                      "label": "Custom Validators in Angular"
                    }
                  ]
                },
                {
                  "id": "3b4f4278-cb9a-9a44-f6f0-d2d66a16049e",
                  "type": "text",
                  "text": "## Interface\n"
                },
                {
                  "id": "5ca66c3a-e5b3-3730-3ca5-d7f895951a7d",
                  "type": "interface-option",
                  "name": "validate",
                  "head": "validate",
                  "headId": "validate",
                  "interface": "validate(control: AbstractControl): ValidationErrors|null",
                  "description": "Method that performs synchronous validation against the provided control.\n\nReturns A map of validation errors if validation fails,\notherwise null."
                },
                {
                  "id": "ec679c73-0ea1-dbc7-1791-7eecd273945c",
                  "type": "interface-option",
                  "name": "registerOnValidatorChange",
                  "head": "registerOnValidatorChange",
                  "headId": "registerOnValidatorChange",
                  "interface": "registerOnValidatorChange(fn: () => void)?: void",
                  "description": "Registers a callback function to call when the validator inputs change."
                }
              ],
              "title": "Validator interface",
              "url": "validator-interface",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/validators.ts",
              "generationName": "Validator",
              "generationStartLine": 51,
              "generationEndLine": 70
            },
            {
              "id": "b57419a0-e5b8-3b11-d37f-1dcbe75675fe",
              "entries": [
                {
                  "id": "01aaecfc-119e-131a-b42b-f0a8b9f0d60f",
                  "type": "text",
                  "text": "An interface implemented by classes that perform asynchronous validation."
                },
                {
                  "id": "8e6262cd-e059-ce05-b791-8a775a86ca9a",
                  "type": "text",
                  "text": "### Provide a custom async validator directive\n\nThe following example implements the `AsyncValidator` interface to create an\nasync validator directive with a custom error key.\n\n```typescript\nimport { of as observableOf } from 'rxjs';\n\n@Directive({\n  selector: '[customAsyncValidator]',\n  providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\ntrue}]\n})\nclass CustomAsyncValidatorDirective implements AsyncValidator {\n  validate(control: AbstractControl): Observable<ValidationErrors|null> {\n    return observableOf({'custom': true});\n  }\n}\n```"
                },
                {
                  "id": "d625ec0a-59fe-8a40-06a5-b9410a10ea1d",
                  "type": "tutorials",
                  "links": [
                    {
                      "url": "https://alligator.io/angular/async-validators/",
                      "label": "Custom Async Validators in Angular"
                    }
                  ]
                },
                {
                  "id": "55a8e9fd-440e-ca90-417a-e5eab03f6107",
                  "type": "text",
                  "text": "## Interface, extends [Validator](../validator-interface)"
                },
                {
                  "id": "2109c1e1-e8be-fdd5-847f-b65dfdb37ebb",
                  "type": "interface-option",
                  "name": "validate",
                  "head": "validate",
                  "headId": "validate",
                  "interface": "validate(control: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>",
                  "description": "Method that performs async validation against the provided control.\n\nReturns A promise or observable that resolves a map of validation errors\nif validation fails, otherwise null."
                }
              ],
              "title": "AsyncValidator interface",
              "url": "asyncvalidator-interface",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/validators.ts",
              "generationName": "AsyncValidator",
              "generationStartLine": 283,
              "generationEndLine": 295
            },
            {
              "id": "3d94f6f7-2791-4316-6ad1-0ba28039bc10",
              "entries": [
                {
                  "id": "3e17270d-68a1-2788-27ab-84da2fed4968",
                  "type": "text",
                  "text": "A directive that adds the `required` validator to any controls marked with the\n`required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n"
                },
                {
                  "id": "042b4f44-765c-fffd-2829-3d952dc8edc5",
                  "type": "text",
                  "text": "### Adding a required validator using template-driven forms\n\n```\n<input name=\"fullName\" ngModel required>\n```"
                },
                {
                  "id": "7ba6f742-46c9-8d46-884a-9373fd3c9d74",
                  "type": "interface-option",
                  "name": "required",
                  "head": "required",
                  "headId": "required",
                  "interface": "@Input() get required(): boolean|string",
                  "description": "Tracks changes to the required attribute bound to this directive."
                },
                {
                  "id": "357358cd-b93c-30a4-20b7-7356fa8285b9",
                  "type": "interface-option",
                  "name": "required",
                  "head": "required",
                  "headId": "required",
                  "interface": "set required(value: boolean|string)",
                  "description": ""
                },
                {
                  "id": "e8075864-3bda-cce1-2112-2d6c07b284db",
                  "type": "interface-option",
                  "name": "validate",
                  "head": "validate",
                  "headId": "validate",
                  "interface": "validate(control: AbstractControl): ValidationErrors|null",
                  "description": "Method that validates whether the control is empty.\nReturns the validation result if enabled, otherwise null."
                },
                {
                  "id": "1ef45791-aabb-f631-4616-147fee1eeb10",
                  "type": "interface-option",
                  "name": "registerOnValidatorChange",
                  "head": "registerOnValidatorChange",
                  "headId": "registerOnValidatorChange",
                  "interface": "registerOnValidatorChange(fn: () => void): void",
                  "description": "Registers a callback function to call when the validator inputs change."
                }
              ],
              "title": "[required] validation directive",
              "url": "required-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/validators.ts",
              "generationName": "RequiredValidator",
              "generationStartLine": 337,
              "generationEndLine": 377
            },
            {
              "id": "de3694fb-e1ce-aef8-cd4c-c691cfcfe5e7",
              "entries": [
                {
                  "id": "822a83af-910c-9d4e-2036-3c86c1ef0418",
                  "type": "text",
                  "text": "A directive that adds the `email` validator to controls marked with the\n`email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list."
                },
                {
                  "id": "319fd229-c9a0-e1c9-9f6c-833b47f2442f",
                  "type": "text",
                  "text": "### Adding an email validator\n\nThe following example shows how to add an email validator to an input attached to an ngModel binding.\n\n```\n<input type=\"email\" name=\"email\" ngModel email>\n<input type=\"email\" name=\"email\" ngModel email=\"true\">\n<input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n```"
                },
                {
                  "id": "79de223a-cd26-8e62-66ba-6d4ae89e1e7e",
                  "type": "interface-option",
                  "name": "email",
                  "head": "email",
                  "headId": "email",
                  "interface": "@Input() set email(value: boolean|string)",
                  "description": "Tracks changes to the email attribute bound to this directive."
                },
                {
                  "id": "e8ffd67e-16b9-95f1-9ab9-be11fdef6be4",
                  "type": "interface-option",
                  "name": "validate",
                  "head": "validate",
                  "headId": "validate",
                  "interface": "validate(control: AbstractControl): ValidationErrors|null",
                  "description": "Method that validates whether an email address is valid.\nReturns the validation result if enabled, otherwise null."
                },
                {
                  "id": "6e0d90a5-9590-4612-8bc0-fa901abb6f6e",
                  "type": "interface-option",
                  "name": "registerOnValidatorChange",
                  "head": "registerOnValidatorChange",
                  "headId": "registerOnValidatorChange",
                  "interface": "registerOnValidatorChange(fn: () => void): void",
                  "description": "Registers a callback function to call when the validator inputs change."
                }
              ],
              "title": "[email] validation directive",
              "url": "email-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/validators.ts",
              "generationName": "EmailValidator",
              "generationStartLine": 451,
              "generationEndLine": 485
            },
            {
              "id": "7ddf23d6-ef2e-fa33-63d5-42135e416c20",
              "entries": [
                {
                  "id": "01525b66-265f-6a49-1b5d-ffe719255c0d",
                  "type": "text",
                  "text": "A directive that adds minimum length validation to controls marked with the\n`minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list."
                },
                {
                  "id": "72a27a0a-de77-2fa3-41a7-aeb06171b98f",
                  "type": "text",
                  "text": "### Adding a minimum length validator\n\nThe following example shows how to add a minimum length validator to an input attached to an\nngModel binding.\n\n```html\n<input name=\"firstName\" ngModel minlength=\"4\">\n```"
                },
                {
                  "id": "a6bcb75b-8097-de1e-2f8c-77e390f64b73",
                  "type": "interface-option",
                  "name": "minlength",
                  "head": "minlength",
                  "headId": "minlength",
                  "interface": "@Input() minlength: string|number",
                  "description": "Tracks changes to the minimum length bound to this directive."
                },
                {
                  "id": "763457d0-afae-87a2-896f-009d7c68961d",
                  "type": "interface-option",
                  "name": "validate",
                  "head": "validate",
                  "headId": "validate",
                  "interface": "validate(control: AbstractControl): ValidationErrors|null",
                  "description": "Method that validates whether the value meets a minimum length requirement.\nReturns the validation result if enabled, otherwise null."
                },
                {
                  "id": "01a885de-3113-1809-2e76-a0c076f3dec6",
                  "type": "interface-option",
                  "name": "registerOnValidatorChange",
                  "head": "registerOnValidatorChange",
                  "headId": "registerOnValidatorChange",
                  "interface": "registerOnValidatorChange(fn: () => void): void",
                  "description": "Registers a callback function to call when the validator inputs change."
                }
              ],
              "title": "[minlength] validation directive",
              "url": "minlength-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/validators.ts",
              "generationName": "MinLengthValidator",
              "generationStartLine": 540,
              "generationEndLine": 585
            },
            {
              "id": "6c247685-ea28-0551-d2b9-54aa82a4714c",
              "entries": [
                {
                  "id": "8a473b88-7204-7e8d-5e78-beb40691b8b6",
                  "type": "text",
                  "text": "A directive that adds max length validation to controls marked with the\n`maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list."
                },
                {
                  "id": "6d658119-2b24-1e54-9bdf-c53ec5869b4a",
                  "type": "text",
                  "text": "### Adding a maximum length validator\n\nThe following example shows how to add a maximum length validator to an input attached to an\nngModel binding.\n\n```html\n<input name=\"firstName\" ngModel maxlength=\"25\">\n```"
                },
                {
                  "id": "308e2dcf-9ea2-c6c4-9a26-516172ee6f71",
                  "type": "interface-option",
                  "name": "maxlength",
                  "head": "maxlength",
                  "headId": "maxlength",
                  "interface": "@Input() maxlength: string|number",
                  "description": "Tracks changes to the maximum length bound to this directive."
                },
                {
                  "id": "13199f38-2513-ac18-1118-61ef5ab30e2a",
                  "type": "interface-option",
                  "name": "validate",
                  "head": "validate",
                  "headId": "validate",
                  "interface": "validate(control: AbstractControl): ValidationErrors|null",
                  "description": "Method that validates whether the value exceeds the maximum length requirement."
                },
                {
                  "id": "9e216fa7-86ec-05c4-a8bf-9a8f344cd96b",
                  "type": "interface-option",
                  "name": "registerOnValidatorChange",
                  "head": "registerOnValidatorChange",
                  "headId": "registerOnValidatorChange",
                  "interface": "registerOnValidatorChange(fn: () => void): void",
                  "description": "Registers a callback function to call when the validator inputs change."
                }
              ],
              "title": "[maxlength] validation directive",
              "url": "maxlength-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/validators.ts",
              "generationName": "MaxLengthValidator",
              "generationStartLine": 618,
              "generationEndLine": 662
            },
            {
              "id": "da68414f-49f4-6bc2-b07d-fed97a6f5d81",
              "entries": [
                {
                  "id": "5c9f0edd-55bb-c150-6b85-d553eee9af5f",
                  "type": "text",
                  "text": "A directive that adds regex pattern validation to controls marked with the\n`pattern` attribute. The regex must match the entire control value.\n\nThe directive is provided with the `NG_VALIDATORS` multi-provider list."
                },
                {
                  "id": "23f298b4-9fa9-054f-3004-ff3ef2e9a4a8",
                  "type": "text",
                  "text": "### Adding a pattern validator\n\nThe following example shows how to add a pattern validator to an input attached to an\nngModel binding.\n\n```html\n<input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n```"
                },
                {
                  "id": "7bc55cc3-60d4-2b0d-826f-c3deabe356dd",
                  "type": "interface-option",
                  "name": "pattern",
                  "head": "pattern",
                  "headId": "pattern",
                  "interface": "@Input() pattern: string|RegExp",
                  "description": "Tracks changes to the pattern bound to this directive."
                },
                {
                  "id": "4c0a66c0-aeef-3609-1f55-106050eda563",
                  "type": "interface-option",
                  "name": "validate",
                  "head": "validate",
                  "headId": "validate",
                  "interface": "validate(control: AbstractControl): ValidationErrors|null",
                  "description": "Method that validates whether the value matches the pattern requirement."
                },
                {
                  "id": "8388996e-3ddc-2b53-8ce7-389b69e85146",
                  "type": "interface-option",
                  "name": "registerOnValidatorChange",
                  "head": "registerOnValidatorChange",
                  "headId": "registerOnValidatorChange",
                  "interface": "registerOnValidatorChange(fn: () => void): void",
                  "description": "Registers a callback function to call when the validator inputs change."
                }
              ],
              "title": "[pattern] validation directive",
              "url": "pattern-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/validators.ts",
              "generationName": "PatternValidator",
              "generationStartLine": 698,
              "generationEndLine": 741
            },
            {
              "id": "09d79821-1fd2-b717-5ff9-d445a0f52928",
              "entries": [
                {
                  "id": "88c28a14-c669-70a9-2512-69ffeb6594b5",
                  "type": "text",
                  "text": "Angular adds `novalidate` attribute to all forms by default, `novalidate` is used to disable browser's native form validation.\n\nIf you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n\n```\n<form ngNativeValidate></form>\n```"
                }
              ],
              "title": "[ngNativeValidate] directive",
              "url": "ngnativevalidate-directive",
              "generationType": "interface-options",
              "generationFile": "forms/src/directives/ng_no_validate_directive.ts",
              "generationName": "ɵNgNoValidate",
              "generationStartLine": 28,
              "generationEndLine": 33
            }
          ],
          "title": "Forms",
          "color": "#714fe4",
          "url": "forms",
          "disabled": false,
          "langs": {
            "en": true
          }
        }
      ],
      "messages": [],
      "title": "Angular 12",
      "url": "latest",
      "default": true,
      "githubUrl": "https://github.com/angular/angular/blob/261b060fa1/packages"
    }
  ],
  "uiMessages": [
  ],
  "__v": "3"
}
