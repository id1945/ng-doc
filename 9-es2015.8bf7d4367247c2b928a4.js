(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{jtnN:function(e){e.exports=JSON.parse('{"id":"bc1d600f-9f79-eefd-8f91-811532c17a9f","sections":[{"id":"e7029bfd-a9e8-91e3-3cfb-e3e29b48aad6","menu":{"items":[{"id":"c77fcf82-d341-d671-98d3-00548ab40722","label":"Introduction","url":"intro"},{"id":"7b055ca1-0a59-8ba8-6fc1-21679eac6c2c","label":"Quick start","url":"quick-start"},{"id":"b519c2ba-a082-2afd-a757-708e06ffe951","label":"angular.json","url":"angular-json"},{"id":"ca828f3c-28b4-1f27-dc71-526775d373e2","label":"Commands","sub":{"items":[{"id":"bbe86ea9-e5f1-599e-7766-bfd1a2db5b82","label":"ng new","url":"command-ng-new","sub":{"items":[{"id":"d2127730-4d68-3e69-bfa2-7cd9213e73a6","label":"dryRun","urlFragment":"dryRun","url":"command-ng-new","subActiveOpt":false,"usePageEntries":true,"usePageUrl":"command-ng-new"}]},"subActiveOpt":true},{"id":"42f47ac7-0e9b-404e-bf27-00eeb79e35f9","label":"ng serve","url":"command-ng-serve","subActiveOpt":false,"sub":{"items":[]}},{"id":"1db100a7-de68-c0b5-6deb-c07427098259","label":"ng build","url":"command-ng-build"},{"id":"3fab9fb1-0485-2422-f9f7-b07d688bda99","label":"ng test","url":"command-ng-test"},{"id":"1b0f5a6e-db5d-3578-1c82-c4e637bcf4ee","label":"ng e2e","url":"command-ng-e2e"},{"id":"2aac6bc9-2e7e-2a0a-f173-84983b1e3b07","label":"ng lint","url":"command-ng-lint"},{"id":"297ff9bb-d9ea-f693-4408-83fb1dbc768b","label":"ng run","url":"command-ng-run"},{"id":"4bc59d30-f01b-e755-ed08-c5d3b0d6c97f","label":"ng generate","url":"command-ng-generate"},{"id":"ddb9e941-aad5-f0a8-d1ae-a11a1d1d04d9","label":"ng add","url":"command-ng-add"},{"id":"ab75e45c-b236-c358-c956-4cc7e5e8a8ff","label":"ng xi18n","url":"command-ng-xi18n"},{"id":"0d543dbf-51f4-7b21-52c1-403b4c3e7cf5","label":"ng update","url":"command-ng-update","sub":{"items":[{"id":"0b981291-ef75-1d24-5261-b5ada2d4590d","usePageEntries":true,"usePageUrl":"command-ng-update"}]},"subActiveOpt":true},{"id":"7626f70a-57ba-864a-95f1-d40d333c9d97","label":"ng config","url":"command-ng-config"},{"id":"562e2227-5082-500a-c81a-f7154a85c852","label":"ng-doc","url":"command-ng-doc"}]},"asGroup":true},{"id":"4143d99f-436d-0559-b323-2ef3b5b0a31d","label":"Builders","sub":{"items":[{"id":"45212676-727b-2f07-1f58-da63cd6afbbd","label":"app-shell","url":"builder-app-shell","sub":{"items":[{"id":"d7f6b9c2-091b-1a05-1891-51d4ec10ad8e","usePageEntries":true,"usePageUrl":"builder-app-shell"}]},"subActiveOpt":true},{"id":"840f30fe-c9d3-e370-6322-052399327bdd","label":"browser","url":"builder-browser","sub":{"items":[{"id":"7eec8183-3cd5-370f-1f2c-b0cc3fd1a870","usePageEntries":true,"usePageUrl":"builder-browser"}]},"subActiveOpt":true},{"id":"6add3de9-9a74-75ce-0ad5-dec14d2ec8c0","label":"dev-server","url":"builder-dev-server","sub":{"items":[{"id":"fd6c7c6b-b502-febe-f129-2f009cce451d","usePageEntries":true,"usePageUrl":"builder-dev-server"}]},"subActiveOpt":true},{"id":"e3783ad0-544d-1ae5-8f69-2d9390efecd5","label":"extract-i18n","url":"builder-extract-i18n","sub":{"items":[{"id":"43b64727-3498-5cf5-0b42-12de04a3a005","usePageEntries":true,"usePageUrl":"builder-extract-i18n"}]},"subActiveOpt":true},{"id":"8374c73a-bed3-d2af-4339-312bc9c6e9d7","label":"karma","url":"builder-karma","sub":{"items":[{"id":"0d96b954-da2b-6f17-6240-da27ccf3ffe0","usePageEntries":true,"usePageUrl":"builder-karma"}]},"subActiveOpt":true},{"id":"2507b99c-e925-02a8-1e25-05d80678e946","label":"protractor","url":"builder-protractor","sub":{"items":[{"id":"f33bbc33-7fe5-b090-e665-230e1b1f0af2","usePageEntries":true,"usePageUrl":"builder-protractor"}]},"subActiveOpt":true},{"id":"0fd31e86-7a8e-ec3d-51b2-84e99be7a310","label":"server","url":"builder-server","subActiveOpt":true,"sub":{"items":[{"id":"43832820-b222-b5bd-6851-2d5619773a64","usePageEntries":true,"usePageUrl":"builder-server"}]}},{"id":"e25385f8-a86b-d704-1303-3d98e8763bf1","label":"tslint","url":"builder-tslint","subActiveOpt":true,"sub":{"items":[{"id":"9d5405fc-8e49-718d-aee1-a9af02f9d4f2","usePageEntries":true,"usePageUrl":"builder-tslint"}]}}]},"url":"builders","asGroup":true},{"id":"0ddf87c0-cac3-36f6-6ac3-2542ec7cdb91","label":"Schematics","asGroup":true,"sub":{"items":[{"id":"2892c149-4d37-9956-28ae-f73cb6ef9b89","label":"application","url":"schematic-application","sub":{"items":[{"id":"93ebd70f-832c-281b-cd56-bbd35e1a1a23","sub":{"items":[]},"usePageEntries":true,"usePageUrl":"schematic-application"}]},"subActiveOpt":true},{"id":"de7a362d-859f-c30a-4903-38f2a030af49","label":"appShell","url":"schematic-app-shell","sub":{"items":[{"id":"4f5e807e-b35d-488e-2fa5-9be7f22043fe","usePageEntries":true,"usePageUrl":"schematic-app-shell"}]},"subActiveOpt":true},{"id":"3bfeb759-31fc-882b-0e92-95262637a8ec","label":"class","url":"schematic-class","sub":{"items":[{"id":"7521d679-7c7f-b6f5-9297-36eda69646f0","usePageEntries":true,"usePageUrl":"schematic-class"}]},"subActiveOpt":true},{"id":"ce53ef68-f089-f8ff-d394-417a330694b7","label":"component","url":"schematic-component","sub":{"items":[{"id":"aa1130af-b4b5-3390-4427-d183c293a6c6","usePageEntries":true,"usePageUrl":"schematic-component"}]},"subActiveOpt":true},{"id":"9db9c8d5-2443-211d-f5d5-8029d74cff7d","label":"directive","url":"schematic-directive","sub":{"items":[{"id":"59610a09-dea4-74b7-d4cf-7e3f3b48b862","usePageEntries":true,"usePageUrl":"schematic-directive"}]},"subActiveOpt":true},{"id":"3ec90d65-d190-0757-4354-abaa1878b56a","label":"enum","url":"schematic-enum","sub":{"items":[{"id":"bc977e3c-b678-545b-92e5-7e2c0d400edc","usePageEntries":true,"usePageUrl":"schematic-enum"}]},"subActiveOpt":true},{"id":"055a0f9a-9529-0b15-609f-c568200d9c86","label":"guard","url":"schematic-guard","sub":{"items":[{"id":"94c3fcdd-80e4-e7d3-e8db-f3fa483d93c4","usePageEntries":true,"usePageUrl":"schematic-guard"}]},"subActiveOpt":true},{"id":"a960a241-a2e8-ab6b-617d-6192d6e11f8a","label":"interface","url":"schematic-interface","sub":{"items":[{"id":"94ea63fe-cbd1-207e-9e94-470493412eec","usePageEntries":true,"usePageUrl":"schematic-interface"}]},"subActiveOpt":true},{"id":"5752c802-0106-025e-16c6-4efe2e3d2923","label":"library","url":"schematic-library","urlFragment":"","sub":{"items":[{"id":"9edb9709-a9c8-7eb8-34a0-f56024500f07","usePageEntries":true,"usePageUrl":"schematic-library"}]},"subActiveOpt":true},{"id":"afbe7104-ccb2-6f80-d13a-52fd22428397","label":"module","url":"schematic-module","sub":{"items":[{"id":"55b39e45-8155-387b-c5db-ec654296833b","usePageEntries":true,"usePageUrl":"schematic-module"}]},"subActiveOpt":true},{"id":"e592a7f2-3aca-63a9-dc56-8061bcb3ccf2","label":"pipe","url":"schematic-pipe","sub":{"items":[{"id":"4b7b2ffa-fe5d-f48f-7052-f7b475fdfe11","usePageEntries":true,"usePageUrl":"schematic-pipe"}]},"subActiveOpt":true},{"id":"8a473d28-845d-243a-4154-1107f5116b57","label":"service","url":"schematic-service","sub":{"items":[{"id":"1857e898-0a56-a05e-4b70-9ad2f49df4f5","usePageEntries":true,"usePageUrl":"schematic-service"}]},"subActiveOpt":true},{"id":"0f2e1d7d-e2ed-8b80-d414-51a7036b14cb","label":"universal","url":"schematic-universal","sub":{"items":[{"id":"eeb42d05-f58b-5e49-ce55-e76257c3b82a","asGroup":false,"usePageEntries":true,"usePageUrl":"schematic-universal"}]},"subActiveOpt":true}]},"url":"schematics"}]},"pages":[{"id":"22e3f1f2-26c7-17fc-fc2f-4f2d578b5f78","entries":[{"id":"9dfcbb88-833c-a80b-e303-1a958ad42d16","type":"text","text":"<p>This easy Angular CLI reference for developers describes commands, features and Schematics.</p>\\n<h2 id=\\"additional-information\\">Additional information</h2>\\n<p>Example of hints and tutorials links. You can switch off these panels in the sidebar.</p>\\n"},{"id":"f034a269-e9e3-007b-47a6-86d6e24447fa","type":"hint","text":"Hint with additional explanation. "},{"id":"e68053df-176b-5110-9078-87adb5d8bca5","type":"tutorials","links":[{"label":"Angular Quick Start","url":"https://angular.io/guide/quickstart","lang":"en"}]}],"title":"Introduction","url":"intro"},{"id":"09185d20-b810-e0ac-4f9b-bfdde78c9ad4","entries":[{"id":"39efe385-24d3-d9c3-0249-e4f3f3eddbc2","type":"text","text":"<p>Install Angular CLI:</p>\\n<pre><code>npm i @angular/cli -g</code></pre>\\n<p>Create a new project:</p>\\n<pre><code>ng new my-app</code></pre>\\n<p>Serve the application:</p>\\n<pre><code>cd my-app\\nng serve</code></pre>\\n"},{"id":"1cc4c74e-a1e6-a192-5441-a259c4ecc5f9","type":"tutorials","links":[{"label":"Angular QuickStart","url":"https://angular.io/guide/quickstart","lang":"en"}]}],"title":"Quick start","url":"quick-start"},{"id":"f7d32317-f2be-ea8d-916d-2b7810601bdf","entries":[{"id":"5d78e256-738a-c25e-6b62-637c8cf7066f","type":"text","text":"<p>Main Angular CLI configuration file.</p>\\n"},{"id":"7e5ec02b-68d9-38e6-eb6f-091d80a091b2","type":"tutorials","links":[{"label":"Understanding the Angular CLI Workspace File","url":"https://nitayneeman.com/posts/understanding-the-angular-cli-workspace-file/","lang":"en"},{"lang":"en","label":"Angular CLI\u200a\u2014\u200aDemystifying the workspace","url":"https://blog.nrwl.io/angular-cli-demystifying-the-workspace-7f59ffaab4cb"}]},{"id":"35503297-e158-2769-3c75-132225ed84eb","type":"text","text":"<h2 id=\\"schema\\">Schema</h2>\\n<ul>\\n<li><p><strong>version</strong> (<code>integer</code>): File format version. This is currently <code>&quot;1&quot;</code>.</p>\\n</li>\\n<li><p><strong>newProjectRoot</strong> (<code>string</code>): Path where new projects will be created.</p>\\n</li>\\n<li><p><strong>defaultProject</strong> (<code>string</code>): Default project name used in commands.</p>\\n</li>\\n<li><p><strong>cli</strong>: Workspace configuration options for Angular CLI.</p>\\n<ul>\\n<li><em>defaultCollection</em> (<code>string</code>): The default schematics collection to use.</li>\\n<li><em>packageManager</em> (<code>string</code>): Specify which package manager tool to use.</li>\\n<li><em>warnings</em> (<code>object</code>): Warning configuration.<ul>\\n<li><em>versionMismatch</em> (<code>boolean</code>): Show a warning when the global version is newer than the local one.</li>\\n<li><em>typescriptMismatch</em> (<code>boolean</code>): Check TypeScript version.</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><p><strong>schematics</strong> (<code>object</code>): Workspace configuration options for Schematics.</p>\\n<ul>\\n<li><em>schematic-package:schematic-name</em> (<code>object</code>): Object containing options for this schematic. JSON Schema for default schematics:<ul>\\n<li><a href=\\"https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L74-L144\\">@schematics/angular:component</a></li>\\n<li><a href=\\"https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L145-L186\\">@schematics/angular:directive</a></li>\\n<li><a href=\\"https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L187-L223\\">@schematics/angular:module</a></li>\\n<li><a href=\\"https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L224-L238\\">@schematics/angular:service</a></li>\\n<li><a href=\\"https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L239-L269\\">@schematics/angular:pipe</a></li>\\n<li><a href=\\"https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L270-L279\\">@schematics/angular:class</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<ul>\\n<li><strong>projects</strong>: Configuration options for each project in the workspace.<ul>\\n<li><em>root</em> (<code>string</code>): Root of the project files.</li>\\n<li><em>sourceRoot</em> (<code>string</code>): The root of the source files, assets and index.html file structure..</li>\\n<li><em>projectType</em> (<code>string</code>): the type of this project, <code>application</code> or <code>library</code>.</li>\\n<li><em>prefix</em> (<code>string</code>): The prefix to apply to generated selectors.</li>\\n<li><em>schematics</em> (<code>object</code>): Project configuration options for Schematics. Has the same format as top level Schematics configuration).</li>\\n<li><em>architect</em> (<code>string</code>): Project configuration for Architect targets.<ul>\\n<li><em>targetName</em> (<code>string</code>): Name of this target.<ul>\\n<li><em>builder</em> (<code>string</code>): Builder for this target, in the format <code>package-name:builder-name</code>.</li>\\n<li><em>options</em> (<code>string</code>): Options for this builder.\\nDefault schematics options:<ul>\\n<li><a href=\\"../builder-app-shell\\">@angular-devkit/build-angular:app-shell</a></li>\\n<li><a href=\\"../builder-browser\\">@angular-devkit/build-angular:browser</a></li>\\n<li><a href=\\"../builder-dev-server\\">@angular-devkit/build-angular:dev-server</a></li>\\n<li><a href=\\"../builder-extract-i18n\\">@angular-devkit/build-angular:extract-i18n</a></li>\\n<li><a href=\\"../builder-karma\\">@angular-devkit/build-angular:karma</a></li>\\n<li><a href=\\"../builder-protractor\\">@angular-devkit/build-angular:protractor</a></li>\\n<li><a href=\\"../builder-server\\">@angular-devkit/build-angular:server</a></li>\\n<li><a href=\\"../builder-tslint\\">@angular-devkit/build-angular:tslint</a></li>\\n</ul>\\n</li>\\n<li><em>configurations</em> (<code>object</code>): A map of alternative target options.<ul>\\n<li><em>configurationName</em> (<code>object</code>): Partial options override for this builder.</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n"}],"title":"angular.json","url":"angular-json"},{"id":"4820419b-ede4-8310-c209-14c3813f4271","entries":[{"id":"7609cfac-bc19-9943-c060-dde745433c73","type":"text","text":"<pre><code>ng new [name] [--[argument]=[value]]\\nng n</code></pre>\\n<p>Creates a new angular application.</p>\\n<p>Default applications are created in a directory of the same name, with an initialized Angular application.</p>\\n"},{"id":"28408a01-ed3e-fc82-5afc-33dee1e13731","type":"tutorials","links":[{"label":"Agnular QuickStart","url":"https://angular.io/guide/quickstart","lang":"en"}]},{"id":"0925973b-d612-defb-6c6e-cdb6122d09e6","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"76b7fd9b-d008-5050-401c-1eff834467ea","type":"toc"},{"id":"b75a4bed-3140-d07d-cda8-9a0d516adc93","type":"command-param","head":"collection","description":"Schematics collection to use.","name":"collection","headId":"collection","aliases":"c","paramType":"string","default":"@schematics/angular"},{"id":"9535576f-7739-6e5e-5316-d61079cf3d98","type":"command-param","head":"commit","description":"Initial repository commit information.","name":"commit","headId":"commit","paramType":"boolean","default":"true"},{"id":"1769b21f-a72a-c17b-7c2a-814b7aa805d3","type":"command-param","head":"createApplication","description":"Flag to toggle creation of an application in the new workspace.","name":"createApplication","headId":"createApplication","paramType":"boolean","default":"true","tutorialsEntry":{"id":"91cd65f3-fe93-ad9e-df30-0cb2743a3b2f","type":"tutorials","links":[{"lang":"en","label":"Angular Workspace: No Application for You!","url":"https://blog.angularindepth.com/angular-workspace-no-application-for-you-4b451afcc2ba"}]}},{"id":"1e1a70e3-f29e-db2f-49c5-55057cfd2062","type":"command-param","head":"defaults","description":"When true, disables interactive input prompts for options with a default.","name":"defaults","headId":"defaults","default":"false","paramType":"boolean"},{"id":"32643db0-fdfa-cc84-8869-a9d00651dd96","type":"command-param","head":"directory","description":"The directory name to create the workspace in.","name":"directory","headId":"directory","paramType":"string"},{"id":"98182a06-d523-263d-fd25-24781d893e98","type":"command-param","description":"Run through without making any changes.","name":"dryRun","paramType":"boolean","aliases":"d","default":"false","head":"dryRun","headId":"dryRun"},{"id":"fa38f59b-b96e-a27d-0d13-c7f11db81b0d","type":"command-param","head":"experimentalIvy","description":"EXPERIMENTAL: Specifies whether to create a new application which uses the Ivy rendering engine.","name":"experimentalIvy","headId":"experimentalIvy","paramType":"boolean","default":"false"},{"id":"e67ee4f1-204e-b1d8-b963-56a5725ba8b3","type":"command-param","description":"Forces overwriting of files.","name":"force","paramType":"boolean","aliases":"f","default":"false","head":"force","headId":"force"},{"id":"9658865c-8a98-edc5-504b-c152b92928f2","type":"command-param","head":"help","description":"Shows a help message for this command in the console.","name":"help","headId":"help","values":"true|false|json|JSON","default":"false"},{"id":"29307d9d-24b9-9d0a-a3c8-71fc498587c8","type":"command-param","head":"inlineStyle","description":"Specifies if the style will be in the ts file.","name":"inlineStyle","headId":"inlineStyle","aliases":"s","paramType":"boolean","default":"false"},{"id":"663cd031-a805-c1b3-19e2-622ec9d79ae4","type":"command-param","head":"inlineTemplate","description":"Specifies if the template will be in the ts file.","name":"inlineTemplate","headId":"inlineTemplate","aliases":"t","paramType":"boolean","default":"false"},{"id":"e1290c98-a81a-7d58-2f95-fb06b9a42548","type":"command-param","head":"interactive","description":"When false, disables interactive input prompts.","name":"interactive","headId":"interactive","paramType":"boolean","default":"false"},{"id":"f19c4af0-448c-23d4-1e36-2f3c7f6c563e","type":"command-param","head":"minimal","description":"Create a barebones project without any testing frameworks.","name":"minimal","headId":"minimal","paramType":"boolean","default":"false"},{"id":"dcd4895e-8756-fcf4-ec75-9cbd61d5e6b4","type":"command-param","head":"newProjectRoot","description":"The path where new projects will be created.","name":"newProjectRoot","headId":"newProjectRoot","paramType":"string","default":"projects"},{"id":"11aa182d-3e7c-3c6e-d600-1f5fc15b363c","type":"command-param","head":"prefix","description":"The prefix to apply to generated selectors.","name":"prefix","headId":"prefix","aliases":"p","paramType":"string","default":"app"},{"id":"f2b522a6-a0ca-f0e1-ef05-206092bd3924","type":"command-param","head":"routing","description":"Generates a routing module.","name":"routing","headId":"routing","paramType":"boolean","default":"false"},{"id":"516ee180-48ff-e7ae-de88-95e2fd166a70","type":"command-param","head":"skipGit","description":"Skip initializing a git repository.","name":"skipGit","headId":"skipGit","paramType":"boolean","default":"false","aliases":"g"},{"id":"27a3c70f-b417-a486-6787-e414298f354c","type":"command-param","head":"skipPackageJson","description":"Do not add dependencies to `package.json`.","aliases":"skip-package-json","name":"skipPackageJson","headId":"skipPackageJson"},{"id":"04a90138-7f00-6cf0-3b9b-0eb08e94ce62","type":"command-param","head":"skipInstall","description":"Skip installing dependency packages.","name":"skipInstall","headId":"skipInstall","paramType":"boolean","default":"false"},{"id":"0b750b68-181b-8dd9-2ca4-04048e54c7ea","type":"command-param","head":"skipTests","description":"Skip creating spec files.","aliases":"S","name":"skipTests","headId":"skipTests","paramType":"boolean","default":"false"},{"id":"5dd06b91-879d-770d-a72e-3ca185fbaf15","type":"command-param","head":"style","description":"The file extension to be used for style files.","name":"style","headId":"style","aliases":"","paramType":"string","values":"css, scss, less, sass, styl","default":"css"},{"id":"f5850599-8aa6-624d-1ec4-1dffc881b275","type":"command-param","description":"Adds more details to output logging.","name":"verbose","paramType":"boolean","aliases":"v","default":"false","head":"verbose","headId":"verbose"},{"id":"b7e37d4d-08a9-e2e1-57bd-024c0d90eb90","type":"command-param","head":"viewEncapsulation","description":"Specifies the view encapsulation strategy.","aliases":"view-encapsulation","name":"viewEncapsulation","headId":"viewEncapsulation","values":"Emulated|Native|None|ShadowDom"}],"title":"ng new","url":"command-ng-new"},{"id":"2814273e-85cd-f97c-806b-5460a3cee779","entries":[{"id":"130530c2-9838-0fbe-51e9-74554c9e4165","type":"text","text":"<pre><code>ng serve [--[argument]=[value]]\\nng server\\nng s</code></pre>\\n<p>Build the application and start a web server.</p>\\n<p>Alias for the command:</p>\\n<pre><code>ng run [project]:serve</code></pre>\\n<p>In the default configuration for <code>ng serve</code> using builder <a href=\\"../builder-dev-server\\"><code>dev-server</code></a>.</p>\\n<p>With this command you can override any builder&#39;s option.</p>\\n<h2 id=\\"options\\">Options</h2>\\n"},{"id":"48154cc5-aace-06ed-4580-ce85595fb428","type":"command-param","head":"prod","description":"Flag to set configuration to \\"prod\\". \\n\\nAlias for the command:\\n\\n```\\nng run [default-project]:serve:production\\n```","name":"prod","headId":"prod","paramType":"boolean","default":"false"},{"id":"36fcbd46-a805-a831-7162-cc42c3083e23","type":"command-param","head":"configuration","description":"Specify the configuration to use. ","name":"configuration","headId":"configuration","aliases":"c","paramType":"string"}],"title":"ng serve","url":"command-ng-serve"},{"id":"ac00056b-9a74-5fb0-37d2-7d55bca2de38","entries":[{"id":"79e9874c-63eb-3203-5cb0-b5f55c4a7978","type":"text","text":"<pre><code>ng build [--[argument]=[value]]</code></pre>\\n<p>\u0421ompiles the application into an output directory.</p>\\n<p>Alias for the command:</p>\\n<pre><code>ng run [default-project]:build</code></pre>\\n<p>In the default configuration for <code>ng build</code> using builder <a href=\\"../builder-browser\\"><code>browser</code></a>.</p>\\n<p>With this command you can override any builder&#39;s option.</p>\\n"},{"id":"11d6a32d-f141-7888-d5ea-2560ff8d9b70","type":"tutorials","links":[{"label":"Angular Deployment","url":"https://angular.io/guide/deployment","lang":"en"}]},{"id":"80edb8c0-1702-00cd-9b86-b653f8872696","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"23b68d99-6530-c1ef-d139-07f4d5a320dc","type":"command-param","head":"prod","description":"Flag to set configuration to `production`. \\n\\nAlias for the command:\\n\\n```\\nng run [default-project]:build:production\\n```\\n","name":"prod","headId":"prod","paramType":"boolean","default":""}],"title":"ng build","url":"command-ng-build"},{"id":"be657e42-99ce-1278-bc8f-c5404d37f392","entries":[{"id":"f0a2a070-439c-b6cb-d8ad-dfa7f7dd7984","type":"text","text":"<pre><code>ng test [--[argument]=[value]]</code></pre>\\n<p>Alias for the command:</p>\\n<pre><code>ng run [project]:test</code></pre>\\n<p>In the default configuration for <code>ng test</code> using builder <a href=\\"../builder-karma\\"><code>karma</code></a>.</p>\\n<p>With this command you can override any builder&#39;s option.</p>\\n"},{"id":"c20944b3-6c95-6239-87f0-9d00df096770","type":"tutorials","links":[{"label":"Angular Testing","url":"https://angular.io/guide/testing","lang":"en"}]},{"id":"b10777fa-bb43-52ff-bcfc-7aa2b8bbbc2b","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"f32a5fd6-8d74-3715-245b-383a1d38f247","type":"command-param","head":"prod","description":"Flag to set configuration to `production`. \\n\\nAlias for the command:\\n\\n```\\nng run [default-project]:test:production\\n```","name":"prod","headId":"prod","paramType":"boolean"},{"id":"87f3ec8a-f54a-63f1-7a5e-287cdeab61bb","type":"command-param","head":"configuration","description":"Specify the configuration to use. ","name":"configuration","headId":"configuration","paramType":"string","aliases":"c"}],"title":"ng test","url":"command-ng-test"},{"id":"ff2ae109-3dbe-2d28-9864-3b784e975d29","entries":[{"id":"0692ac80-ea0e-bb23-cfc3-6d454be00612","type":"text","text":"<pre><code>ng e2e [--[argument]=[value]]</code></pre>\\n<p>Alias for the command:</p>\\n<pre><code>ng run [project]:e2e</code></pre>\\n<p>In the default configuration for <code>ng e2e</code> using builder <a href=\\"../builder-protractor\\"><code>protractor</code></a>.</p>\\n<p>With this command you can override any builder&#39;s option.</p>\\n"},{"id":"00ccb206-32e7-ec10-699e-0713273220e7","type":"tutorials","links":[{"label":"Introduction to E2E Testing with the Angular CLI and Protractor","url":"https://coryrylan.com/blog/introduction-to-e2e-testing-with-the-angular-cli-and-protractor","lang":"en"}]},{"id":"d414b194-51e7-148f-555c-b1d6685e51a9","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"d0c11f2d-3a79-96ee-10ac-c173a93f7762","type":"command-param","head":"prod","description":"Flag to set configuration to `production`. \\n\\nAlias for the command:\\n\\n```\\nng run [default-project]:e2e:production\\n```","name":"prod","headId":"prod","paramType":"boolean"},{"id":"1e7e990b-64f1-c269-e30b-1aec5acfab94","type":"command-param","head":"configuration","description":"Specify the configuration to use. ","name":"configuration","headId":"configuration","paramType":"string","aliases":"c"}],"title":"ng e2e","url":"command-ng-e2e"},{"id":"00a6f3bd-44ee-a646-e1e8-3be12ff3ed0e","entries":[{"id":"6604e78c-df71-2195-c673-7c0bebf17fdb","type":"text","text":"<pre><code>ng lint [--[argument]=[value]]\\nng l</code></pre>\\n<p>Lint you app code using <a href=\\"https://palantir.github.io/tslint/\\">tslint</a>.</p>\\n<p>Alias for the command:</p>\\n<pre><code>ng run [project]:lint</code></pre>\\n<h2 id=\\"options\\">Options</h2>\\n<p>In the default configuration for <code>ng lint</code> using builder <a href=\\"../builder-tslint\\"><code>tslint</code></a>.</p>\\n<p>With this command you can override any builder&#39;s option.</p>\\n"},{"id":"8b4b90e8-1126-f069-73fe-126093e035d3","type":"command-param","head":"configuration","description":"Specify the configuration to use. ","name":"configuration","headId":"configuration","paramType":"string","aliases":"c"}],"title":"ng lint","url":"command-ng-lint"},{"id":"4551a413-912e-c265-1ae9-ac83dcf7c312","entries":[{"id":"a079465a-5fe4-9b9d-c4de-301a206c1d09","type":"text","text":"<pre><code>ng run [project]:[target] [--[argument]=[value]]\\nng run [project]:[target]:[configuration] [--[argument]=[value]]</code></pre>\\n<p>The main command to run architects.</p>\\n<p>In an <code>architect</code> section of each project in <a href=\\"../angular-json\\"><code>angular.json</code></a> you can define build configurations.</p>\\n<p>An architect can contain any number of builds. A build defines name of builder, base options and any number of configurations.</p>\\n<pre><code class=\\"language-json\\">{\\n  ...\\n  &quot;projects&quot;: {\\n    &quot;app&quot;: {\\n      ...\\n      &quot;architect&quot;: {\\n        &quot;build&quot;: {\\n          &quot;builder&quot;: &quot;@angular-devkit/build-angular:browser&quot;,\\n          &quot;options&quot;: {\\n            ...\\n          },\\n          &quot;configurations&quot;: {\\n            &quot;production&quot;: {\\n              ...\\n            },\\n            ...\\n          }\\n        },\\n        ...</code></pre>\\n<h2 id=\\"configuration\\">Configuration</h2>\\n<p>List of default builders and their options you can find in the section <a href=\\"../builders\\">Builders</a>.</p>\\n<p>These options defined in <code>options</code> and <code>configurations</code> sections of <code>angular.json</code>.</p>\\n<p>On <code>ng run</code> call you can override any builder&#39;s option:</p>\\n<pre><code>ng run [project]:[target] --[argument]=[value]</code></pre>\\n"}],"title":"ng run","url":"command-ng-run"},{"id":"e7a52933-2fcc-c985-a58e-e16158176d2e","entries":[{"id":"7b8567c5-7fc0-f226-6a44-d25fc14c465f","type":"text","text":"<pre><code>ng generate [schematic-name] [name] [--[argument]=[value]]\\nng g</code></pre>\\n<p>Generates the specified schematic.</p>\\n<p>Also Angular CLI provides a mechanism to generate code from any package (<code>schematic-package</code> points to an npm package name):</p>\\n<pre><code>ng generate [schematic-package]:[schematic-name] [name]</code></pre>\\n<h2 id=\\"configuration\\">Configuration</h2>\\n<p>The list of the default generators you can find in the section <a href=\\"../schematics\\">Schematics</a>.</p>\\n<p>Default values of generators options can be added to your <code>angular.json</code> file.</p>\\n<p>Also you can override any option on <code>ng generate</code> command call:</p>\\n<pre><code>ng run [project]:[target] --[argument]=[value]</code></pre>\\n<h2 id=\\"options\\">Options</h2>\\n<p>The next options can be applied to any generator.</p>\\n"},{"id":"a2aec7d7-95d5-6aa1-e0e7-b878f9ad08fd","type":"command-param","head":"dryRun","description":"Run through without making any changes.","name":"dryRun","headId":"dryRun","paramType":"boolean","aliases":"d","default":"false"},{"id":"9fd28419-0c71-b359-48ae-f6e4eb946b44","type":"command-param","head":"force","description":"Forces overwriting of files. ","name":"force","headId":"force","paramType":"boolean","aliases":"f","default":"false"}],"title":"ng generate","url":"command-ng-generate"},{"id":"0d141457-5e34-e3bd-0d87-6141b3bd0127","entries":[{"id":"4e5481c0-a2af-cdb5-28f8-74ab1e7965ee","type":"text","text":"<pre><code>ng add [name]</code></pre>\\n<p>Add support for a library to your project.</p>\\n"},{"id":"2b5d1396-9ded-b396-f1d7-c929bde6a8ff","type":"hint","text":"`ng add` helps you add new capabilities to your app\u200a\u2014\u200athis command will install the dependencies and then \\ninvoke the installation script which will take care of all the rest."},{"id":"0b1d4b68-3f0b-7b05-ba2b-9d6a5a584f7a","type":"text","text":"<p>Adds the npm package for a published library to your workspace, and configures your default app project to use that library, in whatever way is specified by the library&#39;s schematic.</p>\\n<p>The default app project is the value of <code>defaultProject</code> in <code>angular.json</code>. </p>\\n"},{"id":"907d63b7-3574-5f41-45e4-027402cc1f39","type":"tutorials","links":[{"label":"Version 6 of Angular Now Available","url":"https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4","lang":"en"}]},{"id":"912991f8-c820-5015-f4e6-f7e8cd286e84","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"e6c3a641-1d14-d16b-9a6e-49c64d0454f4","type":"toc"},{"id":"acec7b82-1df3-52cd-3375-c07c0b435961","type":"command-param","head":"defaults","description":"When true, disables interactive input prompts for options with a default.","name":"defaults","headId":"defaults","paramType":"boolean","default":"false"},{"id":"bfa89e9f-0be8-133d-3ccc-fc3c76a629c3","type":"command-param","head":"dryRun","description":"When true, run through and report activity without writing out results.","name":"dryRun","headId":"dryRun","paramType":"boolean","default":"false","aliases":"d"},{"id":"4db6d3da-d7d8-ba56-d6e1-0763b16b1b79","type":"command-param","head":"force","description":"When true, force overwriting of existing files.","name":"force","headId":"force","paramType":"boolean","default":"false","aliases":"f"},{"id":"acaa1c2d-aef4-33ad-a252-2f98a31b6f5f","type":"command-param","head":"help","description":"Shows a help message for this command in the console.","name":"help","headId":"help","values":"true|false|json|JSON","default":"false","paramType":""},{"id":"953960e1-ef02-b739-5762-5167d9209854","type":"command-param","head":"interactive","description":"When false, disables interactive input prompts.","name":"interactive","headId":"interactive","paramType":"boolean","default":"false"}],"title":"ng add","url":"command-ng-add"},{"id":"693a33ac-6b03-2355-d43d-bbe33abd6d13","entries":[{"id":"26c04613-d28a-70da-0d5f-48f88fbc29b4","type":"text","text":"<pre><code>ng xi18n [--[argument]=[value]]</code></pre>\\n<p>Extract i18n messages from the templates.</p>\\n<p>Alias for the command:</p>\\n<pre><code>ng run [project]:extract-i18n</code></pre>\\n<p>In the default configuration for <code>ng xi18n</code> using builder <a href=\\"../builder-extract-i18n\\"><code>extract-i18n</code></a>.</p>\\n<p>With this command you can override any builder&#39;s option.</p>\\n"},{"id":"2c9272e3-aea1-3954-13c8-a1a6ba0aac65","type":"tutorials","links":[{"label":"Angular Internationalization (i18n)","url":"https://angular.io/guide/i18n","lang":"en"},{"label":"Angular: Introduction to Internationalization (i18n)","url":"https://medium.com/frontend-fun/angular-introduction-to-internationalization-i18n-28226a85e04e","lang":"en"}]},{"id":"16273aad-a1b8-d70e-8c56-48b68e32ff7c","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"10e16371-4cdc-6255-d1cc-9aa5bad5ecb7","type":"command-param","head":"configuration","description":"Specify the configuration to use. ","name":"configuration","headId":"configuration","aliases":"c","paramType":"string"}],"title":"ng xi18n","url":"command-ng-xi18n"},{"id":"b702f5f1-e859-fc76-8df2-0b96027ae0d9","entries":[{"id":"d70170f4-c0b1-3889-890a-6e9863969271","type":"text","text":"<pre><code>ng update [package] [--[argument]=[value]]</code></pre>\\n<p>Updates the current application to latest versions.</p>\\n"},{"id":"1e30bc24-1a1f-0f5d-0642-045cd04b4aa2","type":"tutorials","links":[{"label":"Updating your Angular projects","url":"https://angular.io/guide/updating","lang":"en"},{"label":"Angular Update Guide","url":"https://update.angular.io/","lang":"en"}]},{"id":"592f6a66-f7af-89a1-19ac-e99a1b3efa52","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"f609ec3a-f8fb-3875-54cc-c5a89e405173","type":"toc"},{"id":"78788221-6baa-254e-a7b9-b595499e8f6e","type":"command-param","head":"all","description":"Whether to update all packages in `package.json`.","name":"all","headId":"all","paramType":"boolean","default":"false"},{"id":"630035a7-9426-c8ff-4a58-04e421e43cef","type":"command-param","head":"dryRun","description":"Run through without making any changes. ","name":"dryRun","headId":"dryRun","paramType":"boolean","aliases":"d","default":"false"},{"id":"3df7e2f9-5c6e-f998-e286-052901299d64","type":"command-param","head":"force","description":"If false, will error out if installed packages are incompatible with the update. ","name":"force","headId":"force","paramType":"boolean","aliases":"f","default":"false"},{"id":"67e498d3-abf4-9762-d291-3aaf5bbd35c4","type":"command-param","head":"from","description":"Version from which to migrate from. Only available with a single package being updated, and only on migration only.","name":"from","headId":"from","paramType":"string"},{"id":"f61764d8-e623-7ba8-760a-adcda44f1129","type":"command-param","head":"migrateOnly","description":"Only perform a migration, does not update the installed version.","name":"migrateOnly","headId":"migrateOnly","paramType":"boolean"},{"id":"3daab321-69ce-77ef-dcf8-d705d250771a","type":"command-param","head":"next","description":"Use the largest version, including beta and RCs.","name":"next","headId":"next","paramType":"boolean"},{"id":"6de52a9e-1185-f787-8c00-1db2274c58c6","type":"command-param","head":"packages","description":"The names of package(s) to update.","name":"packages","headId":"packages"},{"id":"0852c79a-7ed6-9930-bb9d-683006e96e3b","type":"command-param","head":"registry","description":"The NPM registry to use.","name":"registry","headId":"registry","paramType":"string"},{"id":"dda20875-e5d1-b203-7914-261391242772","type":"command-param","head":"to","description":"Version up to which to apply migrations. Only available with a single package being updated, and only on migrations only. Requires from to be specified. Default to the installed version detected.","name":"to","headId":"to","paramType":"string"}],"title":"ng update","url":"command-ng-update"},{"id":"2b382f38-8cfc-50d4-49e6-68163b8ef33e","entries":[{"id":"53cb7a2c-4afd-0e1a-04f7-04b34dd97f00","type":"text","text":"<pre><code>ng config [key] [value]</code></pre>\\n<p>Get/set configuration values. <code>[key]</code> should be in JSON path format. Example: <code>a[3].foo.bar[2]</code>. </p>\\n<p>If only the <code>[key]</code> is provided it will get the value. If both the <code>[key]</code> and <code>[value]</code> are provided it will set the value.</p>\\n<h2 id=\\"options\\">Options</h2>\\n"},{"id":"a4584115-cecf-e6bd-7aad-9dcff1bbbedc","type":"command-param","head":"global","description":"Get/set the value in the global configuration (in your home directory). ","name":"global","headId":"global","aliases":"g","paramType":"boolean"}],"title":"ng config","url":"command-ng-config"},{"id":"d2187aab-771d-c34c-a4e8-3f63487e634d","entries":[{"id":"9650b529-e24d-8ca0-fbec-736926a842fe","type":"text","text":"<pre><code>ng doc [search term]</code></pre>\\n<p>Opens the official Angular API documentation for a given keyword on <a href=\\"https://angular.io\\">angular.io</a>.</p>\\n<h2 id=\\"options\\">Options</h2>\\n"},{"id":"3b0f6618-e3a8-5adf-007a-cd01706fe1e7","type":"command-param","head":"search","description":"Search whole angular.io instead of just api. ","name":"search","headId":"search","aliases":"s","paramType":"boolean"}],"title":"ng doc","url":"command-ng-doc"},{"id":"b2def587-9d48-4758-a11e-223a9adbdaf6","entries":[{"id":"bee6446c-52fb-6ebd-ff99-8e503b07a85f","type":"text","text":"<p>Angular CLI version 6 changed a format of configuration file and introduced builders.</p>\\n<p>In <code>angular.json</code> you can define different ways to build/serve of your application.</p>\\n<p>For running builds use the command <a href=\\"../command-ng-run\\"><code>ng run</code></a>.</p>\\n<p>As schematics, builders are installed via package manager (npm). This section describes the default Angular builders from package <code>@angular-devkit/build-angular</code>.</p>\\n"},{"id":"54f0e8e0-b97b-d6c6-2d6e-c4c9654cab4f","type":"tutorials","links":[{"label":"Understanding the Angular CLI Workspace File","url":"https://nitayneeman.com/posts/understanding-the-angular-cli-workspace-file/","lang":"en"},{"lang":"en","label":"Angular CLI\u200a\u2014\u200aDemystifying the workspace","url":"https://blog.nrwl.io/angular-cli-demystifying-the-workspace-7f59ffaab4cb"}]}],"title":"Builders","url":"builders"},{"id":"7f70ef30-12c7-eed2-ada3-9acbf9aa5a3a","entries":[{"id":"e2d26c0a-ce34-3d09-1a6b-a6b761415e90","type":"text","text":"<p>ID: <code>@angular-devkit/build-angular:app-shell</code></p>\\n"},{"id":"8af2912b-46a9-2c90-f740-90e1e16f56b2","type":"hint","text":"App shell is a way to render a portion of your application via a route at build time. This gives users a meaningful first paint of your application because the browser does not need to initialize any JavaScript, just rendering the HTML."},{"id":"672c8574-b973-5edc-e4e0-673627733071","type":"tutorials","links":[{"label":"Angular App Shell - Boosting Application Startup Performance","url":"https://blog.angular-university.io/angular-app-shell/","lang":"en"}]},{"id":"2a6f4b52-eca4-01cf-03af-1b4c3d1e5b48","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"4fda7112-4599-bdb2-915d-f0364132b847","type":"toc"},{"id":"b6d1ce5f-0685-4280-6917-bf42c5f81f0a","type":"command-param","head":"appModuleBundle","description":"Script that exports the Server AppModule to render. This should be the main JavaScript outputted by the server target. By default we will resolve the outputPath of the serverTarget and find a bundle named \'main\' in it (whether or not there\'s a hash tag).","name":"appModuleBundle","headId":"appModuleBundle","paramType":"string"},{"id":"63e0af51-9290-0dce-9e92-59eb8b359b13","type":"command-param","head":"browserTarget","description":"Target to build.","name":"browserTarget","headId":"browserTarget","paramType":"string"},{"id":"5aaecc83-aeea-f4f9-276f-a669f31d9d85","type":"command-param","head":"inputIndexPath","description":"The input path for the `index.html` file. By default uses the output index.html of the browser target.","name":"inputIndexPath","headId":"inputIndexPath","paramType":"string"},{"id":"ce05d65e-b967-7dc0-95d7-0e7c3bb15bca","type":"command-param","head":"outputIndexPath","description":"The output path of the index.html file. By default will overwrite the input file.","name":"outputIndexPath","headId":"outputIndexPath","paramType":"string"},{"id":"68cfd376-2089-1968-616c-a89b1ac6a2cb","type":"command-param","head":"route","description":"The route to render.","name":"route","headId":"route","paramType":"string","default":"/"},{"id":"d1287605-e9a7-edf2-4f44-09a62a86016e","type":"command-param","head":"serverTarget","description":"Server target to use for rendering the app shell.","name":"serverTarget","headId":"serverTarget","paramType":"string"}],"title":"App-shell builder","url":"builder-app-shell","generationType":"cli-builder","generationCliBuilderName":"appShell"},{"id":"34df1bf8-ad15-4dfa-839d-3448a8f20c45","entries":[{"id":"756a37bd-55b3-30ea-ed3d-7dec9f0d4a31","type":"text","text":"<p>ID: <code>@angular-devkit/build-angular:browser</code></p>\\n"},{"id":"6dda87e1-a0a3-59f6-de42-e3e5431d97d0","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"c6406f53-3b4f-6c01-2f82-8df6417c08fa","type":"toc"},{"id":"22cda497-7f8e-c0e5-54e6-12d4a800f12a","type":"command-param","head":"aot","description":"Build using Ahead of Time compilation.","name":"aot","headId":"aot","paramType":"boolean"},{"id":"dd54763d-8cf6-3752-e918-f94475f03103","type":"command-param","head":"assets","description":"List of static application assets.","name":"assets","headId":"assets","paramType":"array"},{"id":"d39aaf64-bec3-0e38-4b7c-7715c5d242f9","type":"command-param","head":"baseHref","description":"Base URL for the application being built.","name":"baseHref","headId":"baseHref","paramType":""},{"id":"f2b0ebc8-9006-2f3f-346e-3b256b54563c","type":"command-param","head":"budgets","description":"Budget thresholds to ensure parts of your application stay within boundaries which you set.\\n","name":"budgets","headId":"budgets","paramType":"array"},{"id":"76e90db6-bd90-40f3-8565-fb5c82b02f6c","type":"command-param","head":"buildEventLog","description":"Output file path for [Build Event Protocol](https://docs.bazel.build/versions/master/build-event-protocol.html) events.","headId":"buildEventLog","name":"buildEventLog","paramType":"string"},{"id":"63f4e0a1-5832-92c0-8982-399ce851860d","type":"command-param","head":"buildOptimizer","description":"Enables @angular-devkit/build-optimizer optimizations when using the \'aot\' option.","name":"buildOptimizer","headId":"buildOptimizer","paramType":"boolean"},{"id":"d9add9eb-4142-fcd9-a623-24fccf4a9f26","type":"command-param","head":"commonChunk","description":"Use a separate bundle containing code used across multiple bundles.","name":"commonChunk","headId":"commonChunk","paramType":"boolean","default":"true"},{"id":"ffe66cbb-878a-c74d-fc32-0fbe68d9f7c6","type":"command-param","name":"crossOrigin","head":"crossOrigin","headId":"crossOrigin","paramType":"string","default":"none","description":"Define the crossorigin attribute setting of elements that provide CORS support."},{"id":"73a251b3-b1d1-6971-fd0b-3553ca5fb7e6","type":"command-param","head":"deleteOutputPath","description":"Delete the output path before building.","name":"deleteOutputPath","headId":"deleteOutputPath","paramType":"boolean","default":"true"},{"id":"7764e897-7651-eb59-f129-f499146bcbbc","type":"command-param","head":"deployUrl","description":"URL where files will be deployed.","name":"deployUrl","headId":"deployUrl","paramType":"string"},{"id":"3ffe15ef-b53a-44a4-dd75-8e8882a9585e","type":"command-param","head":"es5BrowserSupport","description":"Enables conditionally loaded ES2015 polyfills.","headId":"es5BrowserSupport","name":"es5BrowserSupport","paramType":"boolean","default":"false","tutorialsEntry":{"id":"16222192-4f32-bb6d-12fa-ebbb8d9c0c5e","type":"tutorials","links":[{"lang":"en","label":"https://netbasal.com/prevent-loading-redundant-es2015-browser-polyfills-thanks-to-angular-cli-177494c5244d","url":"https://netbasal.com/prevent-loading-redundant-es2015-browser-polyfills-thanks-to-angular-cli-177494c5244d"}]}},{"id":"7b9eda73-7c84-d05e-87ee-6164aa5e112f","type":"command-param","head":"evalSourceMap","description":"Output in-file eval sourcemaps.","name":"evalSourceMap","headId":"evalSourceMap","paramType":"boolean"},{"id":"b9ccc660-1c69-9a7d-81da-1b6a2241b205","type":"command-param","head":"extractCss","description":"Extract css from global styles onto css files instead of js ones.","name":"extractCss","headId":"extractCss","paramType":"boolean","default":"false"},{"id":"1ace2404-f083-bdba-a641-d4cc179a2162","type":"command-param","head":"extractLicenses","description":"Extract all licenses in a separate file, in the case of production builds only.","name":"extractLicenses","headId":"extractLicenses","paramType":"boolean","default":"true"},{"id":"9d26f41f-2974-494a-7faa-8a382037d1c4","type":"command-param","head":"fileReplacements","description":"Replace files with other files in the build.","name":"fileReplacements","headId":"fileReplacements","paramType":"array","tutorialsEntry":{"id":"8ee63a8b-dfeb-d6b2-5577-0c75d485c011","type":"tutorials","links":[{"label":"Becoming an Angular Environmentalist","url":"https://blog.angularindepth.com/becoming-an-angular-environmentalist-45a48f7c20d8","lang":"en"}]}},{"id":"0b7823dc-e0ea-f9e0-54cb-4cf7c5429afa","type":"command-param","head":"forkTypeChecker","description":"Run the TypeScript type checker in a forked process.","name":"forkTypeChecker","headId":"forkTypeChecker","paramType":"boolean","default":"true"},{"id":"3df9f0de-0701-22fb-5fbf-481384f1dff1","type":"command-param","head":"i18nFile","description":"Localization file to use for i18n.","name":"i18nFile","headId":"i18nFile","paramType":"string"},{"id":"c55566b9-1e5f-1626-e882-1c56552d3d4e","type":"command-param","head":"i18nFormat","description":"Format of the localization file specified with `i18nFile`.","name":"i18nFormat","headId":"i18nFormat","paramType":"string"},{"id":"ab3a689d-eddb-e41b-ff82-7ef1f0423687","type":"command-param","head":"i18nLocale","description":"Locale to use for i18n.","name":"i18nLocale","headId":"i18nLocale","paramType":"string"},{"id":"e4454a59-3edb-e76b-c66d-4a604f0259c3","type":"command-param","head":"i18nMissingTranslation","description":"How to handle missing translations for i18n.","name":"i18nMissingTranslation","headId":"i18nMissingTranslation","paramType":"string"},{"id":"a31e26b6-5987-e755-27ea-36ce22aa9893","type":"command-param","head":"index","description":"The name of the index HTML file.","name":"index","headId":"index","paramType":"string"},{"id":"401c94e4-be8d-e468-3d0d-59ca63ad68ae","type":"command-param","head":"lazyModules","description":"List of additional NgModule files that will be lazy loaded. Lazy router modules with be discovered automatically.","name":"lazyModules","headId":"lazyModules","paramType":"array"},{"id":"e08219ed-d5cb-8316-18c8-a805797b8208","type":"command-param","head":"main","description":"The name of the main entry-point file.","name":"main","headId":"main","paramType":"string"},{"id":"8aee7385-b27c-ca6c-22d0-92cc120871c6","type":"command-param","head":"namedChunks","description":"Use file name for lazy loaded chunks.","name":"namedChunks","headId":"namedChunks","paramType":"boolean","default":"true"},{"id":"0cd568e9-9ac8-b2c4-d7c1-9fdf6592af40","type":"command-param","head":"ngswConfigPath","description":"Path to ngsw-config.json.","headId":"ngswConfigPath","name":"ngswConfigPath","paramType":"string"},{"id":"6317853c-03b2-8c96-cb8b-63d83e2d60cb","type":"command-param","head":"optimization","description":"Defines the optimization level of the build.\\n\\nIt also can take a more fine-grained value, as you can now give an object to configure if you want optimize only the scripts or styles.\\n\\n```json\\n\\"optimization\\": {\\n  \\"scripts\\": true,\\n  \\"styles\\": true\\n}\\n```","name":"optimization","headId":"optimization","paramType":"boolean | Object","default":"false"},{"id":"1484ed50-d1fd-523a-f25f-bdc13e0890b0","type":"command-param","head":"outputHashing","description":"Define the output filename cache-busting hashing mode.","name":"outputHashing","headId":"outputHashing","paramType":"string","values":"none,all,media,bundles","default":"none"},{"id":"f5901ded-a8b8-ff3d-dc5b-09db7a3bb4a4","type":"command-param","head":"outputPath","description":"Path where output will be placed.","name":"outputPath","headId":"outputPath","paramType":"string"},{"id":"fe10e0c5-9a4d-0bdf-0d4d-f8310b1846af","type":"command-param","head":"poll","description":"Enable and define the file watching poll time period in milliseconds.","name":"poll","headId":"poll","paramType":"number"},{"id":"d898f7a6-11d3-2cab-215e-f4a595de0328","type":"command-param","head":"polyfills","description":"The name of the polyfills file.","name":"polyfills","headId":"polyfills","paramType":"string"},{"id":"eb5c9cd7-e181-f800-266b-d4e3216b9503","type":"command-param","head":"preserveSymlinks","description":"Do not use the real path when resolving modules.","name":"preserveSymlinks","headId":"preserveSymlinks","paramType":"boolean"},{"id":"f99f0a6f-b86b-26dc-414c-c02264d9efdd","type":"command-param","head":"progress","description":"Log progress to the console while building.","name":"progress","headId":"progress","paramType":"boolean","default":"true"},{"id":"34a61d40-79a0-17ac-203e-9b734c37261a","type":"command-param","name":"rebaseRootRelativeCssUrls","head":"rebaseRootRelativeCssUrls","headId":"rebaseRootRelativeCssUrls","paramType":"boolean","default":"","description":"Change root relative URLs in stylesheets to include base HREF and deploy URL. Use only for compatibility and transition. The behavior of this option is non-standard and will be removed in the next major release."},{"id":"ec0979a8-b096-70a5-5758-bee8c75d5504","type":"command-param","head":"resourcesOutputPath","description":"Specify where resources will be placed, relative to `outputPath`.","headId":"resourcesOutputPath","name":"resourcesOutputPath","paramType":"string","hintEntry":{"id":"f857b0a7-6cc3-a7de-fcef-f0c91e196265","type":"hint","text":"You can ouput your CSS in other folder."}},{"id":"cef1fb10-6afa-72e7-2391-7bf41a4153fe","type":"command-param","head":"scripts","description":"Global scripts to be included in the build.","name":"scripts","headId":"scripts","paramType":"array"},{"id":"daf036e4-96be-239c-02a9-0b6293ee1ae3","type":"command-param","head":"serviceWorker","description":"Generates a service worker config for production builds.","name":"serviceWorker","headId":"serviceWorker","paramType":"boolean"},{"id":"b7e4f5ed-f732-fd6f-7249-09482cc452eb","type":"command-param","head":"showCircularDependencies","description":"Show circular dependency warnings on builds.","name":"showCircularDependencies","headId":"showCircularDependencies","paramType":"boolean","default":"true"},{"id":"8d019119-ea0a-3595-bca3-0e8d8dfb4c7b","type":"command-param","head":"skipAppShell","description":"Flag to prevent building an app shell.","name":"skipAppShell","headId":"skipAppShell","paramType":"boolean"},{"id":"44d8c9ff-befc-c12a-7ef2-fa9eda833d5c","type":"command-param","head":"sourceMap","description":"Output sourcemaps.\\n\\nIt also can take a more fine-grained value, as you can now give an object to configure if you want only the scripts source maps, the styles source maps, the vendor source maps, or the hidden source maps.\\n\\n```json\\n\\"sourceMap\\": {\\n  \\"scripts\\": true,\\n  \\"styles\\": true,\\n  \\"hidden\\": true,\\n  \\"vendor\\": true\\n}\\n```","name":"sourceMap","headId":"sourceMap","paramType":"boolean | Object","default":"true"},{"id":"c25fa5ba-eee6-48f9-0164-2f103d655b85","type":"command-param","head":"statsJson","description":"Generates a \'stats.json\' file which can be analyzed using tools such as: `#webpack-bundle-analyzer` or https://webpack.github.io/analyse.","name":"statsJson","headId":"statsJson","paramType":"boolean","hintEntry":{"id":"039be725-791f-efe7-5849-096cee915618","type":"hint","text":"View generated stats:\\n* `npm install -g webpack-bundle-analyzer`\\n* `webpack-bundle-analyzer dist/stats.json`"},"tutorialsEntry":{"id":"a94cd89d-672e-6cbb-1971-578c4747f825","type":"tutorials","links":[{"label":"Analyzing bundle size with the Angular CLI and Webpack","url":"https://coryrylan.com/blog/analyzing-bundle-size-with-the-angular-cli-and-webpack","lang":"en"}]}},{"id":"e3e29950-ffd9-eda1-6f2d-ae17a09e2e73","type":"command-param","head":"stylePreprocessorOptions","description":"Options to pass to style preprocessors.","name":"stylePreprocessorOptions","headId":"stylePreprocessorOptions","paramType":"object","tutorialsEntry":{"id":"fbd57d86-08f5-7ea2-1078-74aaf32d0bdf","type":"tutorials","links":[{"lang":"en","label":"Shortcut to Importing Styles Files in Components","url":"https://scotch.io/tutorials/angular-shortcut-to-importing-styles-files-in-components"}]}},{"id":"5704f8ed-835a-8eb3-f961-7dbecacd5722","type":"command-param","head":"styles","description":"Global styles to be included in the build.","name":"styles","headId":"styles","paramType":"array"},{"id":"4cd8ace4-254e-9dab-8c10-f18f499b07fa","type":"command-param","head":"subresourceIntegrity","description":"Enables the use of [subresource integrity](https://www.maxcdn.com/one/visual-glossary/subresource-integrity/) validation.","name":"subresourceIntegrity","headId":"subresourceIntegrity","paramType":"boolean"},{"id":"b3ca792d-e59a-5873-5de2-f218736675da","type":"command-param","head":"tsConfig","description":"The name of the TypeScript configuration file.","name":"tsConfig","headId":"tsConfig","paramType":"string"},{"id":"f13264a1-5ac0-0c30-5d24-85ae9d30cbda","type":"command-param","head":"vendorChunk","description":"Use a separate bundle containing only vendor libraries.","name":"vendorChunk","headId":"vendorChunk","paramType":"boolean","default":"true"},{"id":"00e44116-b7e7-de16-1443-8b8a35a92583","type":"command-param","head":"vendorSourceMap","description":"Resolve vendor packages sourcemaps.","headId":"vendorSourceMap","name":"vendorSourceMap","paramType":"boolean","default":"false"},{"id":"5d18dd14-bbe7-b753-80eb-9fbed1d711c8","type":"command-param","head":"verbose","description":"Adds more details to output logging.","name":"verbose","headId":"verbose","paramType":"boolean"},{"id":"4d367557-a5e5-4762-7897-826a859ef9a9","type":"command-param","head":"watch","description":"Run build when files change.","name":"watch","headId":"watch","paramType":"boolean"},{"id":"635eda24-d19a-e0eb-ca28-c7ef164f68ea","type":"command-param","name":"webWorkerTsConfig","head":"webWorkerTsConfig","headId":"webWorkerTsConfig","paramType":"string","default":"","description":"TypeScript configuration for Web Worker modules."}],"title":"Browser builder","url":"builder-browser","generationType":"cli-builder","generationCliBuilderName":"browser"},{"id":"2b0488ef-2a78-9ddd-adb7-af42dc877e53","entries":[{"id":"3927c5c0-d935-42cd-33ee-3003c8b31a18","type":"text","text":"<p>ID: <code>@angular-devkit/build-angular:dev-server</code></p>\\n<h2 id=\\"options\\">Options</h2>\\n"},{"id":"d763879f-fdf3-cc55-5031-df449111d390","type":"toc"},{"id":"a992285c-d61c-ca8d-8bf3-19fe00954898","type":"command-param","name":"allowedHosts","head":"allowedHosts","headId":"allowedHosts","paramType":"array","default":[],"description":"Whitelist of hosts that are allowed to access the dev server."},{"id":"db0a8cdb-5b3e-6952-a93e-135c707d6668","type":"command-param","head":"aot","description":"Build using Ahead of Time compilation.","name":"aot","headId":"aot","paramType":"boolean"},{"id":"34a29db3-057b-d5b7-27e3-215280290b58","type":"command-param","head":"baseHref","description":"Base url for the application being built.","name":"baseHref","headId":"baseHref","paramType":"string"},{"id":"f9009c9d-98e6-e5f1-9615-2fdc56c25c6b","type":"command-param","head":"browserTarget","description":"Target to serve.","name":"browserTarget","headId":"browserTarget","paramType":"string"},{"id":"85cc214d-cbba-856a-ffd2-1af9c5013469","type":"command-param","head":"commonChunk","description":"Use a separate bundle containing code used across multiple bundles.","name":"commonChunk","headId":"commonChunk","paramType":"boolean"},{"id":"508d90e3-d338-f6d0-e56b-dde67ff676c9","type":"command-param","head":"deployUrl","description":"URL where files will be deployed.","name":"deployUrl","headId":"deployUrl","paramType":"string"},{"id":"a8e0c0a3-572f-4f83-ea9c-f5542016da9b","type":"command-param","head":"disableHostCheck","description":"Don\'t verify connected clients are part of allowed hosts.","name":"disableHostCheck","headId":"disableHostCheck","paramType":"boolean"},{"id":"62498127-91a2-9102-2f76-19b2ec6791eb","type":"command-param","head":"evalSourceMap","description":"Output in-file eval sourcemaps.","name":"evalSourceMap","headId":"evalSourceMap","paramType":"boolean"},{"id":"9f472888-42c0-9d1e-c2ec-3ee077b5b4f8","type":"command-param","head":"hmr","description":"Enable hot module replacement.","name":"hmr","headId":"hmr","paramType":"boolean"},{"id":"366531cd-6e52-b701-326e-a91c8e24cadd","type":"command-param","head":"hmrWarning","description":"Show a warning when the --hmr option is enabled.","name":"hmrWarning","headId":"hmrWarning","paramType":"boolean","default":"true"},{"id":"d3f6a783-ee08-e2b1-6f57-ce4a253215cb","type":"command-param","head":"host","description":"Host to listen on.","name":"host","headId":"host","paramType":"string","aliases":"localhost"},{"id":"ab7df1a4-cbdd-baec-bbd9-1e5f291e8909","type":"command-param","head":"liveReload","description":"Whether to reload the page on change, using live-reload.","name":"liveReload","headId":"liveReload","paramType":"boolean","default":"true"},{"id":"e80559c3-cc5d-8609-4f77-9f09e6fde43b","type":"command-param","head":"open","description":"Opens the url in default browser.","name":"open","headId":"open","aliases":"o","paramType":"boolean"},{"id":"c408e416-1693-8caa-cc5c-8fb34e6f6844","type":"command-param","head":"optimization","description":"Defines the optimization level of the build.","name":"optimization","headId":"optimization","paramType":"boolean"},{"id":"f2697050-d39e-27c3-3b69-8c9ea33b33c2","type":"command-param","head":"poll","description":"Enable and define the file watching poll time period in milliseconds.","headId":"poll","name":"poll","paramType":"number","aliases":""},{"id":"d14c2ccd-19d8-2317-8009-0cbcc4e4386c","type":"command-param","head":"port","description":"Port to listen on.","name":"port","headId":"port","paramType":"number","default":"4200"},{"id":"4f9e9348-b542-ff16-9050-0172e365a923","type":"command-param","head":"progress","description":"Log progress to the console while building.","name":"progress","headId":"progress","paramType":"boolean"},{"id":"a77b30d3-188f-46cb-fc29-ef8989bbcc54","type":"command-param","head":"proxyConfig","description":"Proxy configuration file.","name":"proxyConfig","headId":"proxyConfig","paramType":"string"},{"id":"d4ea1701-ead5-a327-0660-7907e3873d71","type":"command-param","head":"publicHost","description":"Specify the URL that the browser client will use.","name":"publicHost","headId":"publicHost","paramType":"string"},{"id":"020fa534-0a63-df5d-0253-56098e5d35fd","type":"command-param","head":"servePath","description":"The pathname where the app will be served.","name":"servePath","headId":"servePath","paramType":"string"},{"id":"f910381e-ca22-75d4-83e6-1071c18941e0","type":"command-param","head":"servePathDefaultWarning","description":"Show a warning when deploy-url/base-href use unsupported serve path values.","name":"servePathDefaultWarning","headId":"servePathDefaultWarning","paramType":"boolean","default":"true"},{"id":"243f699f-3dd6-c1e7-5fcb-4a390690b52e","type":"command-param","head":"sourceMap","description":"Output sourcemaps.","name":"sourceMap","headId":"sourceMap","paramType":"boolean"},{"id":"bdd8e423-24f4-312c-1ad9-36088cd253f6","type":"command-param","head":"ssl","description":"Serve using HTTPS.","name":"ssl","headId":"ssl","paramType":"boolean"},{"id":"2f223709-bfb3-b7c0-abfa-7155341c1f12","type":"command-param","head":"sslCert","description":"SSL certificate to use for serving HTTPS.","name":"sslCert","headId":"sslCert","paramType":"string"},{"id":"762b018b-0a7c-d858-38f8-67afe68bfefb","type":"command-param","head":"sslKey","description":"SSL key to use for serving HTTPS.","name":"sslKey","headId":"sslKey","paramType":"string"},{"id":"406ff0ef-7663-3017-795d-2dfa872f904c","type":"command-param","head":"vendorChunk","description":"Use a separate bundle containing only vendor libraries.","name":"vendorChunk","headId":"vendorChunk","paramType":"boolean"},{"id":"036fcc28-deb7-ca19-24bd-198294d012c1","type":"command-param","head":"vendorSourceMap","description":"Resolve vendor packages sourcemaps.","headId":"vendorSourceMap","name":"vendorSourceMap","paramType":"boolean","default":"false"},{"id":"71d89a9e-1f3a-ce62-0dd3-464062c720db","type":"command-param","head":"verbose","description":"Adds more details to output logging.","name":"verbose","headId":"verbose","paramType":"boolean"},{"id":"17073670-2f39-31ad-3f9e-9d2162c776f2","type":"command-param","head":"watch","description":"Rebuild on change.","name":"watch","headId":"watch","paramType":"boolean","default":"true"}],"title":"Dev-server builder","url":"builder-dev-server","generationType":"cli-builder","generationCliBuilderName":"devServer"},{"id":"1427e274-b46c-55a7-ba43-6094f217b076","entries":[{"id":"f3bd9436-cc11-65d3-636c-17f98bafb24a","type":"text","text":"<p>ID: <code>@angular-devkit/build-angular:extract-i18n</code></p>\\n"},{"id":"b53189a9-6f34-c851-f91c-9aa07674c482","type":"tutorials","links":[{"label":"Angular Internationalization (i18n)","url":"https://angular.io/guide/i18n","lang":"en"},{"label":"Angular: Introduction to Internationalization (i18n)","url":"https://medium.com/frontend-fun/angular-introduction-to-internationalization-i18n-28226a85e04e","lang":"en"}]},{"id":"843de2f2-ef73-1096-05be-4ef5d7a94f66","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"19ac5e9d-76ca-2693-b644-457a2b4c23dd","type":"toc"},{"id":"7e05f660-d17d-e09a-17f6-a2bc9330111b","type":"command-param","head":"browserTarget","description":"Target to extract from.","name":"browserTarget","headId":"browserTarget","paramType":"string"},{"id":"718930fe-f18e-64d3-b852-a32b1d5df1da","type":"command-param","head":"i18nFormat","description":"Output format for the generated file.","name":"i18nFormat","headId":"i18nFormat","paramType":"string","values":"xmb,xlf,xlif,xliff,xlf2,xliff2","default":"xlf"},{"id":"075fd7d9-6c74-9add-17f1-7cf7e07aeeb5","type":"command-param","head":"i18nLocale","description":"Specifies the source language of the application.","name":"i18nLocale","headId":"i18nLocale","paramType":"string"},{"id":"8ae8ab9c-ea53-b9ea-1bdb-5f96abfb936b","type":"command-param","head":"outFile","description":"Name of the file to output.","name":"outFile","headId":"outFile","paramType":"string"},{"id":"2313b9ee-6d38-59a3-5029-8d0261a25e56","type":"command-param","head":"outputPath","description":"Path where output will be placed.","name":"outputPath","headId":"outputPath","paramType":"string"},{"id":"8e39088b-5ac6-2b3c-23fc-32cb4cfe848d","type":"command-param","name":"progress","head":"progress","headId":"progress","paramType":"boolean","default":true,"description":"Log progress to the console."}],"title":"Extract-i18n builder","url":"builder-extract-i18n","generationType":"cli-builder","generationCliBuilderName":"extracti18n"},{"id":"3b309737-d7bd-6d74-6cd8-1f7bdde2738d","entries":[{"id":"58d1bb71-7b9e-458e-12f4-552af8e77d87","type":"text","text":"<p>ID: <code>@angular-devkit/build-angular:karma</code></p>\\n"},{"id":"adcf8658-d495-97ca-22f7-6bdde13bd0a0","type":"tutorials","links":[{"label":"Angular Testing","url":"https://angular.io/guide/testing","lang":"en"}]},{"id":"10261daf-6f29-62bd-d9b6-57aa8f55e377","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"6063bd20-2de5-ddc8-d315-c89df63d88c9","type":"toc"},{"id":"6d698bbb-b1e4-d4ed-be3a-c79354cfe753","type":"command-param","head":"assets","description":"List of static application assets.","name":"assets","headId":"assets","paramType":"array"},{"id":"e8df335a-23f6-ad8d-e8cb-b53aa33fa095","type":"command-param","head":"browsers","description":"Override which browsers tests are run against.","name":"browsers","headId":"browsers","default":"","paramType":"string"},{"id":"ceee8a74-e5fe-97e3-4995-39d7985e5764","type":"command-param","head":"codeCoverage","description":"Output a code coverage report.","name":"codeCoverage","headId":"codeCoverage","paramType":"boolean"},{"id":"7f034730-61ab-69d4-774a-079a50aab0e0","type":"command-param","head":"codeCoverageExclude","description":"Globs to exclude from code coverage.","name":"codeCoverageExclude","headId":"codeCoverageExclude","paramType":"array"},{"id":"2b4c17d4-8f19-3835-4533-56f819a1b713","type":"command-param","head":"environment","description":"Defines the build environment.","name":"environment","headId":"environment","paramType":"string"},{"id":"e9dbc6c1-109e-6933-e647-2125c30be207","type":"command-param","head":"fileReplacements","description":"Replace files with other files in the build.","name":"fileReplacements","headId":"fileReplacements","paramType":"array"},{"id":"df6e584d-b74f-7573-a07d-345714bc80fb","type":"command-param","head":"karmaConfig","description":"The name of the Karma configuration file.","name":"karmaConfig","headId":"karmaConfig","paramType":"string"},{"id":"b690021b-ab5d-93f7-0441-cbf5647c15ca","type":"command-param","head":"main","description":"The name of the main entry-point file.","name":"main","headId":"main","paramType":"string"},{"id":"05459762-b2c4-dd35-d251-09ebb2ecfa3d","type":"command-param","head":"poll","description":"Enable and define the file watching poll time period in milliseconds.","name":"poll","headId":"poll","paramType":"number"},{"id":"f50b13ff-609c-11e4-e329-e7983669cb45","type":"command-param","head":"polyfills","description":"The name of the polyfills file.","name":"polyfills","headId":"polyfills","paramType":"string"},{"id":"dbd3fc9b-9af9-6023-f194-217bf7807bdf","type":"command-param","head":"preserveSymlinks","description":"Do not use the real path when resolving modules.","name":"preserveSymlinks","headId":"preserveSymlinks","paramType":"boolean"},{"id":"ccd42a0d-854d-fec6-03f0-af4a20fc88bd","type":"command-param","head":"progress","description":"Log progress to the console while building.","name":"progress","headId":"progress","paramType":"boolean","default":"true"},{"id":"e4148bad-8339-a512-5831-15a1be12e16c","type":"command-param","name":"reporters","head":"reporters","headId":"reporters","paramType":"array","default":"","description":"Karma reporters to use. Directly passed to the karma runner."},{"id":"594cb820-f571-bf6c-f075-9623aaa0f24e","type":"command-param","head":"scripts","description":"Global scripts to be included in the build.","name":"scripts","headId":"scripts","paramType":"array"},{"id":"3e407908-83b2-1fce-092e-a82d84a0b342","type":"command-param","head":"sourceMap","description":"Output sourcemaps.","name":"sourceMap","headId":"sourceMap","paramType":"boolean","default":"true"},{"id":"0c207e0b-7842-376d-293c-4d6607128249","type":"command-param","head":"stylePreprocessorOptions","description":"Options to pass to style preprocessors.","name":"stylePreprocessorOptions","headId":"stylePreprocessorOptions","paramType":"object"},{"id":"b30c9114-ce3d-2cc6-94ce-8b997b0b95bd","type":"command-param","head":"styles","description":"Global styles to be included in the build.","name":"styles","headId":"styles","paramType":"array"},{"id":"9fb9a6be-9955-c951-3fc8-544b0fd0f3c7","type":"command-param","head":"tsConfig","description":"The name of the TypeScript configuration file.\\n","name":"tsConfig","headId":"tsConfig","paramType":"string"},{"id":"96cb850a-a492-589e-93a8-06cb519ec2f4","type":"command-param","head":"vendorSourceMap","description":"Resolve vendor packages sourcemaps.","headId":"vendorSourceMap","name":"vendorSourceMap","paramType":"boolean","default":"false"},{"id":"b6765b88-5745-23b0-283f-4387cb3a5046","type":"command-param","head":"watch","description":"Run build when files change.","name":"watch","headId":"watch","paramType":"boolean"},{"id":"2a143293-7787-a0d3-a3d0-1a910a5a6fd8","type":"command-param","name":"webWorkerTsConfig","head":"webWorkerTsConfig","headId":"webWorkerTsConfig","paramType":"string","default":"","description":"TypeScript configuration for Web Worker modules."}],"title":"Karma builder","url":"builder-karma","generationType":"cli-builder","generationCliBuilderName":"karma"},{"id":"0b1a5672-69f1-6943-f959-f8d628914598","entries":[{"id":"64f7c168-c1a6-541c-5216-e457107c80dd","type":"text","text":"<p>ID: <code>@angular-devkit/build-angular:protractor</code></p>\\n"},{"id":"5a33411f-a6a9-83c2-3f8f-08248812de1d","type":"tutorials","links":[{"label":"Introduction to E2E Testing with the Angular CLI and Protractor","url":"https://coryrylan.com/blog/introduction-to-e2e-testing-with-the-angular-cli-and-protractor","lang":"en"}]},{"id":"034f98cb-1d0c-913d-a6ed-ebe2660dab5b","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"cbdb801b-1139-2d3f-befc-1cf864e3ae2d","type":"toc"},{"id":"e280afb6-c074-8848-1cdf-28890167800d","type":"command-param","head":"baseUrl","description":"Base URL for protractor to connect to.","name":"baseUrl","headId":"baseUrl","paramType":"string"},{"id":"1f13832e-d6a3-98b5-e950-1b222adab79b","type":"command-param","head":"devServerTarget","description":"Dev server target to run tests against.","name":"devServerTarget","headId":"devServerTarget","paramType":"string"},{"id":"06357377-8e78-4c43-2f28-a5fab7d5ace4","type":"command-param","head":"elementExplorer","description":"Start Protractor\'s [Element Explorer](https://github.com/angular/protractor/blob/master/docs/debugging.md#testing-out-protractor-interactively) for debugging.","name":"elementExplorer","headId":"elementExplorer","paramType":"boolean"},{"id":"093d7fc5-855f-d112-9144-3bae853f42d5","type":"command-param","head":"host","description":"Host to listen on.","name":"host","headId":"host","paramType":"string","default":"localhost"},{"id":"67ca3b10-54bd-3e36-9cd1-2c9694c90e5c","type":"command-param","head":"port","description":"The port to use to serve the application.","name":"port","headId":"port","paramType":"number"},{"id":"12c6a2d0-ed8c-1a39-395c-322bf6e34d8b","type":"command-param","head":"protractorConfig","description":"The name of the Protractor configuration file.","name":"protractorConfig","headId":"protractorConfig","paramType":"string"},{"id":"54601958-f604-9799-6571-ba9688a5e63e","type":"command-param","head":"specs","description":"Override specs in the protractor config.","name":"specs","headId":"specs","paramType":"array"},{"id":"e69cfd17-ef82-0d51-f8b7-a57ebbc70c48","type":"command-param","head":"suite","description":"Override suite in the protractor config.","name":"suite","headId":"suite","paramType":"string"},{"id":"0a242067-248d-41f5-e23a-395d4c59054e","type":"command-param","head":"webdriverUpdate","description":"Try to update webdriver.","name":"webdriverUpdate","headId":"webdriverUpdate","paramType":"boolean","default":"true"},{"id":"45009a62-70f0-1fc3-623d-80ca326c0b66","type":"command-param","name":"serve","head":"serve","headId":"serve","paramType":"boolean","default":true,"description":"Compile and Serve the app."}],"title":"Protractor builder","url":"builder-protractor","generationType":"cli-builder","generationCliBuilderName":"protractor"},{"id":"6b511d08-e7a8-521e-9c19-56dd0f8e8707","entries":[{"id":"13e87757-ed5b-e793-8988-95b322b65ab7","type":"text","text":"<p>ID: <code>@angular-devkit/build-angular:server</code></p>\\n<h2 id=\\"options\\">Options</h2>\\n"},{"id":"909ac39a-2933-9c98-2348-cb17189bfb90","type":"toc"},{"id":"21847b66-7f5d-20ac-ba89-f2db7d7a45be","type":"command-param","head":"bundleDependencies","description":"Available on server platform only. Which external dependencies to bundle into the module. By default, all of node_modules will be kept as requires.","name":"bundleDependencies","headId":"bundleDependencies","paramType":"string","values":"none,all","default":"none"},{"id":"78131cd4-0eab-400c-1144-527237b5d26a","type":"command-param","head":"commonChunk","description":"Use a separate bundle containing code used across multiple bundles.","name":"commonChunk","headId":"commonChunk","paramType":"boolean","default":"true"},{"id":"6aa56b73-cd45-2d35-aafc-77191c1e1732","type":"command-param","head":"deleteOutputPath","description":"Delete the output path before building.","name":"deleteOutputPath","headId":"deleteOutputPath","paramType":"boolean","default":"true"},{"id":"2eba913c-2a9c-8a9c-a39d-6202f4e08602","type":"command-param","head":"evalSourceMap","description":"Output in-file eval sourcemaps.\\n","name":"evalSourceMap","headId":"evalSourceMap","paramType":"boolean"},{"id":"da2d51dc-eb41-daba-3dee-1a34cbfcbc46","type":"command-param","head":"extractLicenses","description":"Extract all licenses in a separate file, in the case of production builds only.","name":"extractLicenses","headId":"extractLicenses","paramType":"boolean","default":"true"},{"id":"64ad4822-535a-0817-ed3a-145bd1fca921","type":"command-param","head":"fileReplacements","description":"Replace files with other files in the build.","name":"fileReplacements","headId":"fileReplacements","paramType":"array"},{"id":"9f704744-592b-99db-fbb5-1257a735a9bc","type":"command-param","head":"forkTypeChecker","description":"Run the TypeScript type checker in a forked process.","name":"forkTypeChecker","headId":"forkTypeChecker","paramType":"boolean","default":"true"},{"id":"51f7d7bc-c25f-3369-1173-63e35eb14191","type":"command-param","head":"i18nFile","description":"Localization file to use for i18n.","name":"i18nFile","headId":"i18nFile","paramType":"string"},{"id":"77f3ed53-cf7e-b432-866e-e2049b882636","type":"command-param","head":"i18nFormat","description":"Format of the localization file specified with --i18n-file.","name":"i18nFormat","headId":"i18nFormat","paramType":"string"},{"id":"a228429d-4c74-a8f3-837a-339152286eda","type":"command-param","head":"i18nLocale","description":"Locale to use for i18n.","name":"i18nLocale","headId":"i18nLocale","paramType":"string"},{"id":"a42f0b1a-e084-5a9d-be18-a183fba2adcb","type":"command-param","head":"i18nMissingTranslation","description":"How to handle missing translations for i18n.\\n","name":"i18nMissingTranslation","headId":"i18nMissingTranslation","paramType":"string"},{"id":"97717594-1b05-3644-57b1-0cf8287bf3f2","type":"command-param","head":"lazyModules","description":"List of additional NgModule files that will be lazy loaded. Lazy router modules with be discovered automatically.","name":"lazyModules","headId":"lazyModules","paramType":"array"},{"id":"16c265a7-d6a8-0f87-8450-7097d5992049","type":"command-param","head":"main","description":"The name of the main entry-point file.","name":"main","headId":"main","paramType":"string"},{"id":"8333309e-cbb9-1a8c-ca9a-1e487bef6ccb","type":"command-param","head":"namedChunks","description":"Use file name for lazy loaded chunks.","name":"namedChunks","headId":"namedChunks","paramType":"boolean","default":"true"},{"id":"5e06584e-fe12-50fe-5de6-b8c00be6a826","type":"command-param","head":"optimization","description":"Defines the optimization level of the build.","name":"optimization","headId":"optimization","paramType":"boolean"},{"id":"caa72ead-66f2-b1dc-e6bf-06b639b8bf0d","type":"command-param","head":"outputHashing","description":"Define the output filename cache-busting hashing mode.","name":"outputHashing","headId":"outputHashing","paramType":"string","values":"none,all,media,bundles","default":"none"},{"id":"304d54f3-b5fc-535e-2d1a-36c2bae8525e","type":"command-param","head":"outputPath","description":"Path where output will be placed.","name":"outputPath","headId":"outputPath","paramType":"string"},{"id":"2b7ef3e2-5c2e-980c-1b17-98bdc1d0f875","type":"command-param","head":"poll","description":"Enable and define the file watching poll time period in milliseconds.","headId":"poll","name":"poll","paramType":"number"},{"id":"cb897a11-e6f8-c9ad-ccd2-2eb5042e3dba","type":"command-param","head":"preserveSymlinks","description":"Do not use the real path when resolving modules.","name":"preserveSymlinks","headId":"preserveSymlinks","paramType":"boolean"},{"id":"d6acdfbd-ce89-40c2-50d6-d409f6c04a2a","type":"command-param","head":"progress","description":"Log progress to the console while building.","name":"progress","headId":"progress","paramType":"boolean","default":"true"},{"id":"8db35a4d-060d-45ca-84fe-e0923f621da0","type":"command-param","name":"resourcesOutputPath","head":"resourcesOutputPath","headId":"resourcesOutputPath","paramType":"string","default":"","description":"The path where style resources will be placed, relative to outputPath."},{"id":"fdb9f4b3-b044-f835-1087-bf0ec30a9bfc","type":"command-param","head":"showCircularDependencies","description":"Show circular dependency warnings on builds.","name":"showCircularDependencies","headId":"showCircularDependencies","paramType":"boolean","default":"true"},{"id":"077f557f-2aed-3dde-1f75-69584515ee5e","type":"command-param","head":"sourceMap","description":"Output sourcemaps.","name":"sourceMap","headId":"sourceMap","paramType":"boolean","default":"true"},{"id":"afc04b66-485f-7cb1-5b5b-46c7197096bc","type":"command-param","head":"statsJson","description":"Generates a \'stats.json\' file which can be analyzed using tools such as: `#webpack-bundle-analyzer` or https://webpack.github.io/analyse.","name":"statsJson","headId":"statsJson","paramType":"boolean"},{"id":"68826f45-1fe9-05dd-46ff-b0ed4b948c69","type":"command-param","head":"stylePreprocessorOptions","description":"Options to pass to style preprocessors.\\n","name":"stylePreprocessorOptions","headId":"stylePreprocessorOptions","paramType":"object"},{"id":"4f32724e-3026-9745-9c9f-238b5d5dbec9","type":"command-param","head":"tsConfig","description":"The name of the TypeScript configuration file.","name":"tsConfig","headId":"tsConfig","paramType":"string","default":"tsconfig.app.json"},{"id":"efc841f5-40c0-2131-900f-4ca788c83b95","type":"command-param","head":"vendorChunk","description":"Use a separate bundle containing only vendor libraries.","name":"vendorChunk","headId":"vendorChunk","paramType":"boolean","default":"true"},{"id":"0bd0973a-6276-3938-ecc7-272bba150d6e","type":"command-param","head":"vendorSourceMap","description":"Resolve vendor packages sourcemaps.","headId":"vendorSourceMap","name":"vendorSourceMap","paramType":"boolean","default":"false"},{"id":"9050cf59-6c77-d9c6-c621-cebd655f4f6d","type":"command-param","head":"verbose","description":"Adds more details to output logging.","name":"verbose","headId":"verbose","paramType":"boolean"},{"id":"bd1da10d-9007-e955-de38-17c62473fa39","type":"command-param","head":"watch","links":[],"description":"Run build when files change.","headId":"watch","name":"watch","paramType":"boolean","default":"false"}],"title":"Server builder","url":"builder-server","generationType":"cli-builder","generationCliBuilderName":"server"},{"id":"80797727-af42-d79c-ced4-eac987947c61","entries":[{"id":"8af9a0f4-e4fc-d374-b4a3-3df3cf0b97b2","type":"text","text":"<p>ID: <code>@angular-devkit/build-angular:tslint</code></p>\\n"},{"id":"6c307f0f-7d90-208c-eeb7-08869677c15e","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"7aee9282-f693-584e-370b-5ba914e89e0b","type":"toc"},{"id":"22086447-7acb-3d98-cbd8-fe7ad47ca63c","type":"command-param","head":"exclude","description":"Files to exclude from linting.","name":"exclude","headId":"exclude","paramType":"array"},{"id":"dedb96eb-74bf-685e-b249-97cf23eca630","type":"command-param","head":"files","description":"Files to include in linting.","name":"files","headId":"files","paramType":"array"},{"id":"3586c829-bd73-bd4d-447f-bf03aae5f347","type":"command-param","head":"fix","description":"Fixes linting errors (may overwrite linted files).","name":"fix","headId":"fix","paramType":"boolean"},{"id":"6f5cee44-d97e-c6d6-7446-6492a676fdb8","type":"command-param","head":"force","description":"Succeeds even if there was linting errors.","name":"force","headId":"force","paramType":"boolean"},{"id":"13edfbbe-56e4-6eac-cd6f-c1eeb578afda","type":"command-param","head":"format","description":"Output format.","name":"format","headId":"format","paramType":"string","values":"prose,json,stylish,verbose,pmd,msbuild,checkstyle,vso,fileslist","default":"prose"},{"id":"ff29214d-e03d-1f63-610a-a2079b1b31d9","type":"command-param","head":"silent","description":"Show output text.","name":"silent","headId":"silent","paramType":"boolean"},{"id":"5018050c-6bea-3a76-1c07-3ba3d05566b3","type":"command-param","head":"tsConfig","description":"The name of the TypeScript configuration file.","name":"tsConfig","headId":"tsConfig"},{"id":"57791ee8-5532-f9dd-99e4-de6e6b65571d","type":"command-param","head":"tslintConfig","description":"The name of the TSLint configuration file.","name":"tslintConfig","headId":"tslintConfig","paramType":"string"},{"id":"e4aa573c-a72d-74ef-f9d0-60123ac9a6b9","type":"command-param","head":"typeCheck","description":"Controls the type check for linting.","name":"typeCheck","headId":"typeCheck","paramType":"boolean"}],"title":"Tslint builder","url":"builder-tslint","generationType":"cli-builder","generationCliBuilderName":"tslint"},{"id":"b49f6452-c870-4114-a76c-0f5ea1462c45","entries":[{"id":"6280d5a7-4220-1e18-26fb-56734a05071b","type":"text","text":"<p>Schematics is a workflow tool for the modern web; it can apply transforms to your project, such as create a new component, or updating your code to fix breaking changes in a dependency. Or maybe you want to add a new configuration option or framework to an existing project.</p>\\n<p>In Angular CLI you can run schematics by <a href=\\"../command-ng-generate\\"><code>ng generate</code></a>.</p>\\n<p>Also <a href=\\"../command-ng-add\\"><code>ng add</code></a> uses Schematics.</p>\\n"},{"id":"99f9ad66-9872-9d2c-2cea-f30c2edd01e8","type":"tutorials","links":[{"label":"Schematics \u2014 An Introduction","url":"https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2","lang":"en"},{"label":"Using schematics in WebStorm","url":"https://blog.angular.io/whats-new-in-webstorm-for-angular-acd804b84ec9","lang":"en"}]}],"title":"Schematics","url":"schematics"},{"id":"c39fb216-38da-f14a-665d-ac8e396c926d","entries":[{"id":"1a3c360e-063f-853e-9864-503e577f82a1","type":"text","text":"<pre><code>ng generate application [name] [--[argument]=[value]]\\nng generate app</code></pre>\\n"},{"id":"17b3c1e8-135d-3b8c-e5ca-297e39c5f25f","type":"text","text":"<p>Create an Angular application.</p>\\n"},{"id":"ce0fb899-081d-eeaf-2a92-864ce56004c5","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"7ee8a559-d6db-f15c-42cd-b1bc57404fed","type":"toc"},{"id":"eb0a2d13-4f34-fa2b-d513-3d5db6fd0386","type":"command-param","head":"experimentalIvy","description":"EXPERIMENTAL: Specifies whether to create a new application which uses the Ivy rendering engine.","headId":"experimentalIvy","name":"experimentalIvy","paramType":"boolean","default":"false"},{"id":"982a6e6c-82a2-0fdb-dd58-b20cbc2c648d","type":"command-param","head":"inlineStyle","description":"Specifies if the style will be in the ts file.","name":"inlineStyle","headId":"inlineStyle","paramType":"boolean","default":"false","aliases":"s"},{"id":"8f313915-a85f-9478-9391-e7bb535da743","type":"command-param","head":"inlineTemplate","description":"Specifies if the template will be in the ts file.","name":"inlineTemplate","headId":"inlineTemplate","paramType":"boolean","default":"false","aliases":"t"},{"id":"cef72097-5d54-e80a-1f3f-5be78e783122","type":"command-param","head":"minimal","description":"Create a barebones project without any testing frameworks.","headId":"minimal","name":"minimal","paramType":"boolean","default":"false"},{"id":"7d971293-964d-0f26-8ad3-aa2e56c1b610","type":"command-param","head":"prefix","description":"The prefix to apply to generated selectors.","name":"prefix","headId":"prefix","paramType":"string","default":"app","aliases":"p"},{"id":"555bc5f4-f113-03f5-7264-a6388c459f02","type":"command-param","head":"routing","description":"Generates a routing module.","name":"routing","headId":"routing","paramType":"boolean","default":"false"},{"id":"eaeccfda-ba96-d13e-2fcb-305e34529ea6","type":"command-param","head":"skipPackageJson","description":"Do not add dependencies to `package.json`.","name":"skipPackageJson","headId":"skipPackageJson","paramType":"boolean","default":"false"},{"id":"94b36cae-ed64-6bf1-a15e-b73b5c5bcdba","type":"command-param","head":"skipTests","description":"Skip creating spec files.","name":"skipTests","headId":"skipTests","paramType":"boolean","default":"false","aliases":"S"},{"id":"b094e78e-57ba-9978-b904-100ebf849b10","type":"command-param","head":"style","description":"The file extension to be used for style files.","name":"style","headId":"style","paramType":"string","default":"css"},{"id":"c5d245bc-ba9c-7c40-5ac7-365de7bd5e53","type":"command-param","head":"viewEncapsulation","description":"Specifies the view encapsulation strategy.","name":"viewEncapsulation","headId":"viewEncapsulation","paramType":"string","values":"Emulated, Native, None","default":"Emulated"}],"title":"Application generator","url":"schematic-application"},{"id":"0d49c26e-6382-2bf5-a6a8-fb482d5bb7e8","entries":[{"id":"aa2d981a-5943-85fd-3297-dbf5ed842290","type":"text","text":"<pre><code>ng generate appShell [name] [--[argument]=[value]]\\nng generate app-shell</code></pre>\\n"},{"id":"5463fa31-88a9-bfc0-1f7b-3bcd4f411f57","type":"text","text":"<p>Create an app shell.</p>\\n"},{"id":"d4c72bf2-355b-c0c0-ad34-765c49552541","type":"hint","text":"App shell is a way to render a portion of your application via a route at build time. This gives users a meaningful first paint of your application because the browser does not need to initialize any JavaScript, just rendering the HTML."},{"id":"294eefa8-875a-d506-5a1e-b38e6f70fddc","type":"tutorials","links":[{"label":"App shell documentation in angular-cli repository","url":"https://github.com/angular/angular-cli/blob/master/docs/documentation/stories/app-shell.md","lang":"en"},{"label":"Angular App Shell - Boosting Application Startup Performance","lang":"en","url":"https://blog.angular-university.io/angular-app-shell/"}]},{"id":"2ada8bfc-24c3-0668-7264-6d98b045783b","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"5c495cc5-01f1-71b0-d074-ebeb75acdf08","type":"toc"},{"id":"9035e052-5cd1-fbb2-dd1a-02a4d7c6f263","type":"command-param","head":"appDir","description":"The name of the application directory.","name":"appDir","headId":"appDir","paramType":"string","default":"app"},{"id":"0e6603d3-2212-0d71-9491-2b323a974ca8","type":"command-param","head":"appId","description":"The appId to use withServerTransition.","name":"appId","headId":"appId","paramType":"string","default":"serverApp"},{"id":"322d4626-07a4-43c3-8a84-7fe5e9dd4af3","type":"command-param","head":"clientProject","description":"Name of related client app.","name":"clientProject","headId":"clientProject","paramType":"string"},{"id":"35d8b9b5-c388-290d-b59a-64123fe0f6cc","type":"command-param","head":"index","description":"Name of the index file.","name":"index","headId":"index","paramType":"string","default":"index.html"},{"id":"004b5fea-20fc-f864-70b8-51726f78b42c","type":"command-param","head":"main","description":"The name of the main entry-point file.","name":"main","headId":"main","paramType":"string","default":"main.server.ts"},{"id":"f3c8d729-21cc-e20e-4d09-1b97ac0204a1","type":"command-param","head":"name","description":"Name of the app.","name":"name","headId":"name","paramType":"string"},{"id":"a7870f1f-a4a8-a3b6-ac31-47eb799cb6a8","type":"command-param","head":"outDir","description":"The output directory for build results.","name":"outDir","headId":"outDir","paramType":"string","default":"dist-server"},{"id":"b80c13d6-83a0-f64e-4120-11e18bb4c7dc","type":"command-param","head":"root","description":"The root directory of the app.","name":"root","headId":"root","paramType":"string","default":"src"},{"id":"037f4062-4828-9ee4-3597-a16994a24f4d","type":"command-param","head":"rootModuleClassName","description":"The name of the root module class.","name":"rootModuleClassName","headId":"rootModuleClassName","paramType":"string","default":"AppServerModule"},{"id":"35640ce5-1dce-2f3a-d44f-2378bce3074c","type":"command-param","head":"rootModuleFileName","description":"The name of the root module file.","name":"rootModuleFileName","headId":"rootModuleFileName","paramType":"string","default":"app.server.module.ts"},{"id":"1a8d8531-c838-5c64-45ec-500ba34f3cda","type":"command-param","head":"route","description":"Route path used to produce the app shell.","name":"route","headId":"route","paramType":"string","default":"shell"},{"id":"c74d1f6a-7f3f-a934-263c-eb36115b8891","type":"command-param","head":"sourceDir","description":"The path of the source directory.","name":"sourceDir","headId":"sourceDir","paramType":"string","default":"src","aliases":"D"},{"id":"1755d247-a7e0-7eb9-6d66-478cef2f26ed","type":"command-param","head":"test","description":"The name of the test entry-point file.","name":"test","headId":"test","paramType":"string"},{"id":"85d616af-28af-f9c1-eee5-81d9c01ee6e0","type":"command-param","head":"testTsconfigFileName","description":"The name of the TypeScript configuration file for tests.","name":"testTsconfigFileName","headId":"testTsconfigFileName","paramType":"string","default":"tsconfig.spec"},{"id":"43004fee-e0ce-5c3a-13b5-ff4494d46fdd","type":"command-param","head":"tsconfigFileName","links":[],"description":"The name of the TypeScript configuration file.","name":"tsconfigFileName","headId":"tsconfigFileName","paramType":"string","default":"tsconfig.server"},{"id":"c423d73f-926a-5669-beb4-ed67935bb2f9","type":"command-param","head":"universalProject","description":"Name of related universal app.","name":"universalProject","headId":"universalProject","paramType":"string"}],"title":"AppShell generator","url":"schematic-app-shell"},{"id":"8ef29f09-000e-23c7-950d-f9799726a582","entries":[{"id":"dcc66b64-62e5-2f03-e866-e812878e0694","type":"text","text":"<pre><code>ng generate class [name] [--[argument]=[value]]\\nng generate cl</code></pre>\\n"},{"id":"2fd584b5-f64d-c6a1-f2b5-806c9391aba9","type":"text","text":"<p>Create a class.</p>\\n<h2 id=\\"options\\">Options</h2>\\n"},{"id":"2603d9c5-f448-c5d4-8803-d938ab642d67","type":"toc"},{"id":"cc648df9-913d-e1ba-9589-d5301ed3364d","type":"command-param","head":"project","description":"The name of the project.","name":"project","headId":"project","paramType":"string","default":"projectName"},{"id":"b9c79253-cc54-4900-dc51-67f8109a2bf1","type":"command-param","head":"spec","description":"Specifies if a spec file is generated.","name":"spec","headId":"spec","paramType":"boolean","default":"false"},{"id":"6c242dcc-4e9c-d4af-c665-ccd93f66fdb0","type":"command-param","head":"type","description":"Specifies the type of class.","name":"type","headId":"type","paramType":"string"}],"title":"Class generator","url":"schematic-class"},{"id":"627b4d5c-34ef-96d6-2ea1-c21161490645","entries":[{"id":"94fc73f8-6bfd-d6ac-3b68-2e82b1758d88","type":"text","text":"<pre><code>ng generate component [name] [--[argument]=[value]]\\nng generate c</code></pre>\\n"},{"id":"802d5cc2-e41a-042d-672c-d3ee98697f01","type":"text","text":"<p>Create an Angular component.</p>\\n<h2 id=\\"options\\">Options</h2>\\n"},{"id":"0f1791e6-14c6-4606-1268-140f8fbf32b2","type":"toc"},{"id":"24f3c676-d01f-4e65-d5a8-cbfc43afdddb","type":"command-param","head":"changeDetection","description":"Specifies the change detection strategy.","name":"changeDetection","headId":"changeDetection","paramType":"string","values":"Default, OnPush","default":"Default","aliases":"c"},{"id":"7829c0ea-61aa-7bc4-8c71-b9cee818eb90","type":"command-param","head":"entryComponent","description":"Specifies if the component is an entry component of declaring module.","name":"entryComponent","headId":"entryComponent","paramType":"boolean","default":"false"},{"id":"18452ead-40b0-db90-8b17-b3fc6d1ae913","type":"command-param","head":"export","description":"Specifies if declaring module exports the component.","name":"export","headId":"export","paramType":"boolean","default":"false"},{"id":"1688d8b4-d7c8-bbab-125b-d95f097b858a","type":"command-param","head":"flat","description":"Flag to indicate if a dir is created.","name":"flat","headId":"flat","paramType":"boolean","default":"false"},{"id":"52806338-2af5-39c1-b2e5-a5296196d7f6","type":"command-param","head":"inlineStyle","description":"Specifies if the style will be in the ts file.","name":"inlineStyle","headId":"inlineStyle","paramType":"boolean","default":"false","aliases":"s"},{"id":"ecc897e7-c562-6955-e521-844e7b4e0613","type":"command-param","head":"inlineTemplate","description":"Specifies if the template will be in the ts file.","name":"inlineTemplate","headId":"inlineTemplate","paramType":"boolean","default":"false","aliases":"t"},{"id":"a19f9be5-375d-5acc-a58f-94cf873f579b","type":"command-param","head":"lintFix","description":"Specifies whether to apply lint fixes after generating the component.","name":"lintFix","headId":"lintFix","paramType":"boolean","default":"false"},{"id":"a2f67ff3-99df-193d-cbe2-68c8f9b6d887","type":"command-param","head":"module","description":"Allows specification of the declaring module.","name":"module","headId":"module","paramType":"string","aliases":"m"},{"id":"e4671b7c-2d48-2d1e-9364-a20698ef1b35","type":"command-param","head":"prefix","description":"The prefix to apply to generated selectors.","name":"prefix","headId":"prefix","paramType":"string","aliases":"p"},{"id":"8a9e49f4-ff3c-e24a-3ccf-4bd6c49f0aaa","type":"command-param","head":"project","description":"The name of the project.","name":"project","headId":"project","paramType":"string","default":"projectName"},{"id":"6ff618d4-d739-2275-930d-fb104ec1f876","type":"command-param","head":"selector","description":"The selector to use for the component.","name":"selector","headId":"selector","paramType":"string"},{"id":"b8293769-c45f-5700-f30f-a56bf21dfb51","type":"command-param","head":"skipImport","description":"Flag to skip the module import.","name":"skipImport","headId":"skipImport","paramType":"boolean","default":"false"},{"id":"54254e5e-3179-2da0-b872-3ed4d4f9ea17","type":"command-param","head":"spec","description":"Specifies if a spec file is generated.","name":"spec","headId":"spec","paramType":"boolean","default":"true"},{"id":"845538b8-fde6-39b4-d56a-c5b6b11cc014","type":"command-param","head":"styleext","description":"The file extension to be used for style files.","name":"styleext","headId":"styleext","paramType":"string","default":"css"},{"id":"09194905-e88f-3d7f-a10a-afba98a7af68","type":"command-param","head":"viewEncapsulation","description":"Specifies the view encapsulation strategy.","name":"viewEncapsulation","headId":"viewEncapsulation","paramType":"string","values":"Emulated, Native, None","aliases":"v","default":"Emulated"}],"title":"Component generator","url":"schematic-component"},{"id":"f4d9d704-47e0-74c8-695c-b02a3f2b5535","entries":[{"id":"242b267c-0095-5c2c-ef91-063c4789c81e","type":"text","text":"<pre><code>ng generate directive [name] [--[argument]=[value]]\\nng generate d</code></pre>\\n"},{"id":"df6be735-c506-7988-fd09-40216bdcce4b","type":"text","text":"<p>Create an Angular directive.</p>\\n<h2 id=\\"options\\">Options</h2>\\n"},{"id":"d15c41df-524b-7b07-4e74-50a8aa658bec","type":"toc"},{"id":"9ce3b4d1-0822-a121-f80d-b8501f9d5da0","type":"command-param","head":"export","description":"Specifies if declaring module exports the directive.","name":"export","headId":"export","paramType":"boolean","default":"false"},{"id":"ec0a810f-475f-0469-087d-9d7581920f77","type":"command-param","head":"flat","description":"Flag to indicate if a dir is created.","name":"flat","headId":"flat","paramType":"boolean","default":"true"},{"id":"71013da9-d614-cab4-a56b-34c4eb5373d6","type":"command-param","head":"lintFix","description":"Specifies whether to apply lint fixes after generating the directive.","name":"lintFix","headId":"lintFix","paramType":"boolean","default":"false"},{"id":"eb46299b-b630-5753-fd55-55f908824bcf","type":"command-param","head":"module","description":"Allows specification of the declaring module.","name":"module","headId":"module","paramType":"string","aliases":"m"},{"id":"5a1859bc-6f3b-5732-df8d-1e32bb54f34e","type":"command-param","head":"prefix","description":"The prefix to apply to generated selectors.","name":"prefix","headId":"prefix","paramType":"string","aliases":"p"},{"id":"b567328b-2155-998a-b2df-35265087e4b0","type":"command-param","head":"project","description":"The name of the project.","name":"project","headId":"project","paramType":"string","default":"projectName"},{"id":"3f3f82e0-57a4-092c-dbdb-5699d2d7c26c","type":"command-param","head":"selector","description":"The selector to use for the directive.","name":"selector","headId":"selector","paramType":"string"},{"id":"30551906-d954-7856-b56c-f66e96c72345","type":"command-param","head":"skipImport","description":"Flag to skip the module import.","name":"skipImport","headId":"skipImport","paramType":"boolean","default":"false"},{"id":"3b3da76b-d300-0b55-f73e-cbcbebb6008b","type":"command-param","head":"spec","description":"Specifies if a spec file is generated.","name":"spec","headId":"spec","paramType":"boolean","default":"true"}],"title":"Directive generator","url":"schematic-directive"},{"id":"8016cdc0-f3e9-e5c7-ab01-f2fc51fa1182","entries":[{"id":"86f19387-3ab2-f24e-fc5a-613872469db2","type":"text","text":"<pre><code>ng generate enum [name] [--[argument]=[value]]\\nng generate e</code></pre>\\n"},{"id":"8c0c5d25-2148-a1f9-e889-1c25c895787d","type":"text","text":"<p>Create an enumeration.</p>\\n"},{"id":"1d1cb9f6-92ac-cfda-fd79-509e0e904c57","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"d395ea6b-944f-d58a-1d13-165c58c09dce","type":"toc"},{"id":"3f9cdd54-a41c-d8f3-632c-27f105777af6","type":"command-param","head":"lintFix","description":"Specifies whether to apply lint fixes after generating the enum.","name":"lintFix","headId":"lintFix","paramType":"boolean","default":"false"},{"id":"3ce0ed46-02f2-e8ba-43d0-dfbdb09a2236","type":"command-param","head":"project","description":"The name of the project.","name":"project","headId":"project","paramType":"string","default":""}],"title":"Enum generator","url":"schematic-enum"},{"id":"70808925-0ef3-f7bb-c20b-e1bb971c7d31","entries":[{"id":"7f8f0bff-3685-0a07-551d-6021d52066ad","type":"text","text":"<pre><code>ng generate guard [name] [--[argument]=[value]]\\nng generate g</code></pre>\\n"},{"id":"cf49a545-8e72-5a73-f024-5fb49b3212be","type":"text","text":"<p>Create a guard.</p>\\n"},{"id":"d212abac-ed69-a3e9-83a3-63572d4dbcea","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"88326206-03a6-79f9-47d0-9847f1463b9c","type":"toc"},{"id":"97009875-201e-39f1-0f11-747cbad2315f","type":"command-param","head":"flat","description":"Flag to indicate if a dir is created.","name":"flat","headId":"flat","paramType":"boolean","default":"true"},{"id":"b984ec66-5e3e-8a3a-a090-479f2b81c448","type":"command-param","head":"lintFix","description":"Specifies whether to apply lint fixes after generating the guard.","name":"lintFix","headId":"lintFix","paramType":"boolean","default":"false"},{"id":"90615816-9f8c-e74b-d732-cb8a8739f2d5","type":"command-param","head":"project","description":"The name of the project.","name":"project","headId":"project","paramType":"string"},{"id":"598710a6-0dd5-c74f-ff8a-ea497382ea5c","type":"command-param","head":"spec","description":"Specifies if a spec file is generated.","name":"spec","headId":"spec","paramType":"boolean","default":"true"}],"title":"Guard generator","url":"schematic-guard"},{"id":"95838a85-af0c-8e13-30eb-6a15af329cc9","entries":[{"id":"e5a934c1-02bd-9802-4294-03b0dcd2d472","type":"text","text":"<pre><code>ng generate interface [name] [type] [--[argument]=[value]]\\nng generate i</code></pre>\\n"},{"id":"0499b08f-4abb-19c0-90b2-66c3e3cbce00","type":"text","text":"<p>Create an interface.</p>\\n"},{"id":"a9b58460-8ea0-d632-036b-39bab534e8a9","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"49970d26-cba5-0c7f-56fa-66dcda0e42d9","type":"toc"},{"id":"ce00fe7c-9bbf-c7ab-c32a-a8e229b550d7","type":"command-param","head":"lintFix","description":"Specifies whether to apply lint fixes after generating.","name":"lintFix","headId":"lintFix","paramType":"boolean","default":"false"},{"id":"8239b8c7-37c9-6797-071b-23076d9d161a","type":"command-param","head":"prefix","description":"Specifies the prefix to use.","name":"prefix","headId":"prefix","paramType":"string"},{"id":"af1e26f8-5ec5-f848-c25f-afdb32244567","type":"command-param","head":"project","description":"The name of the project.","name":"project","headId":"project","paramType":"string"}],"title":"Interface generator","url":"schematic-interface"},{"id":"7de86038-99fe-9807-e24b-eaebc86413bb","entries":[{"id":"df41f9cf-921f-c0cf-4602-9f653fb86549","type":"text","text":"<pre><code>ng generate library [name] [--[argument]=[value]]\\nng generate lib</code></pre>\\n"},{"id":"5dd00399-a640-b1e6-bf01-f78765dae6ea","type":"text","text":"<p>Generate a library project for Angular.</p>\\n"},{"id":"fc9ba922-818f-a991-ac8e-143f32d94125","type":"tutorials","links":[{"label":"The Angular Library Series - Creating a Library with the Angular CLI","url":"https://blog.angularindepth.com/creating-a-library-in-angular-6-87799552e7e5","lang":"en"}]},{"id":"f0387384-6035-e8dc-d5e8-ebf0a22ac144","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"0424a765-2ce9-570e-ecfd-6744fb01e419","type":"toc"},{"id":"b3bb7eda-7ea6-1e59-d582-46523cf274fb","type":"command-param","head":"entryFile","description":"The path to create the library\'s public API file.","name":"entryFile","headId":"entryFile","paramType":"string","default":"public_api"},{"id":"42f5bba7-9507-690d-82e5-9cdf51b868db","type":"command-param","head":"prefix","description":"The prefix to apply to generated selectors.","name":"prefix","headId":"prefix","paramType":"string","default":"lib","aliases":"p"},{"id":"02ff13e3-c953-a80d-f847-ed7705e1888b","type":"command-param","head":"skipPackageJson","description":"Do not add dependencies to `package.json`.","name":"skipPackageJson","headId":"skipPackageJson","paramType":"boolean","default":"false"},{"id":"65901907-0b2c-bfc7-95ee-1f23b0bedea2","type":"command-param","head":"skipInstall","description":"Skip installing dependency packages.","headId":"skipInstall","name":"skipInstall","paramType":"boolean","default":"false"},{"id":"41c0c3c1-2967-e360-989c-a9baeba1463f","type":"command-param","head":"skipTsConfig","description":"Do not update `tsconfig.json` for development experience.","name":"skipTsConfig","headId":"skipTsConfig","paramType":"boolean","default":"false"}],"title":"Library generator","url":"schematic-library"},{"id":"f2e73349-e8fe-1091-93ae-760638b781e7","entries":[{"id":"8371afd6-ce80-4f09-778c-a59542b85a04","type":"text","text":"<pre><code>ng generate module [name] [--[argument]=[value]]\\nng generate m</code></pre>\\n"},{"id":"9104a14d-d2ad-4716-e23e-512015376d25","type":"text","text":"<p>Create an Angular module.</p>\\n"},{"id":"0b0ace55-d851-d21e-0ab2-52d40b21e079","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"7664df4a-11b5-2a52-43d6-2180deed6f4a","type":"toc"},{"id":"d8e2cdf2-ce2f-77a2-c1db-b1b7c35d9bb8","type":"command-param","head":"flat","description":"Flag to indicate if a dir is created.","name":"flat","headId":"flat","paramType":"boolean","default":"false"},{"id":"1836733c-74d5-3385-22b4-e8f38e98f1ca","type":"command-param","head":"module","description":"Allows specification of the declaring module.","name":"module","headId":"module","paramType":"string","default":"","aliases":"m"},{"id":"f8e8a541-6606-3dc1-3706-a6070985a822","type":"command-param","head":"project","description":"The name of the project.","name":"project","headId":"project","paramType":"string","aliases":""},{"id":"e2d15cf2-f261-0e34-72cb-c9d9e8ee0d6f","type":"command-param","head":"routing","description":"Generates a routing module.","name":"routing","headId":"routing","paramType":"boolean","default":"false"},{"id":"82902672-c65e-ff26-5b17-e9bda1999b35","type":"command-param","head":"routingScope","description":"The scope for the generated routing.","name":"routingScope","headId":"routingScope","paramType":"string","values":"Child, Root","default":"Child"},{"id":"d6df7b69-fdac-31a7-4d6d-fba967de5d95","type":"command-param","head":"spec","description":"Specifies if a spec file is generated.","name":"spec","headId":"spec","paramType":"boolean","default":"true"}],"title":"Module generator","url":"schematic-module"},{"id":"fccb6074-443d-2ec3-099a-34fba0d906d5","entries":[{"id":"5f0cd5c3-3be9-eb58-8668-70b246eaf848","type":"text","text":"<pre><code>ng generate pipe [name] [--[argument]=[value]]\\nng generate p</code></pre>\\n"},{"id":"360424d7-9851-ab00-53fb-e0396569e92a","type":"text","text":"<p>Create an Angular pipe.</p>\\n"},{"id":"3d35a137-fc2c-6558-3c91-4a2b51c1e96f","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"4c18249f-d07f-3917-bd70-55f2c2205b5a","type":"toc"},{"id":"9f4be75f-b99e-ea64-bac0-88c44fd4f521","type":"command-param","head":"export","description":"Specifies if declaring module exports the pipe.","name":"export","headId":"export","paramType":"boolean","default":"false"},{"id":"a48db271-ff50-7a3c-fdf6-d51756daab18","type":"command-param","head":"flat","description":"Flag to indicate if a dir is created.","name":"flat","headId":"flat","default":"true","paramType":"boolean"},{"id":"cb65c393-dbef-b3a2-7ff7-dc8f29053bd2","type":"command-param","head":"lintFix","description":"Specifies whether to apply lint fixes after generating the pipe.","name":"lintFix","headId":"lintFix","paramType":"boolean","values":"","default":"false"},{"id":"ecb5d0b0-f9b6-4235-0c3e-9e8a70e36386","type":"command-param","head":"module","description":"Allows specification of the declaring module.","name":"module","headId":"module","paramType":"string","aliases":"m"},{"id":"e19d3159-49a9-edd5-6873-11069feb02d8","type":"command-param","head":"project","description":"The name of the project.","name":"project","headId":"project","paramType":"string"},{"id":"4836b0ae-d7f4-773f-dade-df21226e0263","type":"command-param","head":"skipImport","description":"Allows for skipping the module import.","name":"skipImport","headId":"skipImport","paramType":"boolean","default":"false"},{"id":"58366bde-b9ff-18d2-df52-1d41c8d8e912","type":"command-param","head":"spec","description":"Specifies if a spec file is generated.","name":"spec","headId":"spec","paramType":"boolean","default":"true"}],"title":"Pipe generator","url":"schematic-pipe"},{"id":"5b998e77-595c-83bd-4a8c-377442548687","entries":[{"id":"9db471f2-8bf8-99fc-326f-18e68bbd543b","type":"text","text":"<pre><code>ng generate service [name] [--[argument]=[value]]\\nng generate s</code></pre>\\n"},{"id":"e89a9a00-b42f-4d85-9b0e-4e33ea632a96","type":"text","text":"<p>Create an Angular service.</p>\\n"},{"id":"d54b4c00-f88b-e8b1-cb7f-93b53c43af76","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"0626e710-622a-9ef5-dfdb-e826740158d0","type":"toc"},{"id":"013ad01c-5c3f-fb0a-542b-3a69aefc4872","type":"command-param","head":"flat","description":"Flag to indicate if a dir is created.","name":"flat","headId":"flat","paramType":"boolean","default":"true"},{"id":"11b43851-9709-3ba0-105b-6b732862cf59","type":"command-param","head":"lintFix","description":"Specifies whether to apply lint fixes after generating.","name":"lintFix","headId":"lintFix","paramType":"boolean","default":"false"},{"id":"9f463ea3-8ce8-a690-53a2-bd31a272db94","type":"command-param","head":"project","description":"The name of the project.","name":"project","headId":"project","paramType":"string"},{"id":"86a19f68-d7fd-f196-8d47-4468f05be98e","type":"command-param","head":"spec","description":"Specifies if a spec file is generated.","name":"spec","headId":"spec","paramType":"boolean","default":"true"}],"title":"Service generator","url":"schematic-service"},{"id":"168f0573-8ca6-2067-e310-f5f3e8d8f7dd","entries":[{"id":"0c5a9ec6-15ce-0a9f-f279-1534cab98edf","type":"text","text":"<pre><code>ng generate universal [--[argument]=[value]]</code></pre>\\n"},{"id":"0223f233-440d-2fe5-2e36-4dc56f3161c2","type":"text","text":"<p>Create an Angular universal app.</p>\\n"},{"id":"74d4442f-3a39-a3f9-ba54-2ffda6fad004","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"64f84fdd-c28a-7603-7b1e-f9a48b91a1ee","type":"toc"},{"id":"dff6757f-d6c6-fcf1-5736-c59a4b501d06","type":"command-param","head":"appDir","links":[],"description":"The name of the application directory.","name":"appDir","headId":"appDir","paramType":"string","default":"app"},{"id":"c90faf8d-d9d4-c990-a7d5-5f2eedf397b4","type":"command-param","head":"appId","description":"The appId to use withServerTransition.","name":"appId","headId":"appId","paramType":"string","default":"serverApp"},{"id":"ff4ed975-cd4e-5bf8-38c5-43f425ea0f31","type":"command-param","head":"clientProject","description":"Name of related client app.","name":"clientProject","headId":"clientProject","paramType":"string"},{"id":"0a886da9-8ed3-65d4-bbf2-5ed4926d5b28","type":"command-param","head":"main","description":"The name of the main entry-point file.","name":"main","headId":"main","paramType":"string","default":"main.server.ts"},{"id":"9b5d865b-ba12-9cdf-56a8-b852c3188d4b","type":"command-param","head":"rootModuleClassName","description":"The name of the root module class.","name":"rootModuleClassName","headId":"rootModuleClassName","paramType":"string","default":"AppServerModule"},{"id":"4bc1b6b0-f1fa-63d7-79af-ed188e17b510","type":"command-param","head":"rootModuleFileName","description":"The name of the root module file.","name":"rootModuleFileName","headId":"rootModuleFileName","paramType":"string","default":"app.server.module.ts"},{"id":"de06fa09-217f-494d-dcab-1f4d9e9a29a3","type":"command-param","head":"skipInstall","description":"Skip installing dependency packages.","name":"skipInstall","headId":"skipInstall","paramType":"boolean","default":"false"},{"id":"33ef9601-e31d-0741-bd2a-074f6234d16a","type":"command-param","head":"test","description":"The name of the test entry-point file.","name":"test","headId":"test","paramType":"string"},{"id":"1b600b10-dbeb-a78e-3465-d2c8aa9f5705","type":"command-param","head":"testTsconfigFileName","description":"The name of the TypeScript configuration file for tests.","name":"testTsconfigFileName","headId":"testTsconfigFileName","paramType":"string","default":"tsconfig.spec"},{"id":"62351baf-2261-1514-db82-6411181d4ea5","type":"command-param","head":"tsconfigFileName","description":"The name of the TypeScript configuration file.","name":"tsconfigFileName","headId":"tsconfigFileName","paramType":"string","default":"tsconfig.server"}],"title":"Universal generator","url":"schematic-universal"}],"title":"CLI","color":"rgb(234, 37, 37)","url":"cli","langs":{"en":true,"ru":true}},{"id":"9705d447-3d27-8405-f165-c67e410846f6","menu":{"items":[{"id":"0dcf22f5-7e23-cddf-76ec-8baf43a643c8","label":"Introduction","url":"intro"},{"id":"5a6e18d3-92c9-9a6c-6220-a3c70399510b","label":"Interpolation {{...}}","url":"interpolation"},{"id":"2b2819e2-42fb-1627-7b5f-09471ba2bfda","label":"@Directive","url":"directive","separatedFromTop":true},{"id":"fdfe197d-eebc-68a5-ebbc-59abb040c3af","label":"@Component","url":"component"},{"id":"99042531-4b41-2ca5-7750-e001880c35ee","label":"Property binding []","sub":{"items":[{"id":"32e77141-e75d-02e0-b04d-e56f8b26de03","label":"@Input","url":"input-binding"},{"id":"81749af7-796d-4241-b42b-75599e8b9ad2","label":"[attr.]","url":"attr-binding"},{"id":"1f8c6cf0-acdb-4c0b-fad9-afce6d58ac73","label":"[class.]","url":"class-binding"},{"id":"19f3a698-6c4e-73c1-c20f-57c4f67c423e","label":"[ngClass]","url":"ngclass-directive"},{"id":"7d7b7a86-d014-b99a-decd-1ea1e231b512","label":"[style.]","url":"style-binding"},{"id":"95578183-1fa5-1e34-3ad3-3c5265f66469","label":"[ngStyle]","url":"ngstyle-directive"}]},"url":"property-binding","asGroup":true},{"id":"e4da7ee7-18aa-c54f-a249-aa4bbe0a2c8b","label":"Event binding ()","sub":{"items":[{"id":"08c13919-eddc-0e3a-98ee-8778362f6870","label":"@Output","url":"output-binding"},{"id":"bfdd1cb8-fa31-09ed-063d-b28988add5f9","label":"Pseudo-events","url":"pseudo-events"},{"id":"423ee9ba-3e8e-2f82-fce2-e42f648be383","label":"Touch events","url":"touch-events"}]},"url":"event-binding","asGroup":true},{"id":"cfdd34fe-5979-d9f6-7b68-5ce49d18e000","label":"Two-way binding [()]","sub":{"items":[{"id":"ff059e36-699f-a8ee-3749-8519d92cbcab","label":"[(ngModel)]","url":"ngmodel-directive"}]},"url":"two-way-binding","asGroup":true},{"id":"149af258-122a-25b5-e525-c71e28c0b2f4","label":"Structural directive *","sub":{"items":[{"id":"8bb3ee24-101b-f63c-6cab-596a666659cf","label":"ngIf","url":"ngif-directive"},{"id":"d4cb3fb7-ece0-5458-8c35-a484d806385b","label":"ngFor","url":"ngfor-directive"},{"id":"0760c388-10d2-e3c5-6679-fdfd8f4c0f7a","label":"ngSwitch","url":"ngswitch-directive"},{"id":"67cc3ae3-c741-4fc2-c901-9c3415776c26","label":"ngPlural","url":"ngplural-directive"},{"id":"16174523-8cc1-c3c9-1e1b-1a4246169205","label":"ngTemplateOutlet","url":"ngtemplateoutlet-directive"},{"id":"6ae56df9-180f-2768-621e-9c9c60971cb3","label":"ngComponentOutlet","url":"ngcomponentoutlet-directive"}]},"url":"structural-directive","asGroup":true},{"id":"e2bb4164-46e2-b3ba-7b4f-e8feb5f16ef8","label":"<ng-template>","url":"ng-template","separatedFromTop":true},{"id":"9c5455e0-4809-af42-e4eb-f1b874c0b036","label":"<ng-container>","url":"ng-container"},{"id":"a14aa155-a74a-c54e-8af5-d1156e8b1515","label":"<ng-content>","sub":{"items":[]},"url":"ng-content"},{"id":"b811a104-4212-fd09-4d92-d392ecf19b8b","label":"Reference #","sub":{"items":[]},"url":"reference","asGroup":false},{"id":"785ddaf2-30e0-94c3-a150-287ab27c0b49","label":"Pipe |","url":"pipe","separatedFromTop":true},{"id":"48182894-a972-ab8a-fe60-2e3e2c2dc67c","label":"@Pipe","url":"custom-pipe"},{"id":"27f56815-6273-cdcf-2970-48459537f45e","label":"Built-in pipes","sub":{"items":[{"id":"6182051a-7cdb-2980-0f00-515406a9fc5e","label":"keyvalue","url":"keyvalue-pipe","separatedFromTop":false},{"id":"965165ad-bf70-df3f-e212-3b45142af386","label":"slice","url":"slice-pipe"},{"id":"6f0ab200-7755-55c5-458e-a2394cc08bad","label":"async","url":"async-pipe"},{"id":"46397892-a1f9-94cf-8c48-e81b22cd1752","label":"lowerCase","url":"lowercase-pipe"},{"id":"d7fbbc38-98c9-b90f-9f01-94ccd76f1057","label":"upperCase","url":"uppercase-pipe"},{"id":"9c9fa9e6-67ff-4c28-9e0c-758145d62bbd","label":"titleCase","url":"titlecase-pipe"},{"id":"97d5a192-5e3b-1108-3bbb-36eb183581fe","label":"date","url":"date-pipe"},{"id":"1b7a998d-ec80-df15-e45a-1978509ae21d","label":"number","url":"number-pipe"},{"id":"fad1daf7-96a0-21a7-d30e-c973bdfbd3a4","label":"currency","url":"currency-pipe"},{"id":"4f7571a6-e137-9aa3-d8c9-e9eea4572ef2","label":"percent","url":"percent-pipe"},{"id":"5b8fbcf7-a2d8-a597-cd7f-f7e697dc4968","label":"i18nPlural","url":"plural-pipe"},{"id":"ec9d5480-af0e-4734-3d6f-2955c85ff031","label":"json","url":"json-pipe"}]},"url":"","asGroup":false},{"id":"8be848f3-2dcf-d521-481a-b9ebf8adc8e4","label":"Operators","sub":{"items":[{"id":"30d8e85b-dffe-3f71-317b-bfce2558c02b","label":"Safe navigation ?.","url":"safe-navigation-operator"},{"id":"449e5d5a-5e6d-a1c0-4e05-5e726e1e0046","label":"Non-null assertion !.","url":"non-null-assertion-operator"}]},"asGroup":true},{"id":"41c74daa-5513-858a-d164-ea9bb9af0902","label":"Animation @","url":"animation-binding","separatedFromTop":true},{"id":"991fbf20-fe87-a902-71b8-de43dfc5f2b5","label":"svg: prefix","url":"svg-prefix"},{"id":"8c5254b3-a4e6-3058-9fd7-80cdb0bb2083","label":"ngNonBindable","url":"ngnonbindable"},{"id":"4816c151-da33-44fa-7efb-919b115043b8","label":"$any() type cast","url":"any-type-cast"}]},"pages":[{"id":"2d85ddc6-ca29-9c79-7367-f688da4df84b","entries":[{"id":"c3413bcc-f5a2-8ec3-cbbc-af86aa408f99","type":"text","text":"<p>This easy Angular reference for developers describes templates syntax and built-in directives and pipes.</p>\\n"},{"id":"585e6ca8-a67d-e946-0c07-893109e591d4","type":"text","text":"<h2 id=\\"additional-information\\">Additional information</h2>\\n<p>Example of hints and tutorials links. You can switch off these panels in the sidebar.</p>\\n"},{"id":"91db7b6c-a9d4-2a88-3415-307f938be267","type":"hint","text":"Hint with additional explanation."},{"id":"0629d5d6-6e68-55ed-4ddd-d19713f1d23d","type":"tutorials","links":[{"label":"Angular Quick Start","url":"https://angular.io/guide/quickstart","lang":"en"}]}],"title":"Introduction","url":"intro"},{"id":"606d308f-47a1-573b-4367-5d5db816dc14","entries":[{"id":"de89be41-67dc-851f-d5cd-641a488acacd","type":"text","text":"<p>HTML is the language of the Angular template. Almost all HTML syntax is valid template syntax.</p>\\n"},{"id":"68d20a21-c90f-97e0-94d3-b4dcdae68bef","type":"demo","source":"<pre><code class=\\"language-typescript\\">Just a regular &lt;strong&gt;html&lt;/strong&gt;!</code></pre>\\n","demo":"v6-templates-interpolation1-demo"},{"id":"393bfe1e-89f7-c808-02b5-c1bf777b791a","type":"tutorials","links":[{"label":"Angular Template Syntax","url":"https://angular.io/guide/template-syntax","lang":"en"}]},{"id":"e4f825b0-84d5-6c71-2c5a-7afda03b60a1","type":"text","text":"<p>You use interpolation to weave calculated strings into the text between HTML element tags and within attribute assignments.</p>\\n"},{"id":"b141f438-43ac-bf33-2ce6-44f91d819394","type":"demo","source":"<pre><code class=\\"language-html\\">{{title}}\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">img</span> <span class=\\"hljs-attr\\">src</span>=<span class=\\"hljs-string\\">&quot;{{imageUrl}}&quot;</span> <span class=\\"hljs-attr\\">style</span>=<span class=\\"hljs-string\\">&quot;height:150px&quot;</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  title = <span class=\\"hljs-string\\">&#x27;Angular&#x27;</span>;\\n  imageUrl = <span class=\\"hljs-string\\">&#x27;https://angular.io/assets/images/logos/angular/angular.svg&#x27;</span>;\\n}</code></pre>\\n","demo":"v6-templates-interpolation2-demo"},{"id":"35e0a343-d5a9-3523-bc77-2d1dcf41f299","type":"text","text":"<p>More generally, the text between the braces is a template expression that Angular first evaluates and then converts to a string. </p>\\n"},{"id":"5a7aff02-d300-fc81-513c-b130f5ffedda","type":"demo","source":"<pre><code class=\\"language-html\\">The sum of 1 + 1 is {{1 + 1}}</code></pre>\\n","demo":"v6-templates-interpolation3-demo"},{"id":"45ae2172-8163-40c6-8168-941177cdf3b2","type":"text","text":"<p>The expression can invoke methods of the host component such as <code>getVal()</code>, seen here:</p>\\n"},{"id":"a86d657f-26dd-f918-bbc6-82e5d284c29a","type":"demo","source":"<pre><code class=\\"language-html\\">The sum of 1 + 1 is not {{1 + 1 + getVal()}}</code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  getVal() {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">2</span>;\\n  }\\n}</code></pre>\\n","demo":"v6-templates-interpolation4-demo"},{"id":"33c82ba4-af51-4b4d-e514-98e4c5e21c6f","type":"text","text":"<p>You write these template expressions in a language that looks like JavaScript. Many JavaScript expressions are legal template expressions, but not all.</p>\\n<p>JavaScript expressions that have or promote side effects are prohibited, including:</p>\\n<ul>\\n<li>assignments (<code>=</code>, <code>+=</code>, <code>-=</code>, ...)</li>\\n<li><code>new</code></li>\\n<li>chaining expressions with <code>;</code> or <code>,</code></li>\\n<li>increment and decrement operators (<code>++</code> and <code>--</code>)</li>\\n</ul>\\n<p>Other notable differences from JavaScript syntax include:</p>\\n<ul>\\n<li>no support for the bitwise operators <code>|</code> and <code>&amp;</code></li>\\n<li>new template expression operators, such as <code>|</code>, <code>?.</code> and <code>!</code>.</li>\\n</ul>\\n"}],"title":"Interpolation","url":"interpolation"},{"id":"c86cb33a-c11d-6fe4-088e-6e504b905c98","entries":[{"id":"c0468b4a-3a04-d2dd-0607-0fd823e2369a","type":"text","text":"<p>You can define your own directives to attach custom behavior to elements in the DOM.</p>\\n"},{"id":"ebeb4885-15ef-4497-7f39-b3df8b169ac0","type":"text","text":"<p>In the following example we create a directive that extends a button to show an alert on click.</p>\\n"},{"id":"49b38ae7-d9e7-b5b1-64be-e1f6618d549f","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> <span class=\\"hljs-attr\\">clickAlert</span>&gt;</span>Click me<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Directive</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;button[clickAlert]&#x27;</span>,\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> ClickAlertDirective {\\n  <span class=\\"hljs-meta\\">@HostListener</span>(<span class=\\"hljs-string\\">&#x27;click&#x27;</span>) clickHandler() {\\n    alert(<span class=\\"hljs-string\\">&#x27;Clicked&#x27;</span>);\\n  }\\n}</code></pre>\\n","demo":"V6TemplatesDirective1DemoComponent"},{"id":"c7bd63f7-672d-cab7-12c8-6aba1d7bf0c0","type":"text","text":"<h3 id=\\"selector\\">Selector</h3>\\n<p>The <code>selector</code> property of <code>@Directive</code> declaration identifies this directive in a template and triggers instantiation of the directive.</p>\\n<p>Declare as one of the following:</p>\\n<ul>\\n<li><code>element-name</code>: Select by element name.</li>\\n<li><code>.class</code>: Select by class name.</li>\\n<li><code>[attribute]</code>: Select by attribute name.</li>\\n<li><code>[attribute=value]</code>: Select by attribute name and value.</li>\\n<li><code>:not(sub_selector)</code>: Select only if the element does not match the <code>sub_selector</code>.</li>\\n<li><code>selector1, selector2</code>: Select if either <code>selector1</code> or <code>selector2</code> matches.</li>\\n</ul>\\n<p>Angular only allows directives to apply on CSS selectors that do not cross\\nelement boundaries.</p>\\n"}],"title":"@Directive","url":"directive"},{"id":"b6da2c5d-82be-3621-5f7e-888ba9bf6ff8","entries":[{"id":"8a22493e-66c9-9bab-8c76-a12268384977","type":"text","text":"<p>You can extend the HTML vocabulary of your templates with components that appear as new elements and attributes.</p>\\n<p>Angular components are a subset of <a href=\\"../directive\\">directives</a>, always associated with a template. Unlike other directives, only one component can be instantiated per an element in a template.</p>\\n"},{"id":"c4c39e25-444c-9fd7-4668-297f0b550f34","type":"demo","source":"<pre><code class=\\"language-html\\">Component: <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">my-component</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">my-component</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;my-component&#x27;</span>,\\n  template: <span class=\\"hljs-string\\">`Hello there!`</span>\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyComponent {\\n}</code></pre>\\n","demo":"V6TemplatesComponent1DemoComponent"},{"id":"c9fe461b-30fd-3568-16a7-98c31a1b9151","type":"text","text":"<h3 id=\\"selector\\">Selector</h3>\\n<p>The <code>selector</code> property of <code>@Component</code> declaration identifies this component in a template and triggers instantiation of the component.</p>\\n<p>Declare as one of the following:</p>\\n<ul>\\n<li><code>element-name</code>: Select by element name.</li>\\n<li><code>.class</code>: Select by class name.</li>\\n<li><code>[attribute]</code>: Select by attribute name.</li>\\n<li><code>[attribute=value]</code>: Select by attribute name and value.</li>\\n<li><code>:not(sub_selector)</code>: Select only if the element does not match the <code>sub_selector</code>.</li>\\n<li><code>selector1, selector2</code>: Select if either <code>selector1</code> or <code>selector2</code> matches.</li>\\n</ul>\\n<p>Angular only allows component to apply on CSS selectors that do not cross\\nelement boundaries.</p>\\n"}],"title":"@Component","url":"component"},{"id":"8c032fed-d145-7cf0-44e5-8089c247c1bc","entries":[{"id":"72637089-0aaf-aec6-ecf8-c8e351a48f11","type":"text","text":"<p>Write a template property binding to set a property of a view element. The binding sets the property to the value of a template expression.</p>\\n<p>The most common property binding sets an element property to a component property value:</p>\\n"},{"id":"c328c82d-9b76-256a-93ed-44c907639b03","type":"text","text":"<pre><code class=\\"language-typescript\\">&lt;img [src]=<span class=\\"hljs-string\\">&quot;imageUrl&quot;</span> style=<span class=\\"hljs-string\\">&quot;height:150px&quot;</span>&gt;</code></pre>\\n","source":"\\n"},{"id":"10eb04a0-8be3-5b04-d95d-1cc869563ac0","type":"text","text":"<p>Another is setting a property of a directive:</p>\\n"},{"id":"f3ea2aef-f31d-8c2f-d564-c8d73dac81df","type":"text","text":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> [<span class=\\"hljs-attr\\">ngClass</span>]=<span class=\\"hljs-string\\">&quot;classes&quot;</span>&gt;</span>\\n  [ngClass] binding to the classes property\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n"},{"id":"c107fa8d-b06b-4f02-13cd-5a010000e862","type":"text","text":"<p>Or setting the model property of a custom component (a great way for parent and child components to communicate):</p>\\n"},{"id":"0d9edd6c-d024-509a-8560-bdeba6c179c4","type":"text","text":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">user-panel</span> [<span class=\\"hljs-attr\\">name</span>]=<span class=\\"hljs-string\\">&quot;userName&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">user-panel</span>&gt;</span></code></pre>\\n"},{"id":"ce81097f-5ccb-7096-db2e-a41799775714","type":"text","text":"<p>Some people prefer the <code>bind-</code> prefix alternative, known as the <em>canonical form</em>:</p>\\n"},{"id":"f85562f5-7e0e-568e-026c-943b08c6c032","type":"text","text":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">user-panel</span> <span class=\\"hljs-attr\\">bind-name</span>=<span class=\\"hljs-string\\">&quot;userName&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">user-panel</span>&gt;</span></code></pre>\\n"}],"title":"Property binding []","url":"property-binding"},{"id":"88ffed75-71ab-3093-6594-ff247705cd31","entries":[{"id":"ae8e6764-9c4d-18dd-b124-0e628174a9db","type":"text","text":"<p>An Input property is a settable property annotated with an <code>@Input</code> decorator. Values flow into the property when it is data bound with a property binding.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Input</span>() testInput: <span class=\\"hljs-built_in\\">string</span>;</code></pre>\\n"},{"id":"dcc61a86-f263-dc2c-93d7-dc7768c92d18","type":"text","text":"<p>Setting a property of a directive (the same mechanic for components):</p>\\n"},{"id":"b97309a2-a4cf-9e27-bd48-446427b9fb2e","type":"demo","source":"<h5 id=\\"appcomponenthtml\\">app.component.html</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> <span class=\\"hljs-attr\\">clickAlert</span> [<span class=\\"hljs-attr\\">message</span>]=<span class=\\"hljs-string\\">&quot;alertMessage&quot;</span>&gt;</span>Click me!<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n<h5 id=\\"appcomponentts\\">app.component.ts</h5>\\n<pre><code>export class AppComponent {\\n  alertMessage = &#x27;Hi, there.&#x27;;\\n}</code></pre>\\n<h5 id=\\"click-alertdirectivets\\">click-alert.directive.ts</h5>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Directive</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;[clickAlert]&#x27;</span>,\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> ClickAlertDirective {\\n  <span class=\\"hljs-meta\\">@Input</span> message: <span class=\\"hljs-built_in\\">string</span>;\\n\\n  <span class=\\"hljs-meta\\">@HostListener</span>(<span class=\\"hljs-string\\">&#x27;click&#x27;</span>) clickHandler() {\\n    alert(<span class=\\"hljs-built_in\\">this</span>.message);\\n  }\\n}</code></pre>\\n","demo":"V6TemplatesInputComponent"},{"id":"33ef9458-7aed-57ca-3212-6692d70f09f8","type":"text","text":"<p>Alternatively, you can identify members in the inputs array of the directive metadata:</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Directive</span>({\\n  ...\\n  inputs: [<span class=\\"hljs-string\\">&#x27;message&#x27;</span>],\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> ClickAlertDirective {\\n  message: <span class=\\"hljs-built_in\\">string</span>;\\n}</code></pre>\\n"}],"title":"@Input binding","url":"input-binding"},{"id":"dbd26e6d-061d-3536-2594-47d081a41cf1","entries":[{"id":"cd6d1fc4-afd8-0570-a638-557fb9b04cea","type":"text","text":"<p>You can set the value of an attribute directly with an attribute binding.</p>\\n<p>Interpolation and property binding can set only properties, not attributes. You can check out list of registered properties in <a href=\\"https://github.com/angular/angular/blob/master/packages/compiler/src/schema/dom_element_schema_registry.ts#L78\\">the element schema registry</a>.</p>\\n<p>You need attribute bindings to create and bind to custom attributes:</p>\\n"},{"id":"10b1338d-972d-b85b-b954-751cb8fbfc29","type":"text","text":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> [<span class=\\"hljs-attr\\">attr.aria-label</span>]=<span class=\\"hljs-string\\">&quot;actionName&quot;</span>&gt;</span>{{actionName}} with Aria<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n"}],"title":"[attr.] binding","url":"attr-binding"},{"id":"f6e90d6f-844e-95df-9e4c-8946cd25fcb0","entries":[{"id":"8b7b13ed-187c-094b-6940-7f719ac8ce48","type":"text","text":"<p>You can add and remove CSS class names from an element&#39;s <code>class</code> attribute with a class binding.</p>\\n<p>Class binding syntax resembles property binding. Instead of an element property between brackets, start with the prefix <code>class</code>, optionally followed by a dot (<code>.</code>) and the name of a CSS class: <code>[class.class-name]</code>.</p>\\n"},{"id":"c9fdd052-74c6-96aa-25af-dc18e922c6cd","type":"text","text":"<p>You can replace that with a binding to a string of the desired class names; this is an all-or-nothing, replacement binding:</p>\\n"},{"id":"2b37506b-5d11-7f2f-532f-2100f7eee82a","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">&quot;bold italic red&quot;</span>\\n     [<span class=\\"hljs-attr\\">class</span>]=<span class=\\"hljs-string\\">&quot;textClass&quot;</span>&gt;</span>\\n  Demo text\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  textClass = <span class=\\"hljs-string\\">&#x27;bold italic&#x27;</span>;\\n}</code></pre>\\n<pre><code class=\\"language-css\\"><span class=\\"hljs-selector-class\\">.bold</span> {\\n  <span class=\\"hljs-attribute\\">font-weight</span>: <span class=\\"hljs-number\\">600</span>;\\n}\\n\\n<span class=\\"hljs-selector-class\\">.italic</span> {\\n  <span class=\\"hljs-attribute\\">font-style</span>: italic;\\n}</code></pre>\\n","demo":"V6TemplatesClass1DemoComponent"},{"id":"4e681ae5-5bbd-67d7-9194-4fa78845991b","type":"text","text":"<p>Finally, you can bind to a specific class name. Angular adds the class when the template expression evaluates to truthy. It removes the class when the expression is falsy.</p>\\n"},{"id":"65fe73cc-f45d-c00a-9b00-c564876cc5f2","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> [<span class=\\"hljs-attr\\">class.special</span>]=<span class=\\"hljs-string\\">&quot;isSpecial&quot;</span>&gt;</span>\\n  The class binding is special\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">&quot;special&quot;</span>\\n     [<span class=\\"hljs-attr\\">class.special</span>]=<span class=\\"hljs-string\\">&quot;!isSpecial&quot;</span>&gt;</span>\\n  This one is not so special\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  isSpecial = <span class=\\"hljs-literal\\">true</span>;\\n}</code></pre>\\n<pre><code class=\\"language-css\\"><span class=\\"hljs-selector-class\\">.special</span> {\\n  <span class=\\"hljs-attribute\\">background</span>: <span class=\\"hljs-number\\">#36cadb</span>;\\n  <span class=\\"hljs-attribute\\">color</span>: <span class=\\"hljs-number\\">#ffffff</span>;\\n}</code></pre>\\n","demo":"V6TemplatesClass2DemoComponent"},{"id":"cc8a6805-6906-d632-be15-0acdd505c62a","type":"text","text":"<p>While this is a fine way to toggle a single class name, the <a href=\\"../ngclass-directive\\">NgClass directive</a> is usually preferred when managing multiple class names at the same time.</p>\\n"}],"title":"[class.] binding","url":"class-binding"},{"id":"bbf7a902-b4db-e936-2ad1-5fc36a66c99f","entries":[{"id":"c5da6b5c-2fd2-2bfe-8ba2-8d79f907fcaa","type":"text","text":"<p>Adds and removes CSS classes on an HTML element.</p>\\n<p>The CSS classes are updated depending on the type of the expression evaluation.</p>\\n"},{"id":"bd33fa88-273e-cdb8-5229-e1417d990bbe","type":"text","text":"<h3 id=\\"string\\">String</h3>\\n<p>The CSS classes listed in the string (space delimited) are added.</p>\\n"},{"id":"927c9289-ef66-47b7-193d-f863260dc67e","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> [<span class=\\"hljs-attr\\">ngClass</span>]=<span class=\\"hljs-string\\">&quot;&#x27;bold italic&#x27;&quot;</span>&gt;</span>\\n  Text in this div is bold and italic.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-css\\"><span class=\\"hljs-selector-class\\">.bold</span> {\\n  <span class=\\"hljs-attribute\\">font-weight</span>: <span class=\\"hljs-number\\">600</span>;\\n}\\n\\n<span class=\\"hljs-selector-class\\">.italic</span> {\\n  <span class=\\"hljs-attribute\\">font-style</span>: italic;\\n}</code></pre>\\n","demo":"V6TemplatesNgclass1DemoComponent"},{"id":"5ae8d7a5-58dd-d54c-c0c6-954a7b68d047","type":"text","text":"<h3 id=\\"array\\">Array</h3>\\n<p>The CSS classes declared as Array elements are added.</p>\\n"},{"id":"a02b0b78-75bc-22d3-d446-bad85f97217e","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> [<span class=\\"hljs-attr\\">ngClass</span>]=<span class=\\"hljs-string\\">&quot;[&#x27;bold&#x27;, &#x27;italic&#x27;]&quot;</span>&gt;</span>\\n  Text in this div is bold and italic.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-css\\"><span class=\\"hljs-selector-class\\">.bold</span> {\\n  <span class=\\"hljs-attribute\\">font-weight</span>: <span class=\\"hljs-number\\">600</span>;\\n}\\n\\n<span class=\\"hljs-selector-class\\">.italic</span> {\\n  <span class=\\"hljs-attribute\\">font-style</span>: italic;\\n}</code></pre>\\n","demo":"V6TemplatesNgclass2DemoComponent"},{"id":"f5c91c71-0219-c214-536b-215b199e7355","type":"text","text":"<h3 id=\\"object\\">Object</h3>\\n<p>Keys are CSS classes that get added when the expression given in the value evaluates to a truthy value, otherwise they are removed.</p>\\n"},{"id":"1d7326e5-b193-b212-8405-cfd2eeb65e21","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> [<span class=\\"hljs-attr\\">ngClass</span>]=<span class=\\"hljs-string\\">&quot;{bold: true, italic: false}&quot;</span>&gt;</span>\\n  Text in this div is bold and not italic.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-css\\"><span class=\\"hljs-selector-class\\">.bold</span> {\\n  <span class=\\"hljs-attribute\\">font-weight</span>: <span class=\\"hljs-number\\">600</span>;\\n}\\n\\n<span class=\\"hljs-selector-class\\">.italic</span> {\\n  <span class=\\"hljs-attribute\\">font-style</span>: italic;\\n}</code></pre>\\n","demo":"V6TemplatesNgclass3DemoComponent"}],"title":"[ngClass] directive","url":"ngclass-directive"},{"id":"2bc85b8e-85b2-77e3-e81c-1af1909627a2","entries":[{"id":"6fe27529-8d39-1963-047a-229934cc5a0b","type":"text","text":"<p>You can set inline styles with a style binding.</p>\\n"},{"id":"9c09bfb7-8758-647d-9fbe-4775885251aa","type":"text","text":"<p>Style binding syntax resembles property binding. Instead of an element property between brackets, start with the prefix <code>style</code>, followed by a dot (<code>.</code>) and the name of a CSS style property: <code>[style.style-property]</code>.</p>\\n"},{"id":"d3ffb630-9814-72eb-c058-aab0b705ec5a","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> [<span class=\\"hljs-attr\\">style.color</span>]=<span class=\\"hljs-string\\">&quot;isSpecial ? &#x27;red&#x27;: &#x27;green&#x27;&quot;</span>&gt;</span>Red<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> [<span class=\\"hljs-attr\\">style.background-color</span>]=<span class=\\"hljs-string\\">&quot;canSave ? &#x27;cyan&#x27;: &#x27;grey&#x27;&quot;</span> &gt;</span>Save<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  isSpecial = <span class=\\"hljs-literal\\">true</span>;\\n  canSave = <span class=\\"hljs-literal\\">false</span>;\\n}</code></pre>\\n","demo":"V6TemplateStyle1DemoComponent"},{"id":"1a3d21bc-c96d-9114-483a-69d07ba6c285","type":"text","text":"<p>Some style binding styles have a unit extension. The following example conditionally sets the font size in \u201cem\u201d and \u201c%\u201d units .</p>\\n"},{"id":"96c58bc4-079c-d168-31c3-b188cc531d9d","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> [<span class=\\"hljs-attr\\">style.font-size.em</span>]=<span class=\\"hljs-string\\">&quot;isSpecial ? 3 : 1&quot;</span> &gt;</span>Big<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> [<span class=\\"hljs-attr\\">style.font-size.</span>%]=<span class=\\"hljs-string\\">&quot;!isSpecial ? 150 : 50&quot;</span> &gt;</span>Small<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  isSpecial = <span class=\\"hljs-literal\\">true</span>;\\n}</code></pre>\\n","demo":"V6TemplateStyle2DemoComponent"},{"id":"a97c5436-2308-b9cc-942e-698bace4d3f1","type":"text","text":"<p>Note that a style property name can be written in either dash-case, as shown above, or camelCase, such as <code>fontSize</code>.</p>\\n<p>While this is a fine way to set a single style, the <a href=\\"../ngstyle-directive\\">NgStyle directive</a> is generally preferred when setting several inline styles at the same time.</p>\\n"}],"title":"[style.] binding","url":"style-binding"},{"id":"d737c0cd-33aa-b88b-ff66-acae52f35d34","entries":[{"id":"e167a2d8-0ea5-e7d5-b650-e18d2a88fa02","type":"text","text":"<p>Update an HTML element styles.</p>\\n<p>The styles are updated according to the value of the expression evaluation:</p>\\n<ul>\\n<li>keys are style names with an optional <code>.&lt;unit&gt;</code> suffix (ie &#39;top.px&#39;, &#39;font-style.em&#39;),</li>\\n<li>values are the values assigned to those properties (expressed in the given unit).</li>\\n</ul>\\n"},{"id":"3292e202-deb8-61d2-2f4a-fa663e693b52","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> [<span class=\\"hljs-attr\\">ngStyle</span>]=<span class=\\"hljs-string\\">&quot;{&#x27;font-size.px&#x27;: 20, color: &#x27;white&#x27;, background: &#x27;red&#x27;}&quot;</span>&gt;</span>\\n  Text in this div is 20px size, white color on red background.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesNgstyleDemoComponent"}],"title":"[ngStyle] directive","url":"ngstyle-directive"},{"id":"c4ad497f-9e9a-d20d-9d20-4cc247d0ff90","entries":[{"id":"cfebae6d-c2c5-6b8e-112b-e014b5fe6c68","type":"text","text":"<p>Event binding syntax consists of a target event name within parentheses on the left of an equal sign, and a quoted template statement on the right. The following event binding listens for the button&#39;s click events, calling the component&#39;s <code>onSave()</code> method whenever a click occurs:</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> (<span class=\\"hljs-attr\\">click</span>)=<span class=\\"hljs-string\\">&quot;onSave()&quot;</span>&gt;</span>Save<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n"},{"id":"6172e897-0ece-ef5e-351a-2c28c769fffd","type":"text","text":"<p>You can also bind an unlimited number of event handlers on the same event by separating them with a semi-colon:</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> (<span class=\\"hljs-attr\\">click</span>)=<span class=\\"hljs-string\\">&quot;onSave1(); onSave2(); \u2026&quot;</span>&gt;</span>Save<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n"},{"id":"ada9b887-70f6-fba3-5698-0c9a8c931169","type":"text","text":"<p>In an event binding, Angular sets up an event handler for the target event.</p>\\n<p>When the event is raised, the handler executes the template statement. The template statement typically involves a receiver, which performs an action in response to the event, such as storing a value from the HTML control into a model.</p>\\n<p>The binding conveys information about the event, including data values, through an event object named <code>$event</code>.</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> [<span class=\\"hljs-attr\\">value</span>]=<span class=\\"hljs-string\\">&quot;currentHero.name&quot;</span>\\n       (<span class=\\"hljs-attr\\">input</span>)=<span class=\\"hljs-string\\">&quot;currentHero.name=$event.target.value&quot;</span>&gt;</span></code></pre>\\n"},{"id":"820fafea-82a9-44f5-2ba9-be36c6fa7f37","type":"text","text":"<p>Some people prefer the <code>on-</code> prefix alternative, known as the canonical form:</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> <span class=\\"hljs-attr\\">on-click</span>=<span class=\\"hljs-string\\">&quot;onSave()&quot;</span>&gt;</span>On Save<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n"}],"title":"Event binding ()","url":"event-binding"},{"id":"fe9bc1c6-62bd-3a7f-b09a-f6cdb0ad9abd","entries":[{"id":"c7355e36-1b0a-8b36-71e0-56d6b54a3367","type":"text","text":"<p>An Output property is an observable property annotated with an <code>@Output</code> decorator. The property almost always returns an Angular <code>EventEmitter</code>. Values flow out of the component as events bound with an event binding.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Output</span>() testEvent = <span class=\\"hljs-keyword\\">new</span> EventEmitter&lt;<span class=\\"hljs-built_in\\">any</span>&gt;();</code></pre>\\n"},{"id":"3f671af9-b6fe-6968-6644-22a3d52280df","type":"demo","source":"<h5 id=\\"test-outputcomponenthtml\\">test-output.component.html</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> (<span class=\\"hljs-attr\\">click</span>)=<span class=\\"hljs-string\\">&quot;emitTest()&quot;</span>&gt;</span>Click me!<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n<h5 id=\\"test-outputcomponentts\\">test-output.component.ts</h5>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;test-output&#x27;</span>,\\n  ...\\n})\\n<span class=\\"hljs-keyword\\">export</span> component TestOutputComponent {\\n  <span class=\\"hljs-meta\\">@Output</span>() test = <span class=\\"hljs-keyword\\">new</span> EventEmitter();\\n\\n  emitTest() {\\n    <span class=\\"hljs-built_in\\">this</span>.test.emit(<span class=\\"hljs-string\\">&#x27;test&#x27;</span>);\\n  }\\n}</code></pre>\\n<h5 id=\\"appcomponenthtml\\">app.component.html</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">test-output</span> (<span class=\\"hljs-attr\\">test</span>)=<span class=\\"hljs-string\\">&quot;handleTest($event)&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">test-output</span>&gt;</span></code></pre>\\n<h5 id=\\"appcomponentts\\">app.component.ts</h5>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  handleTest(value) {\\n    alert(<span class=\\"hljs-string\\">`Test event handled with value: <span class=\\"hljs-subst\\">${value}</span>`</span>);\\n  }\\n}</code></pre>\\n","demo":"V6TemplatesOutputDemoComponent"},{"id":"235b3527-cc33-9630-8219-b8b1a8ba4138","type":"text","text":"<p>Alternatively, you can identify members in the outputs array of the directive metadata, as in this example:</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({\\n  ...\\n  outputs: [<span class=\\"hljs-string\\">&#x27;test&#x27;</span>],\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> TestOutputComponent {\\n  test = <span class=\\"hljs-keyword\\">new</span> EventEmitter();\\n}</code></pre>\\n"}],"title":"@Output binding","url":"output-binding"},{"id":"44f43536-cab7-8f6d-9b6f-407722a19d5f","entries":[{"id":"a28d013a-8192-f2b0-672a-44686da91dd9","type":"text","text":"<p>You can filter keyboard events in a template by <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\\">event key</a>.</p>\\n<p>Angular allows you to directly bind to a specific keystroke or keystroke combination. That means a keyboard event will be only fired on that specific key or key combination instead of on all key events.</p>\\n"},{"id":"1fd97e17-577a-bbd0-4701-1359c611e4b6","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> (<span class=\\"hljs-attr\\">keyup.enter</span>)=<span class=\\"hljs-string\\">&quot;enterHandler()&quot;</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> (<span class=\\"hljs-attr\\">keydown.esc</span>)=<span class=\\"hljs-string\\">&quot;escHandler()&quot;</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> (<span class=\\"hljs-attr\\">keyup.shift.f</span>)=<span class=\\"hljs-string\\">&quot;shiftFHandler()&quot;</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  enterHandler() {\\n    alert(<span class=\\"hljs-string\\">&#x27;Enter pressed!&#x27;</span>);\\n  }\\n\\n  escHandler() {\\n    alert(<span class=\\"hljs-string\\">&#x27;ESC pressed!&#x27;</span>);\\n  }\\n\\n  shiftFHandler() {\\n    alert(<span class=\\"hljs-string\\">&#x27;Shift+F pressed!&#x27;</span>);\\n  }\\n}</code></pre>\\n","demo":"V6TemplatesPseudoEventsDemoComponent"},{"id":"55ceca5d-961e-f2c5-0b72-c6036c53fcc0","type":"tutorials","links":[{"label":"Angular Pseudo-Events","url":"https://medium.com/claritydesignsystem/angular-pseudo-events-d4e7f89247ee","lang":"en"}]}],"title":"Pseudo-events","url":"pseudo-events"},{"id":"abe0dcb1-366d-a2f9-7845-0ef7054c6fac","entries":[{"id":"07fcaca9-5425-5ec3-32f5-6848b73a303d","type":"text","text":"<p>Angular supports <a href=\\"https://hammerjs.github.io/\\">Hammer.JS</a> gestures. </p>\\n<p>You only need to install Hammer.JS:</p>\\n<pre><code>npm install hammerjs</code></pre>\\n<p>And then import to <code>main.ts</code> file:</p>\\n<pre><code>import &#x27;hammerjs&#x27;;</code></pre>\\n<p>After that you will be able to bind gesture events.</p>\\n"},{"id":"770e2f21-82b2-92f7-9cb0-f0a60e9816d3","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> (<span class=\\"hljs-attr\\">swipe</span>)=<span class=\\"hljs-string\\">&quot;swipeHandler()&quot;</span>&gt;</span>\\n  Swipe me!\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  swipeHandler() {\\n    alert(<span class=\\"hljs-string\\">&#x27;Swipe handled!&#x27;</span>);\\n  }\\n}</code></pre>\\n","demo":"V6TemplatesTouchEventsDemoComponent"},{"id":"64de618c-c707-b205-e741-2941af2696cb","type":"tutorials","links":[{"label":"Gestures in an Angular Application","url":"https://blog.angularindepth.com/gestures-in-an-angular-application-dde71804c0d0","lang":"en"}]}],"title":"Touch events","url":"touch-events"},{"id":"c9cebaac-5148-37a9-0012-3cd4e7a11dc3","entries":[{"id":"d3527a28-c94a-5e05-9d10-a07b59006ec7","type":"text","text":"<p>The <code>[(x)]</code> syntax is easy to demonstrate when the element has a settable property called <code>x</code> and a corresponding event named <code>xChange</code>.</p>\\n"},{"id":"03ec2dad-ffad-689e-c0dc-dad1965f5c47","type":"demo","source":"<h5 id=\\"sizercomponenthtml\\">sizer.component.html</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> (<span class=\\"hljs-attr\\">click</span>)=<span class=\\"hljs-string\\">&quot;dec()&quot;</span> <span class=\\"hljs-attr\\">title</span>=<span class=\\"hljs-string\\">&quot;smaller&quot;</span>&gt;</span>-<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> (<span class=\\"hljs-attr\\">click</span>)=<span class=\\"hljs-string\\">&quot;inc()&quot;</span> <span class=\\"hljs-attr\\">title</span>=<span class=\\"hljs-string\\">&quot;bigger&quot;</span>&gt;</span>+<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n<h5 id=\\"sizercomponentts\\">sizer.component.ts</h5>\\n<pre><code>export class SizerComponent {\\n  @Input() size: number;\\n\\n  @Output() sizeChange = new EventEmitter&lt;number&gt;();\\n\\n  dec() { \\n    this.resize(-1); \\n  }\\n\\n  inc() { \\n    this.resize(+1); \\n  }\\n\\n  resize(delta: number) {\\n    this.size = this.size + delta;\\n    this.sizeChange.emit(this.size);\\n  }\\n}</code></pre>\\n<h5 id=\\"appcomponenthtml\\">app.component.html</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">sizer</span> [(<span class=\\"hljs-attr\\">size</span>)]=<span class=\\"hljs-string\\">&quot;size&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">sizer</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">label</span> [<span class=\\"hljs-attr\\">style.font-size.px</span>]=<span class=\\"hljs-string\\">&quot;size&quot;</span>&gt;</span>FontSize: {{size}}px<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">label</span>&gt;</span></code></pre>\\n<h5 id=\\"appcomponentts\\">app.component.ts</h5>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  size = <span class=\\"hljs-number\\">13</span>;\\n}</code></pre>\\n","demo":"V6TemplatesTwoWayDemoComponent"},{"id":"7aba8671-d32c-5f7f-f724-6051566220e8","type":"text","text":"<p>It would be convenient to use two-way binding with HTML form elements like <code>&lt;input&gt;</code> and <code>&lt;select&gt;</code>. However, no native HTML element follows the <code>x</code> value and <code>xChange</code> event pattern.</p>\\n<p>Fortunately, the Angular <a href=\\"../ngmodel-directive\\">NgModel directive</a> is a bridge that enables two-way binding to form elements.</p>\\n"}],"title":"Two-way binding [()]","url":"two-way-binding"},{"id":"7d763ecd-7d99-f82f-325e-7d9298387817","entries":[{"id":"ce389c30-ea80-f8c0-46b6-17853676218a","type":"text","text":"<p>Two-way data binding with the <code>NgModel</code> directive makes easy to display a data property and update that property when the user makes changes.</p>\\n"},{"id":"42f15ddd-249e-d690-220a-2f5cf2b49fe6","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> [(<span class=\\"hljs-attr\\">ngModel</span>)]=<span class=\\"hljs-string\\">&quot;name&quot;</span>&gt;</span>\\n{{ name }}</code></pre>\\n","demo":"V6TemplatesNgmodel1DemoComponent"},{"id":"30583de1-4559-d2df-a0c0-a243b1a7f47d","type":"text","text":"<p>Before using the <code>ngModel</code> directive in a two-way data binding, you must import the <code>FormsModule</code> and add it to the <code>NgModule</code> imports list.</p>\\n"},{"id":"b28428b2-3717-2080-8efd-77639dc2245c","type":"text","text":"<p>The <code>[(ngModel)]</code> syntax can only set a data-bound property. If you need to do something more or something different, you can write the expanded form.</p>\\n<p>The following contrived demo forces the input value to uppercase.</p>\\n"},{"id":"a70df14e-6706-d8e0-3826-890cdf6aa987","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> [<span class=\\"hljs-attr\\">ngModel</span>]=<span class=\\"hljs-string\\">&quot;name&quot;</span>\\n       (<span class=\\"hljs-attr\\">ngModelChange</span>)=<span class=\\"hljs-string\\">&quot;setUppercaseName($event)&quot;</span>&gt;</span>\\n{{ name }}</code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  name: <span class=\\"hljs-built_in\\">string</span>;\\n\\n  setUppercaseName(name: <span class=\\"hljs-built_in\\">string</span>) {\\n    <span class=\\"hljs-built_in\\">this</span>.name = name.toUpperCase();\\n  }\\n}</code></pre>\\n","demo":"V6TemplatesNgmodel2DemoComponent"}],"title":"[(ngModel)] directive","url":"ngmodel-directive"},{"id":"7f7601c0-7b1e-edad-fe25-ca6e25dfc4ab","entries":[{"id":"50ef109c-5229-4a15-c906-1258ef62c8e1","type":"text","text":"<p>Structural directives are responsible for HTML layout. They shape or reshape the DOM&#39;s structure, typically by adding, removing, and manipulating the host elements to which they are attached.</p>\\n<p>Structural directives are easy to recognize. An asterisk (*) precedes the directive attribute name as in this example.</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngIf</span>=<span class=\\"hljs-string\\">&quot;hero&quot;</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">&quot;name&quot;</span>&gt;</span>{{hero.name}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n"},{"id":"18b89590-27a0-b143-5223-fe18efc61be5","type":"text","text":"<h3 id=\\"the-asterisk--prefix\\">The asterisk (*) prefix</h3>\\n<p>Surely you noticed the asterisk (*) prefix to the directive name and wondered why it is necessary and what it does.</p>\\n<p>Here is <code>*ngIf</code> displaying the hero&#39;s name if hero exists.</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngIf</span>=<span class=\\"hljs-string\\">&quot;hero&quot;</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">&quot;name&quot;</span>&gt;</span>{{hero.name}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<p>The asterisk is &quot;syntactic sugar&quot; for something a bit more complicated. Internally, Angular translates the <code>*ngIf</code> attribute into a <code>&lt;ng-template&gt;</code> element, wrapped around the host element, like this.</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> [<span class=\\"hljs-attr\\">ngIf</span>]=<span class=\\"hljs-string\\">&quot;hero&quot;</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">&quot;name&quot;</span>&gt;</span>{{hero.name}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span></code></pre>\\n<p>Here&#39;s a full-featured application of NgFor, written both ways:</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngFor</span>=<span class=\\"hljs-string\\">&quot;let hero of heroes; let i=index; let odd=odd; trackBy: trackById&quot;</span> [<span class=\\"hljs-attr\\">class.odd</span>]=<span class=\\"hljs-string\\">&quot;odd&quot;</span>&gt;</span>\\n  ({{i}}) {{hero.name}}\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> <span class=\\"hljs-attr\\">ngFor</span> <span class=\\"hljs-attr\\">let-hero</span> [<span class=\\"hljs-attr\\">ngForOf</span>]=<span class=\\"hljs-string\\">&quot;heroes&quot;</span> <span class=\\"hljs-attr\\">let-i</span>=<span class=\\"hljs-string\\">&quot;index&quot;</span> <span class=\\"hljs-attr\\">let-odd</span>=<span class=\\"hljs-string\\">&quot;odd&quot;</span> [<span class=\\"hljs-attr\\">ngForTrackBy</span>]=<span class=\\"hljs-string\\">&quot;trackById&quot;</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> [<span class=\\"hljs-attr\\">class.odd</span>]=<span class=\\"hljs-string\\">&quot;odd&quot;</span>&gt;</span>({{i}}) {{hero.name}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span></code></pre>\\n"},{"id":"666652b0-a342-4bc8-ed32-af1ed660874d","type":"tutorials","links":[{"label":"Angular \u2014 Structural Directives","url":"https://angular.io/guide/structural-directives","lang":"en"}]}],"title":"Structural directive *","url":"structural-directive"},{"id":"3175bbda-477b-5f6d-1328-1064b3ab5ce7","entries":[{"id":"bf80f1fd-cb44-d4a4-cfd2-756eac99d6c9","type":"text","text":"<p>You can add or remove an element from the DOM by applying an NgIf directive to that element (called the host element). Bind the directive to a condition expression like <code>isActive</code> in this demo.</p>\\n"},{"id":"f9e2b82d-e78c-b61d-84b6-f1bc3f2d5c45","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngIf</span>=<span class=\\"hljs-string\\">&quot;isActive&quot;</span>&gt;</span>\\n  This text is displayed when active.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngIf</span>=<span class=\\"hljs-string\\">&quot;!isActive&quot;</span>&gt;</span>\\n  This text is displayed when not active.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">label</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> <span class=\\"hljs-attr\\">type</span>=<span class=\\"hljs-string\\">&quot;checkbox&quot;</span> [(<span class=\\"hljs-attr\\">ngModel</span>)]=<span class=\\"hljs-string\\">&quot;isActive&quot;</span>&gt;</span>\\n  Is active\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">label</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  isActive = <span class=\\"hljs-literal\\">true</span>;\\n}</code></pre>\\n","demo":"V6TemplatesNgif1DemoComponent"},{"id":"aae0a71c-2070-ecab-9f7f-efb7af64bbdf","type":"text","text":"<p>The <code>ngIf</code> directive doesn&#39;t hide elements with CSS. It adds and removes them physically from the DOM.</p>\\n<p>When the <code>isActive</code> expression returns a truthy value, <code>NgIf</code> adds the <code>div</code> to the DOM. When the expression is falsy, <code>NgIf</code> removes the <code>div</code> from the DOM, destroying that element.</p>\\n"},{"id":"1f41247b-5d42-b0ab-6ec3-e38a40e1e3d1","type":"text","text":"<h3 id=\\"ngif-with-else\\">*ngIf with else</h3>\\n"},{"id":"de91a481-4a04-c0f7-025b-58ea34369d34","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngIf</span>=<span class=\\"hljs-string\\">&quot;isActive; else elseBlock&quot;</span>&gt;</span>\\n  This text is displayed when active.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> #<span class=\\"hljs-attr\\">elseBlock</span>&gt;</span>\\n  This text is displayed when not active.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">label</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> <span class=\\"hljs-attr\\">type</span>=<span class=\\"hljs-string\\">&quot;checkbox&quot;</span> [(<span class=\\"hljs-attr\\">ngModel</span>)]=<span class=\\"hljs-string\\">&quot;isActive&quot;</span>&gt;</span>\\n  Is active\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">label</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  isActive = <span class=\\"hljs-literal\\">true</span>;\\n}</code></pre>\\n","demo":"V6TemplatesNgif2DemoComponent"},{"id":"c480b6cd-5419-194d-b513-9f9368ed49bf","type":"text","text":"<h3 id=\\"ngif-with-thenelse\\">*ngIf with then/else</h3>\\n"},{"id":"d546eb01-1ab6-3172-861e-a1a7e22f0633","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngIf</span>=<span class=\\"hljs-string\\">&quot;isActive; then thenBlock else elseBlock&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> #<span class=\\"hljs-attr\\">thenBlock</span>&gt;</span>\\n  This text is displayed when active.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> #<span class=\\"hljs-attr\\">elseBlock</span>&gt;</span>\\n  This text is displayed when not active.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">label</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> <span class=\\"hljs-attr\\">type</span>=<span class=\\"hljs-string\\">&quot;checkbox&quot;</span> [(<span class=\\"hljs-attr\\">ngModel</span>)]=<span class=\\"hljs-string\\">&quot;isActive&quot;</span>&gt;</span>\\n  Is active\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">label</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  isActive = <span class=\\"hljs-literal\\">true</span>;\\n}</code></pre>\\n","demo":"V6TemplatesNgif3DemoComponent"},{"id":"cc4c7bba-b66b-a550-8af1-7609f771e6d8","type":"text","text":"<h3 id=\\"ngif-with-as\\">*ngIf with as</h3>\\n<p>Store the value locally. Handy when you check value or get it from <code>async</code> pipe.</p>\\n"},{"id":"93b0eb08-c42c-6d20-9990-3905269fb799","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngIf</span>=<span class=\\"hljs-string\\">&quot;data?.user as user&quot;</span>&gt;</span>\\n  User name: {{ user.name }}\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  data = {\\n    user: {\\n      name: <span class=\\"hljs-string\\">&#x27;Superman&#x27;</span>,\\n    },\\n  };\\n}</code></pre>\\n","demo":"V6TemplatesNgif4DemoComponent"}],"title":"ngIf directive","url":"ngif-directive"},{"id":"ec381611-0cb3-214c-d941-f094f3e22d2a","entries":[{"id":"81083af0-2660-24d0-b12b-2b540ee75514","type":"text","text":"<p>NgForOf is a repeater directive \u2014 a way to present a list of items. You define a block of HTML that defines how a single item should be displayed. You tell Angular to use that block as a template for rendering each item in the list.</p>\\n"},{"id":"dc33c809-f6a6-86fd-be1b-f82db2aca207","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngFor</span>=<span class=\\"hljs-string\\">&quot;let item of items&quot;</span>&gt;</span>\\n  {{ item }}\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  items = [<span class=\\"hljs-string\\">&#x27;One&#x27;</span>, <span class=\\"hljs-string\\">&#x27;Two&#x27;</span>, <span class=\\"hljs-string\\">&#x27;Three&#x27;</span>];\\n}</code></pre>\\n","demo":"V6TemplatesNgfor1DemoComponent"},{"id":"25e36fe9-13bc-7704-7bbb-63d8b3c05a13","type":"text","text":"<p>You can also apply an <code>NgForOf</code> to a component element, as in this demo:</p>\\n"},{"id":"f3b80538-2b28-02fa-db7f-1bcbebc7cc56","type":"demo","source":"<h5 id=\\"appcomponentts\\">app.component.ts</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">my-component</span> *<span class=\\"hljs-attr\\">ngFor</span>=<span class=\\"hljs-string\\">&quot;let item of items&quot;</span> \\n              [<span class=\\"hljs-attr\\">item</span>]=<span class=\\"hljs-string\\">&quot;item&quot;</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">my-component</span>&gt;</span></code></pre>\\n<h5 id=\\"appcomponentts-1\\">app.component.ts</h5>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  items = [<span class=\\"hljs-string\\">&#x27;One&#x27;</span>, <span class=\\"hljs-string\\">&#x27;Two&#x27;</span>, <span class=\\"hljs-string\\">&#x27;Three&#x27;</span>];\\n}</code></pre>\\n<h5 id=\\"mycomponenthtml\\">my.component.html</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>{{ item }}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span> </code></pre>\\n<h5 id=\\"mycomponentts\\">my.component.ts</h5>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  <span class=\\"hljs-meta\\">@Input</span>() item: <span class=\\"hljs-built_in\\">string</span>;\\n}</code></pre>\\n","demo":"V6TemplatesNgfor1DemoComponent"},{"id":"e8ad75a0-91ed-9843-b58f-274425e586e8","type":"text","text":"<h3 id=\\"local-variables\\">Local Variables</h3>\\n<p><code>NgForOf</code> provides several exported values that can be aliased to local variables:</p>\\n<ul>\\n<li><code>$implicit: T</code>: The value of the individual items in the iterable (<code>ngForOf</code>).</li>\\n<li><code>ngForOf: NgIterable&lt;T&gt;</code>: The value of the iterable expression. Useful when the expression is more complex then a property access, for example when using the async pipe (<code>userStreams | async</code>).</li>\\n<li><code>index: number</code>: The index of the current item in the iterable.</li>\\n<li><code>first: boolean</code>: True when the item is the first item in the iterable.</li>\\n<li><code>last: boolean</code>: True when the item is the last item in the iterable.</li>\\n<li><code>even: boolean</code>: True when the item has an even index in the iterable.</li>\\n<li><code>odd: boolean</code>: True when the item has an odd index in the iterable.</li>\\n</ul>\\n"},{"id":"9f90d108-f969-18fe-4553-f132f082d795","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">li</span> *<span class=\\"hljs-attr\\">ngFor</span>=<span class=\\"hljs-string\\">&quot;let item of itemsObservable | async as items; index as i; first as isFirst&quot;</span>&gt;</span>\\n  {{i}}/{{items.length}}. {{ item }} <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">span</span> *<span class=\\"hljs-attr\\">ngIf</span>=<span class=\\"hljs-string\\">&quot;isFirst&quot;</span>&gt;</span>default<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">span</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">li</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  itemsObservable = <span class=\\"hljs-keyword\\">from</span>([[<span class=\\"hljs-string\\">&#x27;One&#x27;</span>, <span class=\\"hljs-string\\">&#x27;Two&#x27;</span>, <span class=\\"hljs-string\\">&#x27;Three&#x27;</span>]]);\\n}</code></pre>\\n","demo":"V6TemplatesNgfor2DemoComponent"},{"id":"d5178e2a-bb9d-7999-f276-eb1648ad0434","type":"text","text":"<h3 id=\\"ngfor-with-trackby\\">*ngFor with trackBy</h3>\\n<p>The <code>NgForOf</code> directive may perform poorly, especially with large lists. A small change to one item, an item removed, or an item added can trigger a cascade of DOM manipulations.</p>\\n<p>Angular can avoid this churn with <code>trackBy</code>. Add a method to the component that returns the value <code>NgForOf</code> should track.</p>\\n"},{"id":"d7be2194-141d-46cf-dde2-bac289091c3a","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngFor</span>=<span class=\\"hljs-string\\">&quot;let item of items; trackBy: trackById&quot;</span>&gt;</span>\\n  ({{item.id}}) {{item.title}}\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  items = [\\n    {id: <span class=\\"hljs-number\\">1</span>, title: <span class=\\"hljs-string\\">&#x27;One&#x27;</span>},\\n    {id: <span class=\\"hljs-number\\">2</span>, title: <span class=\\"hljs-string\\">&#x27;Two&#x27;</span>},\\n    {id: <span class=\\"hljs-number\\">3</span>, title: <span class=\\"hljs-string\\">&#x27;Three&#x27;</span>},\\n  ];\\n\\n  trackById(index: <span class=\\"hljs-built_in\\">number</span>, item: <span class=\\"hljs-built_in\\">any</span>): <span class=\\"hljs-built_in\\">number</span> {\\n    <span class=\\"hljs-keyword\\">return</span> item.id;\\n  }\\n}</code></pre>\\n","demo":"V6TemplatesNgfor3DemoComponent"},{"id":"93f91bda-8b3d-bb48-8444-9e3b095e699a","type":"tutorials","links":[{"label":"Angular 2\u200a\u2014\u200aImprove performance with trackBy","url":"https://netbasal.com/angular-2-improve-performance-with-trackby-cc147b5104e5","lang":"en"}]}],"title":"ngFor directive","url":"ngfor-directive"},{"id":"3b6bc9ec-9fb5-6540-ca85-cedd1e56ad59","entries":[{"id":"5403fa00-7041-3224-3d0c-f37d49601d7b","type":"text","text":"<p><code>NgSwitch</code> is like the JavaScript <code>switch</code> statement. It can display one element from among several possible elements, based on a <code>switch</code> condition. Angular puts only the selected element into the DOM.</p>\\n<p><code>NgSwitch</code> is actually a set of three, cooperating directives: <code>NgSwitch</code>, <code>NgSwitchCase</code>, and <code>NgSwitchDefault</code> as seen in this demo.</p>\\n"},{"id":"40258f74-1f54-0fb2-ab80-f24f167bc5fb","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">select</span> [(<span class=\\"hljs-attr\\">ngModel</span>)]=<span class=\\"hljs-string\\">&quot;type&quot;</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">option</span> [<span class=\\"hljs-attr\\">value</span>]=<span class=\\"hljs-string\\">&quot;1&quot;</span>&gt;</span>First<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">option</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">option</span> [<span class=\\"hljs-attr\\">value</span>]=<span class=\\"hljs-string\\">&quot;2&quot;</span>&gt;</span>Second<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">option</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">option</span> [<span class=\\"hljs-attr\\">value</span>]=<span class=\\"hljs-string\\">&quot;3&quot;</span>&gt;</span>Third<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">option</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">option</span> [<span class=\\"hljs-attr\\">value</span>]=<span class=\\"hljs-string\\">&quot;99&quot;</span>&gt;</span>Other<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">option</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">select</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> [<span class=\\"hljs-attr\\">ngSwitch</span>]=<span class=\\"hljs-string\\">&quot;type&quot;</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngSwitchCase</span>=<span class=\\"hljs-string\\">&quot;1&quot;</span>&gt;</span>First<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngSwitchCase</span>=<span class=\\"hljs-string\\">&quot;2&quot;</span>&gt;</span>Second<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngSwitchCase</span>=<span class=\\"hljs-string\\">&quot;3&quot;</span>&gt;</span>Third<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngSwitchDefault</span>&gt;</span>Default<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesSwitchDemoComponent"}],"title":"ngSwitch directive","url":"ngswitch-directive"},{"id":"be545b36-dcdc-2122-cb68-2cb76226b35e","entries":[{"id":"32a040a5-5318-c3b9-27b6-4cf1d6cda243","type":"text","text":"<p>Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.</p>\\n<p>To use this directive you must provide a container element that sets the <code>[ngPlural]</code> attribute to a switch expression. Inner elements with a <code>[ngPluralCase]</code> will display based on their expression:</p>\\n<ul>\\n<li>if <code>[ngPluralCase]</code> is set to a value starting with <code>=</code>, it will only display if the value matches the switch expression exactly,</li>\\n<li>otherwise, the view will be treated as a &quot;category match&quot;, and will only display if exact value matches aren&#39;t found and the value maps to its category for the defined locale.</li>\\n</ul>\\n<p>See <a href=\\"http://cldr.unicode.org/index/cldr-spec/plural-rules\\">CLDR \u2014 Plural Rules</a>.</p>\\n"},{"id":"8445b3a6-75f5-85f9-9b26-319848f26b62","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> [(<span class=\\"hljs-attr\\">ngModel</span>)]=<span class=\\"hljs-string\\">&quot;value&quot;</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">&quot;value&quot;</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> [<span class=\\"hljs-attr\\">ngPlural</span>]=<span class=\\"hljs-string\\">&quot;value&quot;</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> <span class=\\"hljs-attr\\">ngPluralCase</span>=<span class=\\"hljs-string\\">&quot;=0&quot;</span>&gt;</span>No messages<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> <span class=\\"hljs-attr\\">ngPluralCase</span>=<span class=\\"hljs-string\\">&quot;=1&quot;</span>&gt;</span>One message<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> <span class=\\"hljs-attr\\">ngPluralCase</span>=<span class=\\"hljs-string\\">&quot;other&quot;</span>&gt;</span>{{ value }} messages<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  value = <span class=\\"hljs-number\\">1</span>;\\n}</code></pre>\\n","demo":"V6TemplatesNgpluralDemoComponent"}],"title":"ngPlural directive","url":"ngplural-directive"},{"id":"240a820f-3702-d71e-4bb7-8a935d5899ca","entries":[{"id":"1b3b8d0b-0568-bfd9-0c23-454fa9efb802","type":"text","text":"<p>Inserts an embedded view from a prepared TemplateRef.</p>\\n"},{"id":"3f431e5f-cbb7-7abb-1ddf-1eac04f799c4","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-container</span> *<span class=\\"hljs-attr\\">ngTemplateOutlet</span>=<span class=\\"hljs-string\\">&quot;greet&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-container</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">hr</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-container</span> *<span class=\\"hljs-attr\\">ngTemplateOutlet</span>=<span class=\\"hljs-string\\">&quot;eng; context: myContext&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-container</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">hr</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-container</span> *<span class=\\"hljs-attr\\">ngTemplateOutlet</span>=<span class=\\"hljs-string\\">&quot;svk; context: myContext&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-container</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">hr</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> #<span class=\\"hljs-attr\\">greet</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">span</span>&gt;</span>Hello<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">span</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> #<span class=\\"hljs-attr\\">eng</span> <span class=\\"hljs-attr\\">let-name</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">span</span>&gt;</span>Hello {{name}}!<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">span</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> #<span class=\\"hljs-attr\\">svk</span> <span class=\\"hljs-attr\\">let-person</span>=<span class=\\"hljs-string\\">&quot;localSk&quot;</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">span</span>&gt;</span>Ahoj {{person}}!<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">span</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  myContext = {$implicit: <span class=\\"hljs-string\\">&#x27;World&#x27;</span>, localSk: <span class=\\"hljs-string\\">&#x27;Svet&#x27;</span>};\\n}</code></pre>\\n","demo":"V6TemplatesNgtemplateoutletDemoComponent"},{"id":"efebe3cc-34ad-3b0e-ec95-6e9200c90a3b","type":"text","text":"<p>Using the key <code>$implicit</code> in the context object will set its value as default.</p>\\n"}],"title":"ngTemplateOutlet directive","url":"ngtemplateoutlet-directive"},{"id":"fc3a146d-e7e5-cfd3-8348-254ee1b73249","entries":[{"id":"5edc85b6-260c-9e74-c461-4a226add6653","type":"text","text":"<p>Instantiates a single Component type and inserts its Host View into current View. <code>NgComponentOutlet</code> provides a declarative approach for dynamic component creation.</p>\\n"},{"id":"028090d8-e22f-1c18-a7ce-9420f04ec538","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({selector: <span class=\\"hljs-string\\">&#x27;hello-world&#x27;</span>, template: <span class=\\"hljs-string\\">&#x27;Hello World!&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> HelloWorld {\\n}\\n\\n<span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;ng-component-outlet-simple-example&#x27;</span>,\\n  template: <span class=\\"hljs-string\\">`&lt;ng-container *ngComponentOutlet=&quot;HelloWorld&quot;&gt;&lt;/ng-container&gt;`</span>\\n})\\n<span class=\\"hljs-keyword\\">class</span> NgTemplateOutletSimpleExample {\\n  <span class=\\"hljs-comment\\">// This field is necessary to expose HelloWorld to the template.</span>\\n  HelloWorld = HelloWorld;\\n}</code></pre>\\n"},{"id":"2da8985d-8240-bc18-352a-fed94c0ddf93","type":"text","text":"<p>You can control the component creation process by using the following optional attributes:</p>\\n<ul>\\n<li><code>ngComponentOutletInjector</code>: Optional custom Injector that will be used as parent for the Component. Defaults to the injector of the current view container.</li>\\n<li><code>ngComponentOutletContent</code>: Optional list of projectable nodes to insert into the content section of the component, if exists.</li>\\n<li><code>ngComponentOutletNgModuleFactory</code>: Optional module factory to allow dynamically loading other module, then load a component from that module.</li>\\n</ul>\\n"},{"id":"9d9e713f-63aa-014a-8c1e-4be5dec0d7cf","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">class</span> Greeter {\\n  suffix = <span class=\\"hljs-string\\">&#x27;!&#x27;</span>;\\n}\\n\\n<span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;complete-component&#x27;</span>,\\n  template: <span class=\\"hljs-string\\">`Complete: &lt;ng-content&gt;&lt;/ng-content&gt; &lt;ng-content&gt;&lt;/ng-content&gt;{{ greeter.suffix }}`</span>\\n})\\n<span class=\\"hljs-keyword\\">class</span> CompleteComponent {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">public</span> greeter: Greeter</span>) {}\\n}\\n\\n<span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;ng-component-outlet-complete-example&#x27;</span>,\\n  template: <span class=\\"hljs-string\\">`\\n    &lt;ng-container *ngComponentOutlet=&quot;CompleteComponent; \\n                                      injector: myInjector; \\n                                      content: myContent&quot;&gt;&lt;/ng-container&gt;`</span>\\n})\\n<span class=\\"hljs-keyword\\">class</span> NgTemplateOutletCompleteExample {\\n  <span class=\\"hljs-comment\\">// This field is necessary to expose CompleteComponent to the template.</span>\\n  CompleteComponent = CompleteComponent;\\n  myInjector: Injector;\\n\\n  myContent = [[<span class=\\"hljs-built_in\\">document</span>.createTextNode(<span class=\\"hljs-string\\">&#x27;Ahoj&#x27;</span>)], [<span class=\\"hljs-built_in\\">document</span>.createTextNode(<span class=\\"hljs-string\\">&#x27;Svet&#x27;</span>)]];\\n\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\">injector: Injector</span>) {\\n    <span class=\\"hljs-built_in\\">this</span>.myInjector = ReflectiveInjector.resolveAndCreate([Greeter], injector);\\n  }\\n}</code></pre>\\n"},{"id":"72f59091-bcda-2b8d-7ccb-0bc4dca0981f","type":"tutorials","links":[{"label":"Dynamic component rendering in Angular 5 with NgComponentOutlet","url":"https://medium.com/@symposia/dynamic-component-rendering-in-angular-5-with-ngcomponentoutlet-410bec3ece75","lang":"en"},{"label":"Here is what you need to know about dynamic components in Angular","url":"https://blog.angularindepth.com/here-is-what-you-need-to-know-about-dynamic-components-in-angular-ac1e96167f9e","lang":"en"}]}],"title":"ngComponentOutlet directive","url":"ngcomponentoutlet-directive"},{"id":"649a3050-f2eb-2a87-0222-ce7ca88b4a39","entries":[{"id":"362dc4dd-6573-feb5-6b98-9111c8cb8aba","type":"text","text":"<p>The <code>&lt;ng-template&gt;</code> is an Angular element for rendering HTML. It is never displayed directly. In fact, before rendering the view, Angular replaces the <code>&lt;ng-template&gt;</code> and its contents with a comment.</p>\\n<p>If there is no structural directive and you merely wrap some elements in a <code>&lt;ng-template&gt;</code>, those elements disappear.</p>\\n"},{"id":"318701fd-bf9a-4248-5b13-99862d7e96fe","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>Hip!<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>Hip!<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>Hooray!<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesNgtemplate1DemoComponent"},{"id":"1096b87e-330f-bd74-d714-099d8748ce90","type":"text","text":"<h3 id=\\"ng-template-with-ngtemplateoutlet\\">ng-template with *ngTemplateOutlet</h3>\\n<p>Save template to a <code>ref</code> and then output with <code>*ngTemplateOutlet</code> directive.</p>\\n"},{"id":"7aa5d552-bf2c-cef8-66da-9079be676fad","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-template</span> #<span class=\\"hljs-attr\\">templateRef</span>&gt;</span>Hello!<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-template</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngTemplateOutlet</span>=<span class=\\"hljs-string\\">&quot;templateRef&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesNgtemplate2DemoComponent"},{"id":"fa90df9f-997e-0b3e-3e73-982aa43483e8","type":"tutorials","links":[{"label":"Angular ng-template, ng-container and ngTemplateOutlet - The Complete Guide To Angular Templates","lang":"en","url":"https://blog.angular-university.io/angular-ng-template-ng-container-ngtemplateoutlet/"},{"label":"Use <ng-template>","url":"https://blog.angularindepth.com/use-ng-template-c72852c37fba","lang":"en"}]}],"title":"ng-template","url":"ng-template"},{"id":"dad50ffc-c7dc-e8a6-ddac-c6faf06881e3","entries":[{"id":"d3503990-12fb-5def-fe19-b8fd2769fa75","type":"text","text":"<p>The Angular <code>&lt;ng-container&gt;</code> is a grouping element that doesn&#39;t interfere with styles or layout because Angular doesn&#39;t put it in the DOM.</p>\\n"},{"id":"d5241d89-c0c2-4571-092d-58a61c0089b7","type":"text","text":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>\\n  I turned the corner\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-container</span> *<span class=\\"hljs-attr\\">ngIf</span>=<span class=\\"hljs-string\\">&quot;hero&quot;</span>&gt;</span>\\n    and saw {{hero.name}}. I waved\\n  <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-container</span>&gt;</span>\\n  and continued on my way.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span></code></pre>\\n"}],"title":"ng-container","url":"ng-container"},{"id":"2142e2e6-e570-7b4d-4989-b3e98ade0730","entries":[{"id":"5f5bd1fe-8705-6a0e-7924-b844a888274a","type":"text","text":"<p>Content projection is a way to import HTML content from outside the component and insert that content into the component&#39;s template in a designated spot.</p>\\n"},{"id":"5c0063ab-2b1d-f4bf-f905-55197dc8b556","type":"demo","source":"<h5 id=\\"appcomponentts\\">app.component.ts</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">my-component</span>&gt;</span>\\n  Some content\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">my-component</span>&gt;</span></code></pre>\\n<h5 id=\\"mycomponentts\\">my.component.ts</h5>\\n<pre><code class=\\"language-html\\">Projected content: <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-content</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-content</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesNgcontent1DemoComponent"},{"id":"6e03ffe8-b388-658a-e2e1-fdd72886a697","type":"text","text":"<h3 id=\\"ng-content-with-select\\">ng-content with select</h3>\\n"},{"id":"a4221366-ca11-6f2a-1dc2-6a889d89f05c","type":"demo","source":"<h5 id=\\"appcomponentts\\">app.component.ts</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">my-component</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">&quot;primary&quot;</span>&gt;</span>Primary content<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> <span class=\\"hljs-attr\\">secondary</span>&gt;</span>Secondary content<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>Div content<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  Non selected content.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">my-component</span>&gt;</span></code></pre>\\n<h5 id=\\"mycomponentts\\">my.component.ts</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-content</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-content</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  Primary content: \\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-content</span> <span class=\\"hljs-attr\\">select</span>=<span class=\\"hljs-string\\">&quot;.primary&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-content</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  Secondary content: \\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-content</span> <span class=\\"hljs-attr\\">select</span>=<span class=\\"hljs-string\\">&quot;[secondary]&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-content</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  Div content: \\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-content</span> <span class=\\"hljs-attr\\">select</span>=<span class=\\"hljs-string\\">&quot;div&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-content</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesNgcontent2DemoComponent"},{"id":"04421e83-537d-252b-e455-3b5d06f39fdb","type":"text","text":"<h3 id=\\"ng-content-with-pojectas\\">ng-content with pojectAs</h3>\\n"},{"id":"b1444004-b72b-9d0d-2897-eb8208e86e3e","type":"text","text":"<p>You can define which selector will be used with <code>&lt;ng-content&gt;</code>.</p>\\n"},{"id":"0f5c671b-a3ac-b4dd-be46-c253b1542407","type":"demo","source":"<h5 id=\\"appcomponentts\\">app.component.ts</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">my-component</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-container</span> <span class=\\"hljs-attr\\">ngProjectAs</span>=<span class=\\"hljs-string\\">&quot;custom&quot;</span>&gt;</span>\\n   Projected As.\\n  <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-container</span>&gt;</span>\\n  Non selected content.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">my-component</span>&gt;</span></code></pre>\\n<h5 id=\\"mycomponentts\\">my.component.ts</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-content</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-content</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ng-content</span> <span class=\\"hljs-attr\\">select</span>=<span class=\\"hljs-string\\">&quot;custom&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ng-content</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesNgcontent3DemoComponent"},{"id":"2a879fde-f6f3-098e-1966-d1b08f8590bb","type":"tutorials","links":[{"label":"ng-content: The hidden docs","lang":"en","url":"https://medium.com/claritydesignsystem/ng-content-the-hidden-docs-96a29d70d11b"}]}],"title":"Content projection with ng-content","url":"ng-content"},{"id":"2860a0ea-e940-73db-1f80-56cbe0982414","entries":[{"id":"ea96ec05-57ea-59ef-507a-b8e578275ee1","type":"text","text":"<p>A template reference variable is often a reference to a DOM element within a template. It can also be a reference to an Angular component or directive or a web component.</p>\\n<p>Use the hash symbol (#) to declare a reference variable. You can refer to a template reference variable anywhere in the template. </p>\\n"},{"id":"b0ad63d0-e347-7742-d538-ba13d6452e51","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> #<span class=\\"hljs-attr\\">phone</span> <span class=\\"hljs-attr\\">placeholder</span>=<span class=\\"hljs-string\\">&quot;phone number&quot;</span>&gt;</span>\\n\\n<span class=\\"hljs-comment\\">&lt;!-- phone refers to the input element; pass its `value` to an event handler --&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> (<span class=\\"hljs-attr\\">click</span>)=<span class=\\"hljs-string\\">&quot;callPhone(phone.value)&quot;</span>&gt;</span>Call<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  callPhone(phone: <span class=\\"hljs-built_in\\">string</span>) {\\n    alert(phone);\\n  }\\n}</code></pre>\\n","demo":"V6TemplatesReferenceDemoComponent"},{"id":"bee64252-a902-4476-ea46-182304cf85a2","type":"text","text":"<p>You can use the <code>ref-</code> prefix alternative to <code>#</code>.</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> <span class=\\"hljs-attr\\">ref-fax</span> <span class=\\"hljs-attr\\">placeholder</span>=<span class=\\"hljs-string\\">&quot;fax number&quot;</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> (<span class=\\"hljs-attr\\">click</span>)=<span class=\\"hljs-string\\">&quot;callFax(fax.value)&quot;</span>&gt;</span>Fax<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n"},{"id":"f6d5c18a-5e91-4a6d-67d1-4adae4ecf24b","type":"text","text":"<h2 id=\\"exportas\\">exportAs</h2>\\n<p>In most cases, Angular sets the reference variable&#39;s value to the element on which it was declared. But a directive can change that behavior and set the value to something else, such as itself.</p>\\n"},{"id":"f9bd167b-2682-96bc-2e73-c61eb30b1b11","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Directive</span>({\\n selector: <span class=\\"hljs-string\\">&#x27;[tooltip]&#x27;</span>,\\n exportAs: <span class=\\"hljs-string\\">&#x27;tooltip&#x27;</span>\\n})</code></pre>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">a</span> <span class=\\"hljs-attr\\">tooltip</span>=<span class=\\"hljs-string\\">&quot;I&#x27;m a tooltip!!&quot;</span> #<span class=\\"hljs-attr\\">tooltip</span>=<span class=\\"hljs-string\\">&quot;tooltip&quot;</span>&gt;</span>I&#x27;m a link<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">a</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> (<span class=\\"hljs-attr\\">click</span>)=<span class=\\"hljs-string\\">&quot;tooltip.toggleTooltip()&quot;</span>&gt;</span>Toggle tooltip<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n"},{"id":"355d987b-6bc0-5774-5b06-87409d04e56f","type":"tutorials","links":[{"label":"Angular 2\u200a\u2014\u200aTake Advantage Of The exportAs Property","lang":"en","url":"https://netbasal.com/angular-2-take-advantage-of-the-exportas-property-81374ce24d26"}]}],"title":"Reference #","url":"reference"},{"id":"10b3e94d-1395-cadf-8c27-8c0445a7ee30","entries":[{"id":"878c3b28-7cc1-dcaf-f6ef-69ebb35fcf92","type":"text","text":"<p>The result of an expression might require some transformation before you&#39;re ready to use it in a binding.</p>\\n<p>Angular pipes are a good choice for small transformations such as these. Pipes are simple functions that accept an input value and return a transformed value. They&#39;re easy to apply within template expressions, using the pipe operator (|):</p>\\n"},{"id":"b9903498-9c8d-81e4-3524-d3d34999edd2","type":"text","text":"<pre><code class=\\"language-html\\">Title through uppercase pipe: \\n{{title | uppercase}}</code></pre>\\n"},{"id":"7429be27-b2f8-9167-8d74-5ab7a365a059","type":"text","text":"<p>You can chain expressions through multiple pipes:</p>\\n"},{"id":"ac9a57c6-cbf5-7b23-b6f7-012c9c6153c9","type":"text","text":"<pre><code class=\\"language-html\\">Title through a pipe chain:\\n{{title | uppercase | lowercase}}</code></pre>\\n"},{"id":"efb51028-e59e-bfc2-6ae8-4ebbb375ae83","type":"text","text":"<p>And you can also apply parameters to a pipe:</p>\\n"},{"id":"586157a6-cc30-a4a5-63ec-aabf7cc20be7","type":"text","text":"<pre><code class=\\"language-html\\">Birthdate: \\n{{currentHero?.birthdate | date:&#x27;longDate&#x27;}}</code></pre>\\n"}],"title":"Pipe |","url":"pipe"},{"id":"34f9abdb-1b3b-65ea-d33c-01779e618308","entries":[{"id":"aca1e3a2-9cd9-84ae-7b1c-16e0b0a5680a","type":"text","text":"<p>You can create your own custom pipes.</p>\\n<p>The pipe class implements the <code>PipeTransform</code> interface&#39;s <code>transform</code> method that accepts an input value followed by optional parameters and returns the transformed value.</p>\\n"},{"id":"6eb54eff-b667-8860-67d9-2a380caf6909","type":"demo","source":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Pipe</span>({name: <span class=\\"hljs-string\\">&#x27;multi&#x27;</span>})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MultiPipe <span class=\\"hljs-keyword\\">implements</span> PipeTransform {\\n  transform(value: <span class=\\"hljs-built_in\\">number</span>, multiplier: <span class=\\"hljs-built_in\\">number</span> = <span class=\\"hljs-number\\">2</span>): <span class=\\"hljs-built_in\\">number</span> {\\n    <span class=\\"hljs-keyword\\">return</span> value * multiplier;\\n  }\\n}</code></pre>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>{{ 2 | multi }}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>{{ 10 | multi:5 }}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesCustompipeDemoComponent"},{"id":"3f071c80-e67d-d9ba-0227-aa899b54f18f","type":"text","text":"<p>Note the following:</p>\\n<ul>\\n<li>You use your custom pipe the same way you use built-in pipes.</li>\\n<li>You must include your pipe in the <code>declarations</code> array of the <code>AppModule</code> or in a module where you need it.</li>\\n</ul>\\n"},{"id":"7df140b8-1a98-06f4-c6ce-c5bb949dd728","type":"tutorials","links":[{"label":"Step by Step Custom Pipes in Angular","url":"https://toddmotto.com/angular-pipes-custom-pipes","lang":"en"},{"label":"The essential difference between pure and impure pipes in Angular and why that matters","url":"https://blog.angularindepth.com/the-essential-difference-between-pure-and-impure-pipes-and-why-that-matters-999818aa068","lang":"en"}]}],"title":"@Pipe","url":"custom-pipe"},{"id":"dec405ef-c681-b0b8-1c12-8f49a96163fd","entries":[{"id":"9c4075b5-7209-d6a3-e1cd-d8f3e15929d4","type":"text","text":"<p>Transforms Object or Map into an array of key value pairs.</p>\\n"},{"id":"599d8896-6f72-bcd1-ade3-4d8b32ca2d0f","type":"text","text":"<p>This examples show how an Object or a Map and be iterated by ngFor with the use of this keyvalue pipe.</p>\\n"},{"id":"6e50f231-fb9a-76b1-f681-f8f2ad33aed7","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>Object<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngFor</span>=<span class=\\"hljs-string\\">&quot;let item of object | keyvalue&quot;</span>&gt;</span>\\n  {{item.key}}:{{item.value}}\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>Map<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngFor</span>=<span class=\\"hljs-string\\">&quot;let item of map | keyvalue&quot;</span>&gt;</span>\\n  {{item.key}}:{{item.value}}\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  <span class=\\"hljs-built_in\\">object</span>: {[key: <span class=\\"hljs-built_in\\">number</span>]: <span class=\\"hljs-built_in\\">string</span>} = {<span class=\\"hljs-number\\">2</span>: <span class=\\"hljs-string\\">&#x27;foo&#x27;</span>, <span class=\\"hljs-number\\">1</span>: <span class=\\"hljs-string\\">&#x27;bar&#x27;</span>};\\n  map = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>([[<span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-string\\">&#x27;foo&#x27;</span>], [<span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-string\\">&#x27;bar&#x27;</span>]]);\\n}</code></pre>\\n","demo":"V6TemplatesKeyvaluepipeDemoComponent"},{"id":"6e699662-a468-4b94-499c-c908394b5132","type":"text","text":"<p>The output array will be ordered by keys. By default the comparator will be by Unicode point value. You can optionally pass a compareFn if your keys are complex types.</p>\\n"}],"title":"keyvalue pipe","url":"keyvalue-pipe"},{"id":"ffb49eb4-ffc7-5ef4-12d7-7d37de6869ef","entries":[{"id":"4fa2d0a2-6333-3d35-d1dd-db5568ca11c6","type":"text","text":"<p>Creates a new <code>Array</code> or <code>String</code> containing a subset (slice) of the elements.</p>\\n<p>All behavior is based on the expected behavior of the JavaScript API <code>Array.prototype.slice()</code> and <code>String.prototype.slice()</code>.</p>\\n<p>When operating on an <code>Array</code>, the returned <code>Array</code> is always a copy even when all the elements are being returned.</p>\\n<p>When operating on a blank value, the pipe returns the blank value.</p>\\n"},{"id":"7f22a6f6-2dd1-3072-87e3-825dac1a1de2","type":"text","text":"<h3 id=\\"list-demo\\">List Demo</h3>\\n"},{"id":"e7fd6e49-55c6-f063-6a39-8b881b70c774","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ul</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">li</span> *<span class=\\"hljs-attr\\">ngFor</span>=<span class=\\"hljs-string\\">&quot;let i of collection | slice:1:3&quot;</span>&gt;</span>{{i}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">li</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ul</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  collection: <span class=\\"hljs-built_in\\">string</span>[] = [<span class=\\"hljs-string\\">&#x27;a&#x27;</span>, <span class=\\"hljs-string\\">&#x27;b&#x27;</span>, <span class=\\"hljs-string\\">&#x27;c&#x27;</span>, <span class=\\"hljs-string\\">&#x27;d&#x27;</span>];\\n}</code></pre>\\n","demo":"V6TemplatesSlicepipe1DemoComponent"},{"id":"728e5b38-c4fb-2191-7de5-5da699cbee4b","type":"text","text":"<h3 id=\\"string-demo\\">String Demo</h3>\\n"},{"id":"085a8aee-26b5-d650-2500-9a74c1e49df2","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>&#x27;{{str | slice:0:4}}&#x27; - output is expected to be &#x27;abcd&#x27;<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>&#x27;{{str | slice:4:0}}&#x27; - output is expected to be &#x27;&#x27;<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>&#x27;{{str | slice:-4}}&#x27; - output is expected to be &#x27;ghij&#x27;<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>&#x27;{{str | slice:-4:-2}}&#x27; - output is expected to be &#x27;gh&#x27;<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>&#x27;{{str | slice:-100}}&#x27; - output is expected to be &#x27;abcdefghij&#x27;<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>&#x27;{{str | slice:100}}&#x27; - output is expected to be &#x27;&#x27;<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  str = <span class=\\"hljs-string\\">&#x27;abcdefghij&#x27;</span>;\\n}</code></pre>\\n","demo":"V6TemplatesSlicepipe2DemoComponent"}],"title":"slice pipe","url":"slice-pipe"},{"id":"c047db73-514c-a389-a673-43697da418df","entries":[{"id":"304b6bc8-5d18-3dad-d6da-df61056ebe16","type":"text","text":"<p>Unwraps a value from an asynchronous primitive.</p>\\n<p>The <code>async</code> pipe subscribes to an <code>Observable</code> or <code>Promise</code> and returns the latest value it has emitted. When a new value is emitted, the <code>async</code> pipe marks the component to be checked for changes. When the component gets destroyed, the <code>async</code> pipe unsubscribes automatically to avoid potential memory leaks.</p>\\n"},{"id":"1627e149-09d9-c26f-8e79-d2bf2ee146c7","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">code</span>&gt;</span>observable|async<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">code</span>&gt;</span>\\nTime: {{ time | async }}</code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  time = <span class=\\"hljs-keyword\\">new</span> Observable&lt;<span class=\\"hljs-built_in\\">string</span>&gt;(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">observer: Observer&lt;<span class=\\"hljs-built_in\\">string</span>&gt;</span>) =&gt;</span> {\\n    <span class=\\"hljs-built_in\\">setInterval</span>(<span class=\\"hljs-function\\">() =&gt;</span> observer.next(<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Date</span>().toString()), <span class=\\"hljs-number\\">1000</span>);\\n  });\\n}</code></pre>\\n","demo":"V6TemplatesAsyncpipeDemoComponent"},{"id":"59465130-fe3a-a332-63b7-776fa083ba1b","type":"tutorials","links":[{"label":"Handling Observables with NgIf and the Async Pipe","url":"https://toddmotto.com/angular-ngif-async-pipe","lang":"en"},{"label":"Three things you didn\'t know about the AsyncPipe","url":"https://blog.thoughtram.io/angular/2017/02/27/three-things-you-didnt-know-about-the-async-pipe.html","lang":"en"}]}],"title":"async pipe","url":"async-pipe"},{"id":"cbadb122-f290-da4e-c71c-2cb6f09ad015","entries":[{"id":"3ae795ef-5045-dabf-f238-16a27f7173ba","type":"text","text":"<p>Transforms text to all lower case.</p>\\n"},{"id":"3694ddea-3735-badc-f2ac-ec74cbb41e3c","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> [(<span class=\\"hljs-attr\\">ngModel</span>)]=<span class=\\"hljs-string\\">&quot;value&quot;</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>In lowercase: <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">pre</span>&gt;</span>{{value | lowercase}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">pre</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesLowercasepipeDemoComponent"}],"title":"lowerCase pipe","url":"lowercase-pipe"},{"id":"fab45add-6fcd-2e1f-3550-a65400aaae6d","entries":[{"id":"4c9819c1-d3fe-6d41-fe3c-9f875020bcac","type":"text","text":"<p>Transforms text to all upper case.</p>\\n"},{"id":"004c4d34-a51d-af84-1caf-6c0ef8749c1a","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> [(<span class=\\"hljs-attr\\">ngModel</span>)]=<span class=\\"hljs-string\\">&quot;value&quot;</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>In uppercase: <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">pre</span>&gt;</span>{{value | uppercase}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">pre</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesUppercasepipeDemoComponent"}],"title":"upperCase pipe","url":"uppercase-pipe"},{"id":"f565837f-d88e-31e5-0445-b28d367911e8","entries":[{"id":"b82c8bb8-79ac-31c6-29e6-d494eb23783e","type":"text","text":"<p>Transforms text to title case. Capitalizes the first letter of each word, and transforms the rest of the word to lower case. Words are delimited by any whitespace character, such as a space, tab, or line-feed character.</p>\\n"},{"id":"ced7c298-7711-e36b-594c-005834697ac9","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>{{&#x27;some string&#x27; | titlecase}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>{{&#x27;tHIs is mIXeD CaSe&#x27; | titlecase}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>{{&#x27;it\\\\&#x27;s non-trivial question&#x27; | titlecase}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>{{&#x27;one,two,three&#x27; | titlecase}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>{{&#x27;true|false&#x27; | titlecase}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>{{&#x27;foo-vs-bar&#x27; | titlecase}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesTitlecasepipeDemoComponent"}],"title":"titleCase pipe","url":"titlecase-pipe"},{"id":"40991bb3-d497-82ac-fa84-994b9d641cf3","entries":[{"id":"99c28866-50e2-5bb6-af9e-a1728401dbe0","type":"text","text":"<p>Formats a date value according to locale rules.</p>\\n"},{"id":"188ae9bc-a16a-671d-722a-40168866c78c","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>Today is {{today | date}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>Or if you prefer, {{today | date:&#x27;fullDate&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>The time is {{today | date:&#x27;h:mm a z&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  today = <span class=\\"hljs-built_in\\">Date</span>.now();\\n}</code></pre>\\n","demo":"V6TemplatesDatepipeDemoComponent"},{"id":"ecf0104c-1433-4041-0d11-7cb6c7cb01aa","type":"text","text":"<p>Only the <code>en-US</code> locale data comes with Angular. To localize dates in another language, you must import the corresponding locale data.</p>\\n"},{"id":"976de5ed-9a26-cd61-76d8-a7a15def595c","type":"text","text":"<h2 id=\\"parameters\\">Parameters</h2>\\n"},{"id":"82391433-d23f-719e-7917-91092a8103f2","type":"text","text":"<pre><code>{{ value_expression | date [ : format [ : timezone [ : locale ] ] ] }}</code></pre>\\n"},{"id":"722b40bf-896a-528a-d99b-64658668df3a","type":"toc"},{"id":"17db8be0-9934-1b42-24ca-de381d10deab","type":"interface-option","head":"format","description":"The date/time components to include, using predefined options or a custom format string.\\n","name":"format","headId":"format","interface":"format: string = \'mediumDate\'","showAdditional":true,"additional":"#### Pre-defined format options\\n\\nExamples are given in `en-US` locale.\\n\\n* `short`: equivalent to \'M/d/yy, h:mm a\' (6/15/15, 9:03 AM).\\n* `medium`: equivalent to \'MMM d, y, h:mm:ss a\' (Jun 15, 2015, 9:03:01 AM).\\n* `long`: equivalent to \'MMMM d, y, h:mm:ss a z\' (June 15, 2015 at 9:03:01 AM GMT+1).\\n* `full`: equivalent to \'EEEE, MMMM d, y, h:mm:ss a zzzz\' (Monday, June 15, 2015 at 9:03:01 AM GMT+01:00).\\n* `shortDate`: equivalent to \'M/d/yy\' (6/15/15).\\n* `mediumDate`: equivalent to \'MMM d, y\' (Jun 15, 2015).\\n* `longDate`: equivalent to \'MMMM d, y\' (June 15, 2015).\\n* `fullDate`: equivalent to \'EEEE, MMMM d, y\' (Monday, June 15, 2015).\\n* `shortTime`: equivalent to \'h:mm a\' (9:03 AM).\\n* `mediumTime`: equivalent to \'h:mm:ss a\' (9:03:01 AM).\\n* `longTime`: equivalent to \'h:mm:ss a z\' (9:03:01 AM GMT+1).\\n* `fullTime`: equivalent to \'h:mm:ss a zzzz\' (9:03:01 AM GMT+01:00).\\n\\n#### Custom format options\\n\\nYou can construct a format string using symbols to specify the components of a date-time value, as described in the [official documentation](https://angular.io/api/common/DatePipe#custom-format-options)."},{"id":"10a82d8a-badd-fcd4-e1a2-d5cb1854dc4d","type":"interface-option","head":"timezone","description":"A timezone offset (such as \'+0430\'), or a standard UTC/GMT or continental US timezone abbreviation. Default is the local system timezone of the end-user\'s machine.\\n","name":"timezone","headId":"timezone","interface":"timezone?: string"},{"id":"ea898665-ba0c-8e57-eebe-722d379be03d","type":"interface-option","head":"locale","description":"A locale code for the locale format rules to use. ","name":"locale","headId":"locale","interface":"locale?: string","showAdditional":true,"additional":"When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default. See [Setting your app locale](https://angular.io/guide/i18n#setting-up-the-locale-of-your-app)."}],"title":"date pipe","url":"date-pipe"},{"id":"bc711eea-b174-20e4-0250-1b412bf98983","entries":[{"id":"6f475a0f-1aa7-68d6-735a-e8782f349f9a","type":"text","text":"<p>Transforms a number into a string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</p>\\n"},{"id":"a9f79c01-96c6-de9e-9b6c-27e2e3a7b941","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>e (no formatting): {{e | number}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>e (3.1-5): {{e | number:&#x27;3.1-5&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>e (4.5-5): {{e | number:&#x27;4.5-5&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>pi (no formatting): {{pi | number}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>pi (3.1-5): {{pi | number:&#x27;3.1-5&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>pi (3.5-5): {{pi | number:&#x27;3.5-5&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>-2.5 (1.0-0): {{-2.5 | number:&#x27;1.0-0&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  e = <span class=\\"hljs-built_in\\">Math</span>.E;\\n  pi = <span class=\\"hljs-built_in\\">Math</span>.PI;\\n}</code></pre>\\n","demo":"V6TemplatesNumberpipeDemoComponent"},{"id":"7780965a-d3a1-2003-87ca-28e2bbbc5112","type":"text","text":"<h2 id=\\"parameters\\">Parameters</h2>\\n"},{"id":"c030a517-9bc3-afae-c843-74077470a038","type":"text","text":"<pre><code>{{ value_expression | number [ : digitsInfo [ : locale ] ] }}</code></pre>\\n"},{"id":"b190a315-7756-3c24-73d6-13459ce37bf8","type":"toc"},{"id":"d29e142d-2aa4-9ef2-ace3-7329c2b46e4d","type":"interface-option","head":"digitsInfo","description":"Decimal representation options.","name":"digitsInfo","headId":"digitsInfo","interface":"digitsInfo?: string","showAdditional":true,"additional":"Specified by a string in the following format:\\n\\n```\\n{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\\n```\\n\\n- `minIntegerDigits`: The minimum number of integer digits before the decimal point. Default is `1`.\\n- `minFractionDigits`: The minimum number of digits after the decimal point. Default is `0`.\\n- `maxFractionDigits`: The maximum number of digits after the decimal point. Default is `3`."},{"id":"87614371-8346-aefd-2c55-bbed3d3832ee","type":"interface-option","head":"locale","description":"A locale code for the locale format rules to use.","name":"locale","headId":"locale","interface":"locale?: string"}],"title":"number (decimal) pipe","url":"number-pipe"},{"id":"ebd7cdc5-4b87-81d3-cd71-6e52ba84ca44","entries":[{"id":"c5312b42-abf1-cc8f-91b3-19c7475bb222","type":"text","text":"<p>Transforms a number to a currency string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</p>\\n"},{"id":"493c9dd8-dccc-f7f0-191e-1d76a5dc0ded","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>A: {{a | currency}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>A: {{a | currency:&#x27;CAD&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>A: {{a | currency:&#x27;CAD&#x27;:&#x27;code&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>B: {{b | currency:&#x27;CAD&#x27;:&#x27;symbol&#x27;:&#x27;4.2-2&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>B: {{b | currency:&#x27;CAD&#x27;:&#x27;symbol-narrow&#x27;:&#x27;4.2-2&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>B: {{b | currency:&#x27;CLP&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  a = <span class=\\"hljs-number\\">0.259</span>;\\n  b = <span class=\\"hljs-number\\">1.3495</span>;\\n}</code></pre>\\n","demo":"V6TemplatesCurrencypipeDemoComponent"},{"id":"bfbbde41-dae9-c512-9c57-05f9458a8a72","type":"text","text":"<h2 id=\\"parameters\\">Parameters</h2>\\n"},{"id":"2ff01517-b8fb-1d13-18a2-07c42abadf2b","type":"text","text":"<pre><code>{{ value_expression | currency [ : currencyCode [ : display [ : digitsInfo [ : locale ] ] ] ] }}</code></pre>\\n"},{"id":"7eec68bc-540d-0b6c-ed9a-f38f3c915c24","type":"toc"},{"id":"e5f9e1ec-79be-dd6e-691d-35124bef0995","type":"interface-option","head":"currencyCode","description":"The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such as `USD` for the US dollar and `EUR` for the euro.\\n","name":"currencyCode","headId":"currencyCode","interface":"currencyCode?: string"},{"id":"efe8a6b7-0cd0-5b6e-e412-040128a9ca24","type":"interface-option","head":"display","description":"The format for the currency indicator.","interface":"display: \'code\'|\'symbol\'|\'symbol-narrow\'|string|boolean = \'symbol\'","name":"display","headId":"display","showAdditional":true,"additional":"One of the following:\\n  - `code`: Show the code (such as `USD`).\\n  - `symbol`(default): Show the symbol (such as `$`).\\n  - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their currency.\\n\\nFor example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the locale has no narrow symbol, uses the standard symbol for the locale.\\n  - String: Use the given string value instead of a code or a symbol.\\n  - Boolean (marked deprecated in v5): `true` for symbol and false for `code`."},{"id":"efc8361b-627f-9ce2-7e84-05e620c974b1","type":"interface-option","head":"digitsInfo","description":"Decimal representation options.","interface":"digitsInfo?: string","name":"digitsInfo","headId":"digitsInfo","showAdditional":true,"additional":"Specified by a string in the following format:\\n\\n```\\n{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\\n```\\n\\n- `minIntegerDigits`: The minimum number of integer digits before the decimal point. Default is `1`.\\n- `minFractionDigits`: The minimum number of digits after the decimal point. Default is `0`.\\n- `maxFractionDigits`: The maximum number of digits after the decimal point. Default is `3`.\\n\\nIf not provided, the number will be formatted with the proper amount of digits, depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\\n\\nFor example, the Canadian dollar has 2 digits, whereas the Chilean peso has none."},{"id":"9660c420-816b-40f1-8642-05bb4031e511","type":"interface-option","head":"locale","description":"A locale code for the locale format rules to use.","name":"locale","headId":"locale","interface":"locale?: string","showAdditional":true,"additional":"When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default. See [Setting your app locale](https://angular.io/guide/i18n#setting-up-the-locale-of-your-app)."}],"title":"currency pipe","url":"currency-pipe"},{"id":"faa1feb4-6706-f50c-07c7-84f09fbebbfa","entries":[{"id":"8bc97377-c211-4022-940f-7bc0db9c4979","type":"text","text":"<p>Transforms a number to a percentage string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</p>\\n"},{"id":"c17499db-1331-453a-006e-d87d85f57102","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>A: {{a | percent}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span>&gt;</span>B: {{b | percent:&#x27;4.3-5&#x27;}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  a = <span class=\\"hljs-number\\">0.259</span>;\\n  b = <span class=\\"hljs-number\\">1.3495</span>;\\n}</code></pre>\\n","demo":"V6TemplatesPercentpipeDemoComponent"},{"id":"5f8a29a7-d78b-50e9-3138-131176b4aeb3","type":"text","text":"<h2 id=\\"parameters\\">Parameters</h2>\\n"},{"id":"3e7ffdd8-218d-5d1e-120e-d3cc3a2b5740","type":"text","text":"<pre><code>{{ value_expression | percent [ : digitsInfo [ : locale ] ] }}</code></pre>\\n"},{"id":"018364cd-bf13-feb7-9ec2-5c9aff2f1914","type":"interface-option","head":"digitsInfo","description":"Decimal representation options.","name":"digitsInfo","headId":"digitsInfo","interface":"digitsInfo?: string","showAdditional":true,"additional":"Specified by a string in the following format:\\n\\n```\\n{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\\n```\\n\\n  - `minIntegerDigits`: The minimum number of integer digits before the decimal point. Default is `1`.\\n  - `minFractionDigits`: The minimum number of digits after the decimal point. Default is `0`.\\n  - `maxFractionDigits`: The maximum number of digits after the decimal point. Default is `3`."},{"id":"6e8e4baf-c78e-6372-7985-c75fd139b5f1","type":"interface-option","head":"locale","description":"A locale code for the locale format rules to use.","name":"locale","headId":"locale","interface":"locale?: string","showAdditional":true,"additional":"When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default. See [Setting your app locale](https://angular.io/guide/i18n#setting-up-the-locale-of-your-app)."}],"title":"percent pipe","url":"percent-pipe"},{"id":"b7165bcf-251f-3435-c1dd-c1666812b26d","entries":[{"id":"52c23c9e-ece9-ddba-3139-d99ebfde7f54","type":"text","text":"<p>Maps a value to a string that pluralizes the value according to locale rules.</p>\\n<p>See <a href=\\"http://cldr.unicode.org/index/cldr-spec/plural-rules\\">CLDR \u2014 Plural Rules</a>.</p>\\n"},{"id":"8ef2d41a-bed0-38ac-7a80-8d3b53d4e9e2","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">input</span> [(<span class=\\"hljs-attr\\">ngModel</span>)]=<span class=\\"hljs-string\\">&quot;value&quot;</span>&gt;</span>\\n{{ value | i18nPlural: mapping }}</code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  value = <span class=\\"hljs-number\\">1</span>;\\n\\n  mapping: {[k: <span class=\\"hljs-built_in\\">string</span>]: <span class=\\"hljs-built_in\\">string</span>} = {\\n    <span class=\\"hljs-string\\">&#x27;=0&#x27;</span>: <span class=\\"hljs-string\\">&#x27;No messages.&#x27;</span>,\\n    <span class=\\"hljs-string\\">&#x27;=1&#x27;</span>: <span class=\\"hljs-string\\">&#x27;One message.&#x27;</span>,\\n    <span class=\\"hljs-string\\">&#x27;other&#x27;</span>: <span class=\\"hljs-string\\">&#x27;# messages.&#x27;</span>,\\n  };\\n}</code></pre>\\n","demo":"V6TemplatesPluralpipeDemoComponent"}],"title":"i18nPlural pipe","url":"plural-pipe"},{"id":"cb41b558-e878-7876-77ea-8ab2ef27a089","entries":[{"id":"7f8e813a-c4d9-70f7-5f88-ac2bbf7b1729","type":"text","text":"<p>The json pipe is particularly helpful for debugging bindings:</p>\\n"},{"id":"8b6b380a-b93b-7d52-d111-4c2eda1a8294","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>{{data | json}}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  data = {\\n    field: <span class=\\"hljs-string\\">&#x27;value&#x27;</span>,\\n    obj: {\\n      innerField: <span class=\\"hljs-string\\">&#x27;123&#x27;</span>,\\n    },\\n  };\\n}</code></pre>\\n","demo":"V6TemplatesJsonpipeDemoComponent"}],"title":"json pipe","url":"json-pipe"},{"id":"38b2b883-8c43-59d5-be35-0c8febe10672","entries":[{"id":"11d30f25-364e-33d3-0831-128a1c401433","type":"text","text":"<p>The Angular safe navigation operator (<code>?.</code>) is a fluent and convenient way to guard against <code>null</code> and <code>undefined</code> values in property paths. </p>\\n<p>Here it is, protecting against a view render failure if the <code>currentHero</code> is null:</p>\\n<pre><code class=\\"language-html\\">The current hero&#x27;s name is {{currentHero?.name}}</code></pre>\\n<p>It works perfectly with long property paths:</p>\\n<pre><code class=\\"language-html\\">The current hero&#x27;s name is {{currentHero?.info?.name}}</code></pre>\\n<p>And methods:</p>\\n<pre><code class=\\"language-html\\">The current hero&#x27;s name is {{currentHero?.getInfo()?.name}}</code></pre>\\n"},{"id":"63f61603-1fba-4772-6313-7a132e14532d","type":"tutorials","links":[{"label":"Angular \u2014 The safe navigation operator ( ?. ) and null property paths","url":"https://angular.io/guide/template-syntax#the-safe-navigation-operator----and-null-property-paths","lang":"en"}]}],"title":"Safe navigation operator .?","url":"safe-navigation-operator"},{"id":"e933e885-ed2e-0c4c-3bf9-b110622035e9","entries":[{"id":"dd528cd1-3d8b-0ce5-744c-a802c7072091","type":"text","text":"<p>As of Typescript 2.0, you can enforce strict null checking with the <code>--strictNullChecks</code> flag.</p>\\n<p>Type checker throws an error if it can&#39;t determine whether a variable will be <code>null</code> or <code>undefined</code> at runtime. You may know that can&#39;t happen but the type checker doesn&#39;t know. You tell the type checker that it can&#39;t happen by applying the post-fix non-null assertion operator (<code>!</code>).</p>\\n<p>For example, after you use <code>*ngIf</code> to check that hero is defined, you can assert that hero properties are also defined:</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngIf</span>=<span class=\\"hljs-string\\">&quot;hero&quot;</span>&gt;</span>\\n  The hero&#x27;s name is {{hero!.name}}\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<p>Unlike the <a href=\\"../safe-navigation-operator\\">safe navigation operator</a>, the non-null assertion operator does not guard against <code>null</code> or <code>undefined</code>.</p>\\n"}],"title":"Non-null assertion operator !.","url":"non-null-assertion-operator"},{"id":"8ff6b47e-ed09-d58b-30ea-220039c4a3b9","entries":[{"id":"f4550b46-a58e-e981-9568-534f6656856c","type":"text","text":"<p>You can build a simple animation that transitions an element between two states driven by a model attribute.</p>\\n<p>Animations can be defined inside <code>@Component</code> metadata.</p>\\n<p>Then using the <code>[@triggerName]</code> syntax, attach the animation that you just defined to one or more elements in the component&#39;s template.</p>\\n"},{"id":"8f7cef40-8add-4fb5-278c-5c2d02b6f7fb","type":"demo","source":"<pre><code class=\\"language-html\\">Click to change active state:\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">ul</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">li</span> *<span class=\\"hljs-attr\\">ngFor</span>=<span class=\\"hljs-string\\">&quot;let hero of heroes&quot;</span>\\n      [@<span class=\\"hljs-attr\\">heroState</span>]=<span class=\\"hljs-string\\">&quot;hero.active ? &#x27;active&#x27; : &#x27;inactive&#x27;&quot;</span>\\n      (<span class=\\"hljs-attr\\">click</span>)=<span class=\\"hljs-string\\">&quot;hero.active = !hero.active&quot;</span>&gt;</span>\\n    {{hero.name}}\\n  <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">li</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">ul</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({\\n  ...\\n  animations: [\\n    trigger(<span class=\\"hljs-string\\">&#x27;heroState&#x27;</span>, [\\n      state(<span class=\\"hljs-string\\">&#x27;inactive&#x27;</span>, style({\\n        backgroundColor: <span class=\\"hljs-string\\">&#x27;#eee&#x27;</span>,\\n        transform: <span class=\\"hljs-string\\">&#x27;scale(1)&#x27;</span>,\\n      })),\\n      state(<span class=\\"hljs-string\\">&#x27;active&#x27;</span>, style({\\n        backgroundColor: <span class=\\"hljs-string\\">&#x27;#cfd8dc&#x27;</span>,\\n        transform: <span class=\\"hljs-string\\">&#x27;scale(1.1)&#x27;</span>,\\n      })),\\n      transition(<span class=\\"hljs-string\\">&#x27;inactive =&gt; active&#x27;</span>, animate(<span class=\\"hljs-string\\">&#x27;100ms ease-in&#x27;</span>)),\\n      transition(<span class=\\"hljs-string\\">&#x27;active =&gt; inactive&#x27;</span>, animate(<span class=\\"hljs-string\\">&#x27;100ms ease-out&#x27;</span>)),\\n    ]),\\n  ],\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  heroes = [\\n    {\\n      name: <span class=\\"hljs-string\\">&#x27;Superman&#x27;</span>,\\n      active: <span class=\\"hljs-literal\\">true</span>,\\n    },\\n    {\\n      name: <span class=\\"hljs-string\\">&#x27;Batman&#x27;</span>,\\n      active: <span class=\\"hljs-literal\\">true</span>,\\n    },\\n    {\\n      name: <span class=\\"hljs-string\\">&#x27;Aquaman&#x27;</span>,\\n      active: <span class=\\"hljs-literal\\">false</span>,\\n    },\\n  ];\\n}</code></pre>\\n","demo":"V6TemplatesAnimationDemoComponent"},{"id":"f9b41f2f-3223-4baa-1d45-5a5568998742","type":"tutorials","links":[{"label":"Angular \u2014 Animations","url":"https://angular.io/guide/animations","lang":"en"},{"label":"Introduction to Animations in Angular","lang":"en","url":"https://alligator.io/angular/animation-angular/"},{"label":"A New Wave of Animation Features in Angular","url":"https://www.yearofmoo.com/2017/06/new-wave-of-animation-features.html","lang":"en"}]}],"title":"Animation binding @","url":"animation-binding"},{"id":"d4605f78-d154-545c-399a-ddba5a692e89","entries":[{"id":"096631a9-1a6f-6810-1e46-09b5747d4cd9","type":"text","text":"<p>An SVG snippet template needs an <code>svg:</code> prefix on its root element to disambiguate the SVG element from an HTML component.</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">svg:rect</span> <span class=\\"hljs-attr\\">x</span>=<span class=\\"hljs-string\\">&quot;0&quot;</span> <span class=\\"hljs-attr\\">y</span>=<span class=\\"hljs-string\\">&quot;0&quot;</span> <span class=\\"hljs-attr\\">width</span>=<span class=\\"hljs-string\\">&quot;100&quot;</span> <span class=\\"hljs-attr\\">height</span>=<span class=\\"hljs-string\\">&quot;100&quot;</span>/&gt;</span></code></pre>\\n<p>An <code>&lt;svg&gt;</code> root element is detected as an SVG element automatically, without the prefix.</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">svg</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">rect</span> <span class=\\"hljs-attr\\">x</span>=<span class=\\"hljs-string\\">&quot;0&quot;</span> <span class=\\"hljs-attr\\">y</span>=<span class=\\"hljs-string\\">&quot;0&quot;</span> <span class=\\"hljs-attr\\">width</span>=<span class=\\"hljs-string\\">&quot;100&quot;</span> <span class=\\"hljs-attr\\">height</span>=<span class=\\"hljs-string\\">&quot;100&quot;</span>/&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">svg</span>&gt;</span></code></pre>\\n"},{"id":"7b9621a7-b645-f4bc-2c02-fb19db7b2f9e","type":"tutorials","links":[{"label":"SVG and Canvas Graphics in Angular 2","url":"https://teropa.info/blog/2016/12/12/graphics-in-angular-2.html","lang":"en"}]}],"title":"svg: prefix","url":"svg-prefix"},{"id":"777bab38-457d-9543-6bdd-f10ec318691e","entries":[{"id":"82070c87-a398-6f37-b1c3-dd524324eda6","type":"text","text":"<p>The <code>ngNonBindable</code> tells Angular not to compile or bind the contents of the current DOM element.</p>\\n"},{"id":"8e1af19a-1d17-eff3-7834-e3ea6daeb0fb","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>{{ 1 + 1 }}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> <span class=\\"hljs-attr\\">ngNonBindable</span>&gt;</span>{{ 1 + 1 }}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesNgnonbindableDemoComponent"}],"title":"ngNonBindable","url":"ngnonbindable"},{"id":"2eaac733-9385-ae44-4ea1-62ce4adfb374","entries":[{"id":"9dd113ac-2d35-c060-68aa-f1bbb810de62","type":"text","text":"<p>Sometimes a binding expression will be reported as a type error and it is not possible or difficult to fully specify the type. To silence the error, you can use the <code>$any</code> cast function to cast the expression to the <code>any</code> type.</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-comment\\">&lt;!-- Accessing an undeclared member --&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  The hero&#x27;s marker is {{$any(hero).marker}}\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<p>The $any cast function can be used in conjunction with this to allow access to undeclared members of the component.</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-comment\\">&lt;!-- Accessing an undeclared member --&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  Undeclared members is {{$any(this).member}}\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n"}],"title":"$any() type cast","url":"any-type-cast"}],"title":"Templates","color":"rgb(255, 154, 3)","url":"templates","disabled":false,"langs":{"en":true}},{"id":"cf9867c0-c7ba-5d8b-92db-838948f086f5","menu":{"items":[{"id":"deb9db16-6c49-edec-34c5-80b198db5e66","label":"Introduction","url":"intro"},{"id":"0fa51f09-ea81-cc6f-4e26-5d300151d616","label":"CSS Declaration","sub":{"items":[{"id":"3c9e1942-bedc-b816-a524-f4685edb8ad2","label":"Global styles","sub":{"items":[]},"url":"global-styles"},{"id":"3fc8573a-9f30-bd8c-af5f-24d29305f097","label":"Component inline","url":"component-inline-styles"},{"id":"3e74285b-3877-6fd3-4819-4e5c66ba7bf9","label":"Component external","url":"component-external-styles"},{"id":"0e69d19f-7519-cf91-62f1-59857ded3bef","label":"Template inline","url":"template-inline-styles"},{"id":"788ed60a-31a9-6362-3009-d937b7976e21","label":"Encapsulation","url":"encapsulation"}]},"asGroup":true},{"id":"77fb504e-3988-b87d-4c0a-4f406cfeb3c4","label":"Special selectors","sub":{"items":[{"id":"c8328c3f-0ea6-d6ee-ccb0-7ce2c2bca5ee","label":":host","url":"host-selector"},{"id":"69094674-dac0-b395-1b74-b4ac86bd2881","label":":host-context","url":"host-context-selector"},{"id":"fe580ab1-5a15-ca95-51e6-66b387377d4d","label":"::ng-deep","url":"ng-deep-selector"}]},"asGroup":true},{"id":"c66380a3-444b-a048-2add-8cbcf9819cd2","label":"Binding","sub":{"items":[{"id":"e727a9db-4859-82ca-6ddd-e7236d30ae71","label":"[style.] and @HostBinding","url":"style-and-host-binding"},{"id":"91f81889-2100-6020-8031-ab4970ff6b21","label":"ngStyle directive","url":"ngstyle-directive"},{"id":"c7dd14dd-beec-9e51-7c82-75063787c8e6","label":"ElementRef & Renderer2","url":"styling-with-elementref-and-renderer2"},{"id":"b781a2b3-125e-1ac6-e8c7-04450390e594","label":"DomSanitizer","url":"domsanitizer-for-styling"}]},"asGroup":true}]},"pages":[{"id":"049153f6-a519-14a2-28b5-f03b2dc3fd67","entries":[{"id":"7798374e-9faa-85f8-014b-3217764e257e","type":"text","text":"<p>This easy Angular reference for developers describes styling and view encapsulation.</p>\\n"},{"id":"0ae8f8a0-0a9b-a600-e9f9-c81873387f9c","type":"text","text":"<h2 id=\\"additional-information\\">Additional information</h2>\\n<p>Example of hints and tutorials links. You can switch off these panels in the sidebar.</p>\\n"},{"id":"0af67b6d-2a1c-e627-65d1-d3d2cc57b288","type":"hint","text":"Hint with additional explanation. "},{"id":"261ab65e-be68-3eb1-19dc-e9916a535b02","type":"tutorials","links":[{"label":"Angular \u2014 Component Styles","url":"https://angular.io/guide/component-styles","lang":"en"}]}],"title":"Introduction","url":"intro"},{"id":"61b16a97-b979-97cf-87f1-df30f51f8fec","entries":[{"id":"085f0f8d-f952-8f9d-ecad-6f8d346d1bbc","type":"text","text":"<p>When building with the CLI, you must configure the <code>angular.json</code> to include all external assets, including external style files.</p>\\n<p>Register global style files in the <code>styles</code> section which, by default, is pre-configured with the global <code>styles.css</code> file.</p>\\n<p>You can add more global styles via the <code>styles</code> option inside your project&#39;s build target options in <code>angular.json</code>. These will be loaded exactly as if you had added them in a <code>&lt;link&gt;</code> tag inside <code>index.html</code>.</p>\\n<pre><code>&quot;architect&quot;: {\\n  &quot;build&quot;: {\\n    &quot;builder&quot;: &quot;@angular-devkit/build-angular:browser&quot;,\\n    &quot;options&quot;: {\\n      &quot;styles&quot;: [\\n        &quot;src/styles.css&quot;,\\n        &quot;src/more-styles.css&quot;,\\n      ],\\n      ...</code></pre>\\n<p>You can also rename the output and lazy load it by using the object format:</p>\\n<pre><code>&quot;styles&quot;: [\\n  &quot;src/styles.css&quot;,\\n  &quot;src/more-styles.css&quot;,\\n  { &quot;input&quot;: &quot;src/lazy-style.scss&quot;, &quot;lazy&quot;: true },\\n  { &quot;input&quot;: &quot;src/pre-rename-style.scss&quot;, &quot;bundleName&quot;: &quot;renamed-style&quot; },\\n],</code></pre>\\n"}],"title":"Global styles","url":"global-styles"},{"id":"978a0315-a141-7ba2-e249-150fe4d36b27","entries":[{"id":"3fdf6aa0-5f50-f06a-beaf-f9220ce655f1","type":"text","text":"<p>You can add a <code>styles</code> array property to the <code>@Component</code> decorator.</p>\\n<p>Each string in the array defines some CSS for this component.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;app-demo&#x27;</span>,\\n  template: <span class=\\"hljs-string\\">`\\n    &lt;p&gt;Demo component&lt;/p&gt;\\n  `</span>,\\n  styles: [<span class=\\"hljs-string\\">&#x27;p { font-weight: bold; }&#x27;</span>]\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> DemoComponent {\\n<span class=\\"hljs-comment\\">/* . . . */</span>\\n}</code></pre>\\n"}],"title":"Component inline styles","url":"component-inline-styles"},{"id":"84d3049b-2f62-5f7e-fe11-fec8e4a01d3e","entries":[{"id":"d9d22e21-fecd-dafb-4a00-f943d634316c","type":"text","text":"<p>You can load styles from external CSS files by adding a <code>styleUrls</code> property to a component&#39;s <code>@Component</code> decorator:</p>\\n"},{"id":"bc70f075-985a-12e5-3cfe-c52268abe7df","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;app-demo&#x27;</span>,\\n  template: <span class=\\"hljs-string\\">`\\n    Demo component.\\n  `</span>,\\n  styleUrls: [<span class=\\"hljs-string\\">&#x27;./demo.component.css&#x27;</span>],\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> DemoComponent {\\n  ...\\n}</code></pre>\\n"},{"id":"e6e31d88-173b-395e-a217-55e4b8a80f4d","type":"text","text":"<p>Also you can include several style files:</p>\\n"},{"id":"1dc6e066-0beb-7168-3790-0d913c9849f0","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;app-demo&#x27;</span>,\\n  template: <span class=\\"hljs-string\\">`\\n    Demo component.\\n  `</span>,\\n  styleUrls: [\\n    <span class=\\"hljs-string\\">&#x27;../styles/layout.css&#x27;</span>,\\n    <span class=\\"hljs-string\\">&#x27;./demo.component.css&#x27;</span>,\\n  ],\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> DemoComponent {\\n  ...\\n}</code></pre>\\n"}],"title":"Component external styles","url":"component-external-styles"},{"id":"7ed145bf-de2c-0b6b-1d6a-de1a206086d1","entries":[{"id":"9471681e-7440-56de-8121-d6dedf35cd1c","type":"text","text":"<p>You can embed CSS styles directly into the HTML template by putting them inside <code>&lt;style&gt;</code> tags.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;app-hero-controls&#x27;</span>,\\n  template: <span class=\\"hljs-string\\">`\\n    &lt;style&gt;\\n      button {\\n        background-color: white;\\n        border: 1px solid #777;\\n      }\\n    &lt;/style&gt;\\n    &lt;h3&gt;Controls&lt;/h3&gt;\\n    &lt;button (click)=&quot;activate()&quot;&gt;Activate&lt;/button&gt;\\n  `</span>\\n})</code></pre>\\n<p>You can also write <link> tags into the component&#39;s HTML template.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;app-hero-team&#x27;</span>,\\n  template: <span class=\\"hljs-string\\">`\\n    &lt;!-- We must use a relative URL so that the AOT compiler can find the stylesheet --&gt;\\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;../assets/hero-team.component.css&quot;&gt;\\n    &lt;h3&gt;Team&lt;/h3&gt;\\n    &lt;ul&gt;\\n      &lt;li *ngFor=&quot;let member of hero.team&quot;&gt;\\n        {{member}}\\n      &lt;/li&gt;\\n    &lt;/ul&gt;`</span>\\n})</code></pre>\\n"}],"title":"Template inline styles","url":"template-inline-styles"},{"id":"939ecdfc-ad5c-37ba-274e-c87c55fa5c12","entries":[{"id":"720876f7-d0f9-fb9f-350d-5ca3094f1991","type":"text","text":"<p>Component CSS styles are encapsulated into the component&#39;s view and don&#39;t affect the rest of the application.</p>\\n<p>To control how this encapsulation happens on a per component basis, you can set the view encapsulation mode in the component metadata.</p>\\n<pre><code>@Component({\\n  ...\\n  encapsulation: ViewEncapsulation.Native\\n})</code></pre>\\n<h3 id=\\"emulated-default\\">Emulated (default)</h3>\\n<p><code>Emulated</code> view encapsulation (the default) emulates the behavior of shadow DOM by preprocessing (and renaming) the CSS code to effectively scope the CSS to the component&#39;s view. For details, see <a href=\\"https://angular.io/guide/component-styles#inspect-generated-css\\">Appendix 1</a>.</p>\\n<h3 id=\\"shadowdom\\">ShadowDom</h3>\\n<p><code>ShadowDom</code> view encapsulation uses the browser&#39;s native shadow DOM implementation (see <a href=\\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM\\">Shadow DOM</a>) to attach a shadow DOM to the component&#39;s host element, and then puts the component view inside that shadow DOM. The component&#39;s styles are included within the shadow DOM.</p>\\n<h3 id=\\"native\\">Native</h3>\\n<p><code>Native</code> view encapsulation uses a now deprecated version of the browser&#39;s native shadow DOM implementation - <a href=\\"https://hayato.io/2016/shadowdomv1/\\">learn about the changes</a>.</p>\\n<h3 id=\\"none\\">None</h3>\\n<p><code>None</code> means that Angular does no view encapsulation. Angular adds the CSS to the global styles. The scoping rules, isolations, and protections discussed earlier don&#39;t apply. This is essentially the same as pasting the component&#39;s styles into the HTML.</p>\\n"},{"id":"51762e40-820f-f9bb-dbc4-90aad17fce8b","type":"tutorials","links":[{"label":"View Encapsulation in Angular by thoughtram","url":"https://blog.thoughtram.io/angular/2015/06/29/shadow-dom-strategies-in-angular2.html","lang":"en"}]}],"title":"Styles encapsulation","url":"encapsulation"},{"id":"4bdd882a-8502-529f-3d3f-979ec93531f2","entries":[{"id":"5e189f56-292a-e6bb-b3ae-67c770ae918e","type":"text","text":"<p>Use the <code>:host</code> pseudo-class selector to target styles in the element that hosts the component (as opposed to targeting elements inside the component&#39;s template).</p>\\n"},{"id":"6f7c1056-a990-851d-cf2c-0c754d80327d","type":"demo","source":"<h5 id=\\"democomponenthtml\\">demo.component.html</h5>\\n<pre><code class=\\"language-html\\">Demo component!</code></pre>\\n<h5 id=\\"democomponentcss\\">demo.component.css</h5>\\n<pre><code class=\\"language-css\\"><span class=\\"hljs-selector-pseudo\\">:host</span> {\\n  <span class=\\"hljs-attribute\\">display</span>: block;\\n  <span class=\\"hljs-attribute\\">border</span>: <span class=\\"hljs-number\\">1px</span> solid black;\\n}</code></pre>\\n","demo":"V6StylingHost1DemoComponent"},{"id":"77af9e64-d51a-f5c4-f1e4-fa24f9c51f26","type":"text","text":"<p>The <code>:host</code> selector is the only way to target the host element. You can&#39;t reach the host element from inside the component with other selectors because it&#39;s not part of the component&#39;s own template. The host element is in a parent component&#39;s template.</p>\\n<p>Use the function form to apply host styles conditionally by including another selector inside parentheses after <code>:host</code>.</p>\\n<p>The next example targets the host element again, but only when it also has the <code>active</code> CSS class.</p>\\n"},{"id":"b55ca845-91ae-29cf-a691-9ff9c7e6099a","type":"demo","source":"<h5 id=\\"appcomponenthtml\\">app.component.html</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">app-demo</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">app-demo</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">app-demo</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">&quot;active&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">app-demo</span>&gt;</span></code></pre>\\n<h5 id=\\"democomponenthtml\\">demo.component.html</h5>\\n<pre><code class=\\"language-html\\">Demo component!</code></pre>\\n<h5 id=\\"democomponentcss\\">demo.component.css</h5>\\n<pre><code class=\\"language-css\\"><span class=\\"hljs-selector-pseudo\\">:host</span> {\\n  <span class=\\"hljs-attribute\\">display</span>: block;\\n  <span class=\\"hljs-attribute\\">border</span>: <span class=\\"hljs-number\\">1px</span> solid black;\\n}\\n\\n<span class=\\"hljs-selector-pseudo\\">:host(.active)</span> {\\n  <span class=\\"hljs-attribute\\">border-width</span>: <span class=\\"hljs-number\\">3px</span>;\\n}</code></pre>\\n","demo":"V6StylingHost2DemoComponent"}],"title":":host selector","url":"host-selector"},{"id":"176464de-d77d-6506-2c2d-5ef01cc54dd7","entries":[{"id":"1be8e0ee-d3ba-7206-f54d-8cf94fd12b72","type":"text","text":"<p>Sometimes it&#39;s useful to apply styles based on some condition outside of a component&#39;s view. For example, a CSS theme class could be applied to the document <code>&lt;body&gt;</code> element, and you want to change how your component looks based on that.</p>\\n<p>Use the <code>:host-context()</code> pseudo-class selector, which works just like the function form of <code>:host()</code>. The <code>:host-context()</code> selector looks for a CSS class in any ancestor of the component host element, up to the document root. The <code>:host-context()</code> selector is useful when combined with another selector.</p>\\n<p>The following example applies a <code>background-color</code> style to all <code>.demo</code> elements inside the component, only if some ancestor element has the CSS class <code>theme-light</code>.</p>\\n"},{"id":"7b5bceee-9100-67d6-c0a6-ec124040531f","type":"demo","source":"<h5 id=\\"democomponentcss\\">demo.component.css</h5>\\n<pre><code class=\\"language-css\\"><span class=\\"hljs-selector-class\\">.demo</span> {\\n  <span class=\\"hljs-attribute\\">border</span>: <span class=\\"hljs-number\\">1px</span> solid <span class=\\"hljs-number\\">#666</span>;\\n}\\n\\n<span class=\\"hljs-selector-pseudo\\">:host-context(.theme-light)</span> <span class=\\"hljs-selector-class\\">.demo</span> {\\n  <span class=\\"hljs-attribute\\">background-color</span>: <span class=\\"hljs-number\\">#eef</span>;\\n}</code></pre>\\n<h5 id=\\"democomponenthtml\\">demo.component.html</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">&quot;demo&quot;</span>&gt;</span>Demo block<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">demo</span>&gt;</span></code></pre>\\n<h5 id=\\"indexhtml\\">index.html</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-meta\\">&lt;!doctype <span class=\\"hljs-meta-keyword\\">html</span>&gt;</span>\\n...\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">body</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">&quot;theme-light&quot;</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">app-root</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">app-root</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">body</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">html</span>&gt;</span></code></pre>\\n","demo":"V6StylingHostcontextDemoComponent"}],"title":":host-context selector","url":"host-context-selector"},{"id":"a3426c82-064c-d1c7-db29-b75d9397feaa","entries":[{"id":"466d1adb-0a2b-2439-ba7b-7bbea8c61e39","type":"text","text":"<p>Component styles normally apply only to the HTML in the component&#39;s own template.</p>\\n<p>Use the <code>::ng-deep</code> shadow-piercing descendant combinator to force a style down through the child component tree into all the child component views. The <code>::ng-deep</code> combinator works to any depth of nested components, and it applies to both the view children and content children of the component.</p>\\n<p>The following example targets all <code>&lt;h3&gt;</code> elements, from the host element down through this component to all of its child elements in the DOM.</p>\\n"},{"id":"3f06cc8d-a496-0626-feed-0ffaa2a22f5f","type":"demo","source":"<h5 id=\\"parentcomponenthtml\\">parent.component.html</h5>\\n<pre><code class=\\"language-html\\">Parent content.\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">app-child</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">app-child</span>&gt;</span></code></pre>\\n<h5 id=\\"parentcomponentcss\\">parent.component.css</h5>\\n<pre><code class=\\"language-css\\"><span class=\\"hljs-selector-pseudo\\">::ng-deep</span> <span class=\\"hljs-selector-tag\\">h3</span> {\\n  <span class=\\"hljs-attribute\\">font-style</span>: italic;\\n}</code></pre>\\n<h5 id=\\"childcomponenthtml\\">child.component.html</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">h3</span>&gt;</span>Child title<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">h3</span>&gt;</span>\\nChild content.</code></pre>\\n","demo":"V6StylingNgdeepDemoComponent"},{"id":"351b167d-7bd9-093b-fbf0-8658671bb505","type":"text","text":"<p>The <code>::ng-deep</code> combinator also has the aliases <code>&gt;&gt;&gt;</code>, and <code>/deep/</code>.</p>\\n"},{"id":"f99f583f-9a13-05fb-36e9-fcf06b853c58","type":"text","text":"<p>Use <code>/deep/</code>, <code>&gt;&gt;&gt;</code> and <code>::ng-deep</code> only with <code>emulated</code> view encapsulation. Emulated is the default and most commonly used view encapsulation. For more information, see the <a href=\\"../encapsulation\\">view encapsulation section</a>.</p>\\n"},{"id":"6a0da9e3-07d5-9ea6-4811-124ea31f291e","type":"text","text":"<p>The shadow-piercing descendant combinator is deprecated and support is being removed from major browsers and tools. As such we plan to drop support in Angular (for all 3 of <code>/deep/</code>, <code>&gt;&gt;&gt;</code> and <code>::ng-deep</code>). Until then <code>::ng-deep</code> should be preferred for a broader compatibility with the tools.</p>\\n"},{"id":"79490e9f-3976-87e1-b9d6-7b78547eb4f4","type":"tutorials","links":[{"label":"The New Angular ::ng-deep and the Shadow-Piercing Combinators Drop","url":"https://hackernoon.com/the-new-angular-ng-deep-and-the-shadow-piercing-combinators-deep-and-drop-4b088dbe459","lang":"en"}]}],"title":"::ng-deep selector","url":"ng-deep-selector"},{"id":"8962cb3f-d65f-8772-c705-173c23b46925","entries":[{"id":"3a25f586-cce0-0e53-0026-b5a2b515fd7b","type":"text","text":"<p>You can set inline styles with a style binding.</p>\\n"},{"id":"1297ae92-52ac-df3d-bc61-80f12d80228c","type":"text","text":"<p>Style binding syntax resembles property binding. Instead of an element property between brackets, start with the prefix <code>style</code>, followed by a dot (<code>.</code>) and the name of a CSS style property: <code>[style.style-property]</code>.</p>\\n"},{"id":"f7a7129d-9ce0-d7e6-20ae-00121110c84c","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> [<span class=\\"hljs-attr\\">style.color</span>]=<span class=\\"hljs-string\\">&quot;isSpecial ? &#x27;red&#x27;: &#x27;green&#x27;&quot;</span>&gt;</span>Red<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> [<span class=\\"hljs-attr\\">style.background-color</span>]=<span class=\\"hljs-string\\">&quot;canSave ? &#x27;cyan&#x27;: &#x27;grey&#x27;&quot;</span> &gt;</span>Save<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  isSpecial = <span class=\\"hljs-literal\\">true</span>;\\n  canSave = <span class=\\"hljs-literal\\">false</span>;\\n}</code></pre>\\n","demo":"V6TemplateStyle1DemoComponent"},{"id":"9ccd5eaa-67f0-31a8-cf32-aad1ee7bd8b2","type":"text","text":"<p>Some style binding styles have a unit extension. The following example conditionally sets the font size in \u201cem\u201d and \u201c%\u201d units .</p>\\n"},{"id":"f36f8918-db84-8a27-69e2-df9e943ae116","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> [<span class=\\"hljs-attr\\">style.font-size.em</span>]=<span class=\\"hljs-string\\">&quot;isSpecial ? 3 : 1&quot;</span> &gt;</span>Big<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">button</span> [<span class=\\"hljs-attr\\">style.font-size.</span>%]=<span class=\\"hljs-string\\">&quot;!isSpecial ? 150 : 50&quot;</span> &gt;</span>Small<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">button</span>&gt;</span></code></pre>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  isSpecial = <span class=\\"hljs-literal\\">true</span>;\\n}</code></pre>\\n","demo":"V6TemplateStyle2DemoComponent"},{"id":"70f62e91-2498-e071-766b-84f497264e7b","type":"text","text":"<p>Note that a style property name can be written in either dash-case, as shown above, or camelCase, such as <code>fontSize</code>.</p>\\n<p>While this is a fine way to set a single style, the <a href=\\"../ngstyle-directive\\">NgStyle directive</a> is generally preferred when setting several inline styles at the same time.</p>\\n"},{"id":"91a32f23-f6db-7a04-bb99-377605ecfdde","type":"text","text":"<h3 id=\\"hostbinding\\">@HostBinding</h3>\\n"},{"id":"7871eb3d-73c9-6e00-4d5b-0d8579c7a104","type":"text","text":"<p>You can use <code>@HostBinding</code> decorator to set styles to the host element of a component.</p>\\n"},{"id":"0bc7c043-0382-207d-4326-0e0e32ed425e","type":"demo","source":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> DemoComponent {\\n  <span class=\\"hljs-meta\\">@HostBinding</span>(<span class=\\"hljs-string\\">&#x27;style.background&#x27;</span>) backgroundColor = <span class=\\"hljs-string\\">&#x27;black&#x27;</span>;\\n\\n  <span class=\\"hljs-meta\\">@HostBinding</span>(<span class=\\"hljs-string\\">&#x27;style.color&#x27;</span>) get textColor() {\\n     <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">&#x27;white&#x27;</span>;\\n  }\\n}</code></pre>\\n","demo":"V6StylingHostbindingDemoComponent"}],"title":"[style.] and @HostBinding","url":"style-and-host-binding"},{"id":"cd8ac50a-3f28-1c77-a50b-6f8f4b307107","entries":[{"id":"761d4f0c-c373-7dbe-ca58-217fc4d55a6f","type":"text","text":"<p>Update an HTML element styles.</p>\\n<p>The styles are updated according to the value of the expression evaluation:</p>\\n<ul>\\n<li>keys are style names with an optional <code>.&lt;unit&gt;</code> suffix (ie &#39;top.px&#39;, &#39;font-style.em&#39;),</li>\\n<li>values are the values assigned to those properties (expressed in the given unit).</li>\\n</ul>\\n"},{"id":"037dbfd5-205a-282d-395b-42caf18fd676","type":"demo","source":"<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> [<span class=\\"hljs-attr\\">ngStyle</span>]=<span class=\\"hljs-string\\">&quot;{&#x27;font-size.px&#x27;: 20, color: &#x27;white&#x27;, background: &#x27;red&#x27;}&quot;</span>&gt;</span>\\n  Text in this div is 20px size, white color on red background.\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n","demo":"V6TemplatesNgstyleDemoComponent"}],"title":"ngStyle directive","url":"ngstyle-directive"},{"id":"5dd1700a-e6ce-e8bd-b838-62b5fedec172","entries":[{"id":"1631d471-b052-1781-1cbe-9cb7c4019446","type":"text","text":"<p>If we want to access the DOM element directly to manipulate its styles. In order to do that we need to inject <code>ElementRef</code> and access to the <code>nativeElement</code> property. This will give us access to the DOM APIs.</p>\\n"},{"id":"ad1464da-2111-50eb-935d-aa15a0845920","type":"text","text":"<pre><code class=\\"language-typescript\\">export class DemoComponent {\\n  constructor(private element: ElementRef){\\n    let el = this.element.nativeElement;\\n    // Option 1\\n    el.style.color = &#x27;white&#x27;;\\n    el.style.background = &#x27;red&#x27;;\\n    // Option 2\\n    el.style.cssText = &#x27;color: white; background: red;&quot;;\\n    // Option 3\\n    el.setAttribute(&#x27;style&#x27;, &#x27;color: white; background: red&#x27;);\\n  }\\n}</code></pre>\\n"},{"id":"c094d4dc-8dc4-f3c9-fbcc-b9f106d5e35e","type":"text","text":"<h3 id=\\"renderer2\\">Renderer2</h3>\\n"},{"id":"21772caa-646c-9a0f-dd81-7cddf30f5e2d","type":"text","text":"<p>The <a href=\\"../../core/renderer2\\"><code>Renderer2</code></a> class is a service that provides an abstraction for UI rendering manipulations. Using it is the recommended approach because it then makes it easier to develop apps that can be rendered in different environments.</p>\\n"},{"id":"97c83f46-e4a6-f4ea-e37a-201b9f781fc8","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> DemoComponent {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\">\\n    <span class=\\"hljs-keyword\\">private</span> element: ElementRef,\\n    <span class=\\"hljs-keyword\\">private</span> renderer: Renderer2,\\n  </span>){\\n    <span class=\\"hljs-keyword\\">let</span> el = <span class=\\"hljs-built_in\\">this</span>.element.nativeElement;\\n    renderer.setElementStyle(el, <span class=\\"hljs-string\\">&#x27;color&#x27;</span>, <span class=\\"hljs-string\\">&#x27;white&#x27;</span>);\\n    renderer.setElementStyle(el, <span class=\\"hljs-string\\">&#x27;background&#x27;</span>, <span class=\\"hljs-string\\">&#x27;red&#x27;</span>);\\n  }\\n}</code></pre>\\n"},{"id":"880773f7-0205-4c8c-0497-d8354d36383e","type":"tutorials","links":[{},{"label":"Angular: Stop manipulating DOM with ElementRef!","url":"https://medium.com/@kmathy/angular-manipulate-properly-the-dom-with-renderer-16a756508cba","lang":"en"}]}],"title":"Styling with ElementRef and Renderer2","url":"styling-with-elementref-and-renderer2"},{"id":"9ac2892a-8eb7-62ac-fb66-3a4a548aa42b","entries":[{"id":"bc57b161-5343-8642-cf5b-949be10fd928","type":"text","text":"<p>To avoid cross-site scripting or XSS some styling expressions might be flagged as unsafe by Angular.</p>\\n<pre><code>unsafe value used in a resource URL context.</code></pre>\\n<p>If you face this particular issue, you can flag the expression as safe by using the <code>bypassSecurityTrustStyle</code> API on the <a href=\\"../../core/dom-sanitizer\\"><code>DomSanitizer</code></a>.</p>\\n"},{"id":"f481777a-6d81-b649-5d9f-c62bf7c69a27","type":"text","text":"<h5 id=\\"democomponenthtml\\">demo.component.html</h5>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> *<span class=\\"hljs-attr\\">ngIf</span>=<span class=\\"hljs-string\\">&quot;image&quot;</span> [<span class=\\"hljs-attr\\">style.background-image</span>]=<span class=\\"hljs-string\\">&quot;image&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></code></pre>\\n<h5 id=\\"democomponentts\\">demo.component.ts</h5>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> DemoComponent {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">private</span> sanitizer: DomSanitizer</span>){\\n    <span class=\\"hljs-built_in\\">this</span>.image = <span class=\\"hljs-built_in\\">this</span>.sanitizer.bypassSecurityTrustStyle(<span class=\\"hljs-string\\">`url(<span class=\\"hljs-subst\\">${someImgUrl}</span>)`</span>);\\n  }\\n}</code></pre>\\n"},{"id":"740e6158-5c1c-1202-c577-164a2a672aa5","type":"tutorials","links":[{"label":"Angular 2 Security\u200a\u2014\u200aThe DomSanitizer Service","url":"https://netbasal.com/angular-2-security-the-domsanitizer-service-2202c83bd90","lang":"en"}]}],"title":"DomSanitizer for styling","url":"domsanitizer-for-styling"}],"title":"Styling","color":"rgb(255, 154, 3)","url":"styling","disabled":false,"langs":{"en":true}},{"id":"1d7d1307-5627-adab-6544-bf9836cda217","menu":{"items":[{"id":"69f00f4d-f7dd-a408-4ab9-4c7bdf62ba72","label":"Introduction","url":"intro"},{"id":"b686c771-b7ad-1283-3f4c-379467e3a132","label":"Class Decorators","asGroup":true,"sub":{"items":[{"id":"6bbaa333-c06c-4cfc-f2a6-270654e4ada3","label":"@NgModule","url":"ng-module","subActiveOpt":true,"sub":{"items":[{"id":"f689c475-20f1-587b-c1e6-65c75ada2ea7","usePageEntries":true,"usePageUrl":"ng-module"}]}},{"id":"f0d382c3-80e3-2c75-548a-1280023043e6","label":"@Directive","url":"directive","sub":{"items":[{"id":"a09ad2c2-1cc6-a856-24b5-0d7f10dd58b5","usePageEntries":true,"usePageUrl":"directive"}]},"subActiveOpt":true},{"id":"dbb3ba14-fabf-c6bd-7adc-4603fb463564","label":"@Component","url":"component","sub":{"items":[{"id":"5856a40a-d2d6-d8bd-1df2-58eb67d6d519","usePageEntries":true,"usePageUrl":"component"}]},"subActiveOpt":true},{"id":"37d67109-2ed1-e2b5-9a6f-22ebb2520472","label":"@Pipe","url":"pipe"},{"id":"20fe57e8-cbd5-e495-fd26-071fd8de2868","label":"@Injectable","url":"injectable"}]},"url":"","usePageEntries":false,"subActiveOpt":false},{"id":"5ff20bc0-ff0f-da4d-3126-88ed038a4f02","label":"Binding Decorators","sub":{"items":[{"id":"6417bd9b-9424-f365-5385-5c77b7e8ba0e","label":"@Input","url":"input"},{"id":"2e19fbdb-4a88-11a7-b2be-37782e0551ee","label":"@Output","url":"output"},{"id":"5b1e2c2a-193e-d180-16fe-d6c3cd306b2a","label":"@HostBinding","url":"host-binding"},{"id":"e9eb4ed1-61cd-5ba9-897e-fd61a36ccebd","label":"@HostListener","url":"host-listener"},{"id":"e479067d-8c4e-70a5-acb6-39e581033639","label":"@Attribute","url":"attribute"}]},"url":"","asGroup":true},{"id":"e57f3808-bd7a-d62b-e269-2945c9b09254","label":"Query Decorators","sub":{"items":[{"id":"4ce186b9-676b-f7c4-b6f4-ffed40f98e3f","label":"@ContentChildren","url":"content-children","urlFragment":""},{"id":"0c4daff0-8745-d18e-1d57-685d013492af","label":"@ContentChild","url":"content-child"},{"id":"1f24b471-9764-0e2e-d300-ad0c66b6634e","label":"@ViewChildren","url":"view-children"},{"id":"73d35ca0-ea8a-f60b-e464-b3a472bef35d","label":"@ViewChild","url":"view-child"}]},"url":"","asGroup":true},{"id":"2798e897-274a-8a5e-7e50-6689ae593e17","label":"Lifecycle Hooks","url":"lifecycle-hooks","asGroup":true,"sub":{"items":[{"id":"5069ab2d-add0-578a-eb7e-963dda244b67","label":"ngOnChanges()","url":"ng-on-changes"},{"id":"e048539c-aea1-d493-899e-72efb0fd120e","label":"ngOnInit()","url":"ng-on-init"},{"id":"1043c02d-81b9-0762-7fc0-b52ce68b1d11","label":"ngDoCheck()","url":"ng-do-check"},{"id":"2e69ba6c-3d9e-9205-f673-8a3049f8eff3","label":"ngAfterContentInit()","url":"ng-after-content-init"},{"id":"6a92b1e4-0323-ba21-161e-084bcb645344","label":"ngAfterContentChecked()","url":"ng-after-content-checked"},{"id":"d0971bcb-29b3-e82c-a9f5-2c64527f01de","label":"ngAfterViewInit()","url":"ng-after-view-init"},{"id":"5cd4440e-cfb2-9712-bfa2-29ba8ef03b43","label":"ngAfterViewChecked()","url":"ng-after-view-checked"},{"id":"fa21ada9-f9e8-500e-2020-339f96e44ade","label":"ngOnDestroy()","url":"ng-on-destroy"}]}},{"id":"b0f4fde8-7ebc-4986-6d02-45ad2eeb6927","label":"Dependency Injection","sub":{"items":[{"id":"d6bd0ef6-66c3-6361-c104-136f6b1acaa4","label":"ChangeDetectorRef","url":"change-detector-ref","sub":{"items":[{"id":"137afe83-11bf-4792-7fd4-4221f1cb158f","usePageEntries":true,"usePageUrl":"change-detector-ref"}]},"subActiveOpt":true},{"id":"b6e406e7-2741-4da5-ba10-820a1684df7e","label":"InjectionToken","url":"injection-token"},{"id":"e38a3e42-eb9e-a53d-694c-9bcb6dc294e5","label":"forwardRef","url":"forward-ref"},{"id":"cfc7adab-125e-ad58-bd1a-bbcbde9f68ae","label":"Providers","sub":{"items":[{"id":"ec497484-1fe2-c01d-621e-9fbf485a2f68","usePageEntries":true,"usePageUrl":"providers"}]},"url":"providers","usePageEntries":false,"subActiveOpt":true},{"id":"beb37e81-0c20-2c86-d537-4305c4376bd5","label":"DI Decorators","sub":{"items":[{"id":"8f8468eb-c688-27d0-7efc-d86a7d11bb52","label":"@Inject","url":"inject"},{"id":"55ed4b14-b3c7-f948-13e9-ede98c9c20bb","label":"@Optional","url":"optional"},{"id":"a6799a8e-0ba9-3a32-b1bb-84fea7513cb7","label":"@Self","url":"self"},{"id":"7eeab96d-5b92-0468-1114-cfdd60a26e0a","label":"@SkipSelf","url":"skip-self"},{"id":"41affb62-3a2e-d78c-41c0-b214d46eebb2","label":"@Host","url":"host"}]},"url":"","asGroup":false}]},"url":"dependency-injection","asGroup":true},{"id":"77c0d874-262d-0b3e-82f3-0ef11d45ceb9","label":"NgZone","url":"ng-zone","asGroup":false,"sub":{"items":[{"id":"6e73bc6f-aebe-98b1-158d-c8eedf625325","usePageEntries":true,"usePageUrl":"ng-zone"}]},"subActiveOpt":true,"separatedFromTop":true},{"id":"ace0bfb1-6f47-922f-5f16-6d0312fa3906","label":"Renderer2","url":"renderer2","sub":{"items":[{"id":"985071dd-44cd-24c3-ac6d-67233510fb9f","usePageEntries":true,"usePageUrl":"renderer2"}]},"subActiveOpt":true},{"id":"0e630c23-5dce-b431-3ddd-4ec3bed3654e","label":"DomSanitizer","url":"dom-sanitizer","sub":{"items":[{"id":"8558f7f5-8c58-beb7-7e0e-0a6c7ac52d4e","usePageEntries":true,"usePageUrl":"dom-sanitizer"}]},"subActiveOpt":true}]},"pages":[{"id":"51099a75-5bb4-1f83-6f42-a735b8518002","entries":[{"id":"063819d6-b465-e744-1397-c800ac6d8c22","type":"text","text":"<p>This easy Angular reference for developers describes core concepts, decorators and services.</p>\\n<h2 id=\\"additional-information\\">Additional information</h2>\\n<p>Example of hints and tutorials links. You can switch off these panels in the sidebar.</p>\\n"},{"id":"8af43abe-c886-aa78-0c31-295c78628e18","type":"hint","text":"Hint with additional explanation."},{"id":"cfd0c662-be08-b613-f37a-d761d1444560","type":"tutorials","links":[{"label":"Angular Quick Start","url":"https://angular.io/guide/quickstart","lang":"en"}]},{"id":"54f2f684-1f4e-a058-6e62-322fb3b48179","type":"text","text":"<h2 id=\\"early-version\\">Early version</h2>\\n<p>Currently ngrefs.com in active development. Thank you for understanding.</p>\\n"}],"title":"Introduction","url":"intro"},{"id":"ccaf5030-c736-5e61-c835-e0f17f0a6dd8","entries":[{"id":"c15ec329-010f-643c-8d57-d5ffc7598a6e","type":"text","text":"<p><code>NgModule</code> configures the injector and the compiler and help organize related things together.</p>\\n"},{"id":"c9ef151e-23f6-efd2-eb5d-cc514b755b43","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n<p>The CLI generates the following basic app module when creating a new app.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@NgModule</span>({\\n  declarations: [\\n    AppComponent,\\n    ItemDirective\\n  ],\\n  imports: [\\n    BrowserModule,\\n    FormsModule,\\n    HttpClientModule\\n  ],\\n  providers: [],\\n  bootstrap: [AppComponent]\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppModule { }</code></pre>\\n"},{"id":"9628f991-b4c5-ca7b-c35f-a4d2f1e70f0a","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"781ac1ae-5d63-1dfc-3dc4-a67ee2f66e8c","type":"toc"},{"id":"c7f2f310-b21d-7921-c19f-44ee29171237","type":"interface-option","head":"bootstrap","description":"The set of components that are bootstrapped when\\nthis module is bootstrapped. The components listed here\\nare automatically added to `entryComponents`.","name":"bootstrap","headId":"bootstrap","interface":"bootstrap?: Array<Type<any>|any[]>","showAdditional":false},{"id":"edeeb718-336e-7723-c2bd-d54e00df6945","type":"interface-option","head":"declarations","description":"The set of components, directives, and pipes (declarables) that belong to this module.","additional":"The set of selectors that are available to a template include those declared here, and\\nthose that are exported from imported NgModules.\\n\\n#### Example\\n\\nThe following example allows the CommonModule to use the `NgFor`\\ndirective.\\n\\n```typescript\\n@NgModule({\\n  declarations: [NgFor]\\n})\\nclass CommonModule {\\n}\\n```","name":"declarations","headId":"declarations","interface":"declarations?: Array<Type<any>|any[]>","showAdditional":true},{"id":"015410e5-500f-e098-2b3f-6ed45461f7a1","type":"interface-option","head":"entryComponents","description":"The set of components to compile when this `NgModule` is defined,\\nso that they can be dynamically loaded into the view.","additional":"For each component listed here, Angular creates a `ComponentFactory`\\nand stores it in the `ComponentFactoryResolver`.\\n\\nAngular automatically adds components in the module\'s bootstrap\\nand route definitions into the `entryComponents` list. Use this\\noption to add components that are bootstrapped\\nusing one of the imperative techniques, such as `ViewContainerRef.createComponent()` or with `ngComponentOutlet` directive.","name":"entryComponents","headId":"entryComponents","interface":"entryComponents?: Array<Type<any>|any[]>","showAdditional":true},{"id":"471fcd87-133b-198f-4d55-44b08a098054","type":"interface-option","head":"exports","description":"The set of components, directives, and pipes declared in this\\nNgModule that can be used in the template of any component that is part of an\\nNgModule that imports this NgModule. Exported declarations are the module\'s public API.","additional":"A declarable belongs to one and only one `NgModule`.\\nA module can list another module among its exports, in which case all of that module\'s\\npublic declaration are exported.\\n\\nDeclarations are private by default.\\nIf this `ModuleA` does not export `UserComponent`, then only the components within this\\n`ModuleA` can use `UserComponent`.\\n\\n`ModuleA` can import `ModuleB` and also export it, making exports from `ModuleB`\\navailable to an `NgModule` that imports `ModuleA`.\\n\\n#### Example\\n\\nThe following example exports the `NgFor` directive from `CommonModule`.\\n\\n```javascript\\n@NgModule({\\n  exports: [NgFor]\\n})\\nclass CommonModule {\\n}\\n```","name":"exports","headId":"exports","interface":"exports?: Array<Type<any>|any[]>","showAdditional":true},{"id":"362b2e59-856c-d76f-a690-3d4dd64ceefb","type":"interface-option","head":"id","description":"A name or path that uniquely identifies this `NgModule` in `getModuleFactory`.\\nIf left `undefined`, the `NgModule` is not registered with `getModuleFactory`.","name":"id","headId":"id","interface":"id?: string","showAdditional":false},{"id":"9976b0cc-11cb-40eb-774d-4c3510563ab1","type":"interface-option","head":"imports","description":"The set of NgModules whose exported declarables are available to templates in this module.","additional":"A template can use exported declarables from any\\nimported module, including those from modules that are imported indirectly\\nand re-exported.\\nFor example, `ModuleA` imports `ModuleB`, and also exports\\nit, which makes the declarables from `ModuleB` available\\nwherever `ModuleA` is imported.\\n\\n#### Example\\n\\nThe following example allows MainModule to use anthing exported by\\n`CommonModule`:\\n\\n```typescript\\n@NgModule({\\n  imports: [CommonModule]\\n})\\nclass MainModule {\\n}\\n```","name":"imports","headId":"imports","interface":"imports?: Array<Type<any>|ModuleWithProviders<{}>|any[]>","showAdditional":true},{"id":"3c14087c-f5eb-ad69-235f-29afd47f28e9","type":"interface-option","head":"jit","description":"If `true`, this module will be skipped by the AOT compiler and so will always be compiled using JIT.","additional":"This exists to support future Ivy work and has no effect currently.","name":"jit","headId":"jit","interface":"jit?: true","showAdditional":true},{"id":"b20a92e0-39d4-1f12-a3fb-79abf3146da1","type":"interface-option","head":"providers","description":"The set of injectable objects that are available in the injector of this module.","additional":"Dependencies whose providers are listed here become available for injection\\ninto any component, directive, pipe or service that is a child of this injector.\\nThe `NgModule` used for bootstrapping uses the root injector, and can provide dependencies\\nto any part of the app.\\n\\n#### Example\\n\\nThe following example defines a class that is injected in\\nthe `HelloWorld` `NgModule`:\\n\\n```typescript\\nclass Greeter {\\n   greet(name:string) {\\n     return \'Hello \' + name + \'!\';\\n   }\\n}\\n\\n@NgModule({\\n  providers: [\\n    Greeter\\n  ]\\n})\\nclass HelloWorld {\\n  greeter:Greeter;\\n\\n  constructor(greeter:Greeter) {\\n    this.greeter = greeter;\\n  }\\n}\\n```","name":"providers","headId":"providers","interface":"providers?: Provider[]","showAdditional":true},{"id":"5bc1b768-90bb-de1d-4854-60971a205e83","type":"interface-option","head":"schemas","description":"The set of schemas that declare elements to be allowed in the `NgModule`.\\nElements and properties that are neither Angular components nor directives\\nmust be declared in a schema.","additional":"Allowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.\\n\\nWhen using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA`\\nyou must ensure that allowed elements and properties securely escape inputs.","name":"schemas","headId":"schemas","interface":"schemas?: Array<SchemaMetadata|any[]>","showAdditional":true}],"title":"@NgModule","url":"ng-module","generationType":"interface-options","generationFile":"core/src/metadata/ng_module.ts","generationName":"NgModule","generationStartLine":116,"generationEndLine":304},{"id":"d4f9ba36-36cf-8a0f-4682-5e852b1883e9","entries":[{"id":"163e8186-c1dd-abf7-5186-78a60f21db85","type":"text","text":"<p>Marks a class as an Angular directive. You can define your own directives to attach custom behavior to elements in the DOM. The options provide configuration metadata that determines how the directive should be processed, instantiated and used at runtime.</p>\\n"},{"id":"a7d0976e-6fb2-a421-6164-5f981137df25","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n<p>To define a directive, mark the class with the decorator and provide metadata.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">import</span> {Directive} <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;@angular/core&#x27;</span>;\\n\\n<span class=\\"hljs-meta\\">@Directive</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;my-directive&#x27;</span>,\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyDirective {\\n...\\n}</code></pre>\\n"},{"id":"7349f1c2-02cd-d6a4-60e0-7bbfeef0f1e7","type":"text","text":"<h4 id=\\"declaring-directives\\">Declaring directives</h4>\\n<p>Directives are declarables. </p>\\n<p>They must be declared by an <code>NgModule</code> in order to be usable in an app. A directive must belong to exactly one <code>NgModule</code>.</p>\\n<pre><code class=\\"language-typescript\\">declarations: [\\n AppComponent,\\n MyDirective\\n],</code></pre>\\n"},{"id":"0323f128-2682-c264-7897-59efd074b265","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"651c2ca0-7fee-e25c-0a39-31e01d91d37c","type":"toc"},{"id":"080aa22d-0d63-9b90-39bb-d64fac505229","type":"interface-option","head":"exportAs","description":"The name or names that can be used in the template to assign this directive to a variable. For multiple names, use a comma-separated string.","name":"exportAs","headId":"exportAs","interface":"exportAs?: string"},{"id":"115b9a2c-37c0-9ab8-1dc8-f9812d5e5b70","type":"interface-option","head":"host","description":"Maps class properties to host element bindings for properties, attributes, and events, using a set of key-value pairs.","name":"host","headId":"host","interface":"host?: {[key: string]: string}","showAdditional":true,"additional":"Angular automatically checks host property bindings during change detection.\\nIf a binding changes, Angular updates the directive\'s host element.\\n\\nWhen the key is a property of the host element, the property value is\\nthe propagated to the specified DOM property.\\n\\nWhen the key is a static attribute in the DOM, the attribute value\\nis propagated to the specified property in the host element.\\n\\nFor event handling:\\n- The key is the DOM event that the directive listens to.\\nTo listen to global events, add the target to the event name.\\nThe target can be `window`, `document` or `body`.\\n- The value is the statement to execute when the event occurs. If the\\nstatement evalueates to `false`, then `preventDefault` is applied on the DOM\\nevent. A handler method can refer to the `$event` local variable."},{"id":"f9dfac0d-b6d6-9714-fc87-5edfd540ca0c","type":"interface-option","head":"inputs","description":"Enumerates the set of data-bound input properties for a directive.","name":"inputs","headId":"inputs","interface":"inputs?: string[]","showAdditional":true,"additional":"Angular automatically updates input properties during change detection.\\nThe `inputs` property defines a set of `directiveProperty` to `bindingProperty`\\nconfiguration:\\n\\n- `directiveProperty` specifies the component property where the value is written.\\n- `bindingProperty` specifies the DOM property where the value is read from.\\n\\nWhen `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.\\n@usageNotes\\n\\n#### Example\\n\\nThe following example creates a component with two data-bound properties.\\n\\n```typescript\\n@Component({\\n  selector: \'bank-account\',\\n  inputs: [\'bankName\', \'id: account-id\'],\\n  template: `\\n    Bank Name: {{bankName}}\\n    Account Id: {{id}}\\n  `\\n})\\nclass BankAccount {\\n  bankName: string;\\n  id: string;\\n\\n```"},{"id":"6def4d1f-da76-21bf-fc2f-ce9b1382e34c","type":"interface-option","head":"jit","description":"If true, this directive/component will be skipped by the AOT compiler and so will always be compiled using JIT.","name":"jit","headId":"jit","interface":"jit?: true","showAdditional":true,"additional":"This exists to support future Ivy work and has no effect currently."},{"id":"c93f90ab-ba58-a4eb-98ce-067d48b27fc6","type":"interface-option","head":"outputs","description":"The set of event-bound output properties.\\nWhen an output property emits an event, an event handler attached\\nto that event in the template is invoked.","name":"outputs","headId":"outputs","interface":"outputs?: string[]","showAdditional":true,"additional":"Each output property maps a `directiveProperty` to a `bindingProperty`:\\n- `directiveProperty` specifies the component property that emits events.\\n- `bindingProperty` specifies the HTML attribute the event handler is attached to."},{"id":"18963a17-06b2-58ed-8510-c46f3f851d1d","type":"interface-option","head":"providers","description":"Configures the injector of this directive or component with a token that maps to a provider of a dependency.","name":"providers","headId":"providers","interface":"providers?: Provider[]"},{"id":"16e75109-a5aa-e27b-b108-0852ba75211a","type":"interface-option","head":"queries","description":"Configures the queries that will be injected into the directive.","name":"queries","headId":"queries","interface":"queries?: {[key: string]: any}","showAdditional":true,"additional":"Content queries are set before the `ngAfterContentInit` callback is called.\\nView queries are set before the `ngAfterViewInit` callback is called."},{"id":"dae4e9cb-d1c6-4953-013b-71b35c1d5e53","type":"interface-option","head":"selector","description":"The CSS selector that identifies this directive in a template\\nand triggers instantiation of the directive.","name":"selector","headId":"selector","interface":"selector?: string","showAdditional":true,"additional":"Declare as one of the following:\\n\\n- `element-name`: Select by element name.\\n- `.class`: Select by class name.\\n- `[attribute]`: Select by attribute name.\\n- `[attribute=value]`: Select by attribute name and value.\\n- `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.\\n- `selector1, selector2`: Select if either `selector1` or `selector2` matches.\\n\\nAngular only allows directives to apply on CSS selectors that do not cross\\nelement boundaries.\\n\\nFor the following template HTML, a directive with an `input[type=text]` selector,\\nwould be instantiated only on the `<input type=\\"text\\">` element.\\n\\n```html\\n<form>\\n  <input type=\\"text\\">\\n  <input type=\\"radio\\">\\n<form>\\n```"}],"title":"@Directive","url":"directive","generationType":"interface-options","generationFile":"core/src/metadata/directives.ts","generationName":"Directive","generationStartLine":85,"generationEndLine":291},{"id":"f5bc0217-5164-3c62-bd92-96eb37e54095","entries":[{"id":"bdc4561c-3525-ef10-0a2f-33a01e725549","type":"text","text":"<p>Components are the most basic UI building block of an Angular app.</p>\\n<p>Angular components are a subset of directives, always associated with a template. Unlike other directives, only one component can be instantiated per an element in a template.</p>\\n<p>A component must belong to an <code>NgModule</code> in order for it to be available to another component or application. To make it a member of an <code>NgModule</code>, list it in the <code>declarations</code> field of the <code>@NgModule</code> metadata.</p>\\n"},{"id":"e8df2a71-8021-29d9-435f-4561faccee91","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">import</span> {Component} <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;@angular/core&#x27;</span>;\\n\\n<span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;my-component&#x27;</span>,\\n  template: <span class=\\"hljs-string\\">`Hello there!`</span>\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyComponent {\\n...\\n}</code></pre>\\n"},{"id":"2b18c05a-021c-7b35-4cc7-1e8287a3bf68","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"46fe9e1c-ce52-251d-55bf-05ba0f370330","type":"toc"},{"id":"e6c57abf-be6f-df38-c374-ada8d32a7b18","type":"text","text":"<h3 id=\\"inherited-from-directive-decorator\\">Inherited from Directive decorator</h3>\\n<ul>\\n<li><a href=\\"../directive#selector\\">selector</a></li>\\n<li><a href=\\"../directive#inputs\\">inputs</a></li>\\n<li><a href=\\"../directive#outputs\\">outputs</a></li>\\n<li><a href=\\"../directive#providers\\">providers</a></li>\\n<li><a href=\\"../directive#exportAs\\">exportAs</a></li>\\n<li><a href=\\"../directive#queries\\">queries</a></li>\\n<li><a href=\\"../directive#jit\\">jit</a></li>\\n<li><a href=\\"../directive#host\\">host</a></li>\\n</ul>\\n"},{"id":"8f484994-a9b8-d657-3991-48e96145c4fb","type":"interface-option","head":"animations","description":"One or more animation `trigger()` calls, containing `state()` and `transition()` definitions.","name":"animations","headId":"animations","interface":"animations?: any[]"},{"id":"5a2e2f62-10f7-a115-bea3-f2909ef38100","type":"interface-option","head":"changeDetection","description":"The change-detection strategy to use for this component.","name":"changeDetection","headId":"changeDetection","interface":"changeDetection?: ChangeDetectionStrategy","showAdditional":true,"additional":"When a component is instantiated, Angular creates a change detector,\\nwhich is responsible for propagating the component\'s bindings.\\nThe strategy is one of:\\n- `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).\\n- `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`."},{"id":"0461ddba-ec08-2c79-236d-12bf76ef4c55","type":"interface-option","head":"encapsulation","description":"An encapsulation policy for the template and CSS styles. One of:\\n- `ViewEncapsulation.Native`: Use shadow roots. This works\\nonly if natively available on the platform.\\n- `ViewEncapsulation.Emulated`: Use shimmed CSS that\\nemulates the native behavior.\\n- `ViewEncapsulation.None`: Use global CSS without any\\nencapsulation.","name":"encapsulation","headId":"encapsulation","interface":"encapsulation?: ViewEncapsulation","showAdditional":true,"additional":"If not supplied, the value is taken from `CompilerOptions`. The default compiler option is\\n`ViewEncapsulation.Emulated`.\\n\\nIf the policy is set to `ViewEncapsulation.Emulated` and the component has no `styles`\\nor `styleUrls` specified, the policy is automatically switched to `ViewEncapsulation.None`."},{"id":"6e7020e1-df9e-e900-8e83-fd2b1804c864","type":"interface-option","head":"entryComponents","description":"A set of components that should be compiled along with this component. For each component listed here, Angular creates a `ComponentFactory` and stores it in the `ComponentFactoryResolver`.","name":"entryComponents","headId":"entryComponents","interface":"entryComponents?: Array<Type<any>|any[]>"},{"id":"dcfb685a-88d5-be19-9be2-193d8b4df2d2","type":"interface-option","head":"interpolation","description":"Overrides the default encapsulation start and end delimiters (`{{` and `}}`)","name":"interpolation","headId":"interpolation","interface":"interpolation?: [string, string]"},{"id":"cf187f7c-0925-1e5f-080d-efd340af590b","type":"interface-option","head":"moduleId","description":"The module ID of the module that contains the component.\\nThe component must be able to resolve relative URLs for templates and styles.\\nSystemJS exposes the `__moduleName` variable within each module.\\nIn CommonJS, this can  be set to `module.id`.","name":"moduleId","headId":"moduleId","interface":"moduleId?: string"},{"id":"bbb4e7e7-2a41-d75d-c0f7-b2d948645c42","type":"interface-option","head":"preserveWhitespaces","description":"True to preserve or false to remove potentially superfluous whitespace characters from the compiled template. Whitespace characters are those matching the `\\\\s` character class in JavaScript regular expressions. Default is false, unless overridden in compiler options.","name":"preserveWhitespaces","headId":"preserveWhitespaces","interface":"preserveWhitespaces?: boolean"},{"id":"68383538-a266-499e-f57d-70dd8c77df11","type":"interface-option","head":"styleUrls","description":"One or more URLs for files containing CSS stylesheets to use in this component.","name":"styleUrls","headId":"styleUrls","interface":"styleUrls?: string[]"},{"id":"37c84ce9-1f41-1302-86a6-4d95508f1d14","type":"interface-option","head":"styles","description":"One or more inline CSS stylesheets to use in this component.","name":"styles","headId":"styles","interface":"styles?: string[]"},{"id":"3f3a16ab-2b6d-7a1d-d887-0632d01c09ca","type":"interface-option","head":"template","description":"An inline template for an Angular component. If provided, do not supply a template file using `templateUrl`.","name":"template","headId":"template","interface":"template?: string"},{"id":"017e3c7c-8bd3-b8c0-7516-a04251ba773e","type":"interface-option","head":"templateUrl","description":"The URL of a template file for an Angular component. If provided, do not supply an inline template using `template`.","name":"templateUrl","headId":"templateUrl","interface":"templateUrl?: string"},{"id":"4d988fea-6907-47e9-a636-b9f080b770fc","type":"interface-option","head":"viewProviders","description":"Defines the set of injectable objects that are visible to its view DOM children.","name":"viewProviders","headId":"viewProviders","interface":"viewProviders?: Provider[]"}],"title":"@Component","url":"component","generationType":"interface-options","generationFile":"core/src/metadata/directives.ts","generationName":"Component","generationStartLine":456,"generationEndLine":555},{"id":"f626ff88-c7f9-2188-e343-0a177fa34f4e","entries":[{"id":"828f8cf2-ebaf-e873-c2f9-1374a324e431","type":"text","text":"<p>A pipe takes in data as input and transforms it to a desired output.</p>\\n"},{"id":"be515057-0344-e79c-7fd4-df2a177d50b0","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n<p>Here&#39;s a custom pipe that doubles a value:</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">import</span> { Pipe, PipeTransform } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;@angular/core&#x27;</span>;\\n\\n<span class=\\"hljs-meta\\">@Pipe</span>({name: <span class=\\"hljs-string\\">&#x27;double&#x27;</span>})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> DoublePipe <span class=\\"hljs-keyword\\">implements</span> PipeTransform {\\n  transform(value: <span class=\\"hljs-built_in\\">number</span>): <span class=\\"hljs-built_in\\">number</span> {\\n    <span class=\\"hljs-keyword\\">return</span> value * <span class=\\"hljs-number\\">2</span>;\\n  }\\n}</code></pre>\\n<p>Usage:</p>\\n<pre><code class=\\"language-html\\">{{ value | double }} </code></pre>\\n"},{"id":"e9b86f84-5908-050e-5bcb-59c6ca68a95b","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"598e8ac2-3510-1d1e-16af-7b31caa5e767","type":"interface-option","head":"name","description":"The pipe name to use in template bindings.","name":"name","headId":"name","interface":"name: string"},{"id":"db9ac6ce-248f-03c9-ae0e-d6aa27c7fc05","type":"interface-option","head":"pure","description":"When true, the pipe is pure, meaning that the `transform()` method is invoked only when its input arguments change. Pipes are pure by default.","name":"pure","headId":"pure","interface":"pure?: boolean","showAdditional":true,"additional":"If the pipe has internal state (that is, the result depends on state other than its arguments), set pure to false. In this case, the pipe is invoked on each change-detection cycle, even if the arguments have not changed."}],"title":"@Pipe","url":"pipe","generationType":"interface-options","generationFile":"core/src/metadata/directives.ts","generationName":"Pipe","generationStartLine":608,"generationEndLine":627},{"id":"0f7b7b16-a596-37ab-2c4e-aea6a01c4b45","entries":[{"id":"8757331f-2f7c-395d-b4ed-216fa2047c30","type":"text","text":"<p>The <code>@Injectable</code> decorator identifies services and other classes that are intended to be injected. It can also be used to configure a provider for those services.</p>\\n"},{"id":"4795a5cd-70ea-1069-74c4-fda88b8273ee","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">import</span> { Injectable } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;@angular/core&#x27;</span>;\\n\\n<span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyService {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"></span>) { }\\n}</code></pre>\\n"},{"id":"be36f026-7385-d967-18e2-e04f7ad76baf","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"b36602b0-11bb-c285-6a2f-679f3590b674","type":"interface-option","head":"providedIn","description":"Tells Angular that the root injector is responsible for creating an instance of the service (by invoking its constructor) and making it available across the application.","name":"providedIn","headId":"providedIn","interface":"providedIn?: Type<any>|\'root\'|\'platform\'|\'any\'|null","showAdditional":true,"additional":"Sometimes it\'s not desirable to have a service always be provided in the application root injector. Perhaps users should explicitly opt-in to using the service, or the service should be provided in a lazily-loaded context. In this case, the provider should be associated with a specific `@NgModule` class, and will be used by whichever injector includes that module."}],"title":"@Injectable","url":"injectable","generationType":"interface-options","generationFile":"core/src/di/injectable.ts","generationName":"Injectable","generationStartLine":65,"generationEndLine":77},{"id":"84169e02-37a1-9bd6-5960-a1303455d23a","entries":[{"id":"222c1064-c3ac-e412-0a6c-72d25f1be06a","type":"text","text":"<p>An Input property is a settable property annotated with an <code>@Input</code> decorator. Values flow into the property when it is data bound with a property binding.</p>\\n"},{"id":"d5119ee3-5dde-724d-837f-505af054d3ae","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Input</span>() test: <span class=\\"hljs-built_in\\">any</span>;</code></pre>\\n<p>Alternatively, you can identify members in the inputs array of the directive metadata:</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({\\n  inputs: [<span class=\\"hljs-string\\">&#x27;test&#x27;</span>],\\n})</code></pre>\\n"},{"id":"c9c524b5-e83f-e54c-93a6-d09c2e76bcaf","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"95aa7a65-44c7-4573-b2b8-139429f3b764","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Input</span>(propertyBindingName: <span class=\\"hljs-built_in\\">string</span>)</code></pre>\\n"},{"id":"3114a9ac-ac4e-705f-ad14-b097571061a3","type":"interface-option","head":"bindingPropertyName","description":"You can supply an optional name to use in templates when the\\ncomponent is instantiated, that maps to the\\nname of the bound property. By default, the original\\nname of the bound property is used for input binding.","name":"bindingPropertyName","headId":"bindingPropertyName","interface":"bindingPropertyName?: string","showAdditional":true,"additional":"The following example creates a component with two input properties,\\none of which is given a special binding name.\\n\\n```typescript\\n@Component({\\n  selector: \'bank-account\',\\n  template: `\\n    Bank Name: {{bankName}}\\n    Account Id: {{id}}\\n  `\\n})\\nclass BankAccount {\\n  // This property is bound using its original name.\\n  @Input() bankName: string;\\n  // this property value is bound to a different property name\\n  // when this component is instantiated in a template.\\n  @Input(\'account-id\') id: string;\\n\\n  // this property is not bound, and is not automatically updated by Angular\\n  normalizedBankName: string;\\n}\\n\\n@Component({\\n  selector: \'app\',\\n  template: `\\n    <bank-account bankName=\\"RBC\\" account-id=\\"4747\\"></bank-account>\\n  `\\n})\\nclass App {}\\n```"}],"title":"@Input","url":"input","generationType":"interface-options","generationFile":"core/src/metadata/directives.ts","generationName":"Input","generationStartLine":696,"generationEndLine":701},{"id":"88bd94fe-05cc-f21d-2b49-9019162907ce","entries":[{"id":"bf1991fa-d74b-d557-b009-8572493228f7","type":"text","text":"<p>An Output property is an observable property annotated with an <code>@Output</code> decorator. The property almost always returns an Angular <code>EventEmitter</code>. Values flow out of the component as events bound with an event binding.</p>\\n"},{"id":"69361b5b-db4e-4989-94b2-7eb282058124","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Output</span>() testEvent = <span class=\\"hljs-keyword\\">new</span> EventEmitter&lt;<span class=\\"hljs-built_in\\">any</span>&gt;();</code></pre>\\n<p>Alternatively, you can identify members in the outputs array of the directive metadata, as in this example:</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({\\n  outputs: [<span class=\\"hljs-string\\">&#x27;testEvent&#x27;</span>],\\n})</code></pre>\\n"},{"id":"66bf3fcd-8edd-f9a8-80b8-ff8443ffdc86","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"05558fa0-bbb9-ff70-6dc9-47349e535ec5","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Output</span>(propertyBindingName: <span class=\\"hljs-built_in\\">string</span>)</code></pre>\\n"},{"id":"9171ace9-3ac2-1c30-ca86-d2fc16b72714","type":"interface-option","head":"bindingPropertyName","description":"You can supply an optional name to use in templates when the\\ncomponent is instantiated, that maps to the\\nname of the bound property. By default, the original\\nname of the bound property is used for output binding.","name":"bindingPropertyName","headId":"bindingPropertyName","interface":"bindingPropertyName?: string","showAdditional":true,"additional":"The following example creates a component with two output properties,\\none of which is given a special binding name.\\n\\n```typescript\\n@Component({\\n  selector: \'output-test\',\\n  ...\\n})\\nclass BankAccount {\\n  // This property is bound using its original name.\\n  @Output() test = new EventEmitter();\\n  // this property value is bound to a different property name\\n  // when this component is instantiated in a template.\\n  @Input(\'test-2\') test2 = new EventEmitter();\\n}\\n\\n@Component({\\n  selector: \'app\',\\n  template: `\\n    <output-test (test)=\\"...\\" (test-2)=\\"...\\"></output-test>\\n  `\\n})\\nclass App {}\\n```"}],"title":"@Output","url":"output","generationType":"interface-options","generationFile":"core/src/metadata/directives.ts","generationName":"Output","generationStartLine":741,"generationEndLine":746},{"id":"5a891eec-d6ae-8611-539d-ff0bf398a30d","entries":[{"id":"2f7e3baa-0c13-4490-0216-0008320943ed","type":"text","text":"<p>Binds a host element property to a directive/component property.</p>\\n"},{"id":"c14f9cef-d9c9-5fff-2301-52a444209717","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"3fbe5bee-ffcb-484d-8616-e55bfc3c9a1c","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  <span class=\\"hljs-meta\\">@HostBinding</span>(<span class=\\"hljs-string\\">&#x27;class.valid&#x27;</span>) isValid;\\n}</code></pre>\\n<p>Or use getter for binding:</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  <span class=\\"hljs-meta\\">@HostBinding</span>(<span class=\\"hljs-string\\">&#x27;class.error&#x27;</span>) get isError() {\\n    ...\\n  }\\n}</code></pre>\\n"},{"id":"b62ab6e4-9fc6-e622-9610-15e1a16207c5","type":"tutorials","links":[{"label":"Using @HostBinding and @HostListener in Custom Angular Directives","url":"https://alligator.io/angular/hostbinding-hostlistener/","lang":"en"}]},{"id":"35abe6f6-19c1-0686-fe11-d37b443745e5","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"b45f6d63-f03b-6d5a-8cb2-d7ff75b8b150","type":"interface-option","name":"hostPropertyName","head":"hostPropertyName","headId":"hostPropertyName","interface":"hostPropertyName?: string","description":"Property name."}],"title":"@HostBinding","url":"host-binding","generationType":"interface-options","generationFile":"core/src/metadata/directives.ts","generationName":"HostBinding","generationStartLine":801,"generationEndLine":806},{"id":"1f55b67c-8bec-f0d9-f22a-438bc1618746","entries":[{"id":"a13797a2-b850-f57b-3697-bb593ad18c9c","type":"text","text":"<p>Binds a CSS event to a host listener and supplies configuration metadata. Angular invokes the supplied handler method when the host element emits the specified event, and updates the bound element with the result. </p>\\n<p>If the handler method returns false, applies <code>preventDefault</code> on the bound element.</p>\\n"},{"id":"ff52720b-2c54-3f7f-4c49-13cb6d7dfc77","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"953a2992-07e9-304d-3d7a-d69e3382bbf4","type":"text","text":"<p>The following example declares a directive that attaches a click listener to a button and counts clicks.</p>\\n"},{"id":"e030634c-f88d-951c-0e98-eacdc7797e80","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Directive</span>({selector: <span class=\\"hljs-string\\">&#x27;button[counting]&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> CountClicks {\\n  numberOfClicks = <span class=\\"hljs-number\\">0</span>;\\n\\n  <span class=\\"hljs-meta\\">@HostListener</span>(<span class=\\"hljs-string\\">&#x27;click&#x27;</span>, [<span class=\\"hljs-string\\">&#x27;$event.target&#x27;</span>])\\n  onClick(btn) {\\n    <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">&#x27;button&#x27;</span>, btn, <span class=\\"hljs-string\\">&#x27;number of clicks:&#x27;</span>, <span class=\\"hljs-built_in\\">this</span>.numberOfClicks++);\\n }\\n}\\n\\n<span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;app&#x27;</span>,\\n  template: <span class=\\"hljs-string\\">&#x27;&lt;button counting&gt;Increment&lt;/button&gt;&#x27;</span>,\\n})\\n<span class=\\"hljs-keyword\\">class</span> App {}</code></pre>\\n"},{"id":"44d81a12-2b66-60c8-e0c2-69850132530e","type":"tutorials","links":[{"label":"Using @HostBinding and @HostListener in Custom Angular Directives","url":"https://alligator.io/angular/hostbinding-hostlistener/","lang":"en"}]},{"id":"8dd26fa8-f55c-70d0-e3a7-1b728903cee4","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"e0b0fba6-053a-30f4-b6a5-165ae353f15f","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@HostListener</span>(eventName: <span class=\\"hljs-built_in\\">string</span>, args: <span class=\\"hljs-built_in\\">string</span>[])</code></pre>\\n"},{"id":"8c2e1691-5bec-50ea-d361-791210f6a6e3","type":"interface-option","head":"eventName","description":"The JavaScript event to listen for.","name":"eventName","headId":"eventName","interface":"eventName?: string"},{"id":"33be5cb4-eb17-25be-52ea-c4ba33edb10d","type":"interface-option","head":"args","description":"A set of arguments to pass to the handler method when the event occurs.","name":"args","headId":"args","interface":"args?: string[]"}],"title":"@HostListener","url":"host-listener","generationType":"interface-options","generationFile":"core/src/metadata/directives.ts","generationName":"HostListener","generationStartLine":835,"generationEndLine":844},{"id":"1328b290-53ab-ef6a-73cc-d9b0a511e1e4","entries":[{"id":"b38000f4-0072-c92f-3b07-4e7808fb2a73","type":"text","text":"<p>The <code>@Attribute</code> decorator returns the value of the specified attribute from the host.</p>\\n"},{"id":"bc6584cf-fe05-b31e-05ba-06365b0cb8ed","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@Attribute</span>(<span class=\\"hljs-string\\">&#x27;test&#x27;</span>) <span class=\\"hljs-keyword\\">public</span> test: <span class=\\"hljs-built_in\\">string</span></span>) { }\\n}</code></pre>\\n<p>Will read value from declaration:</p>\\n<pre><code class=\\"language-html\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">my-component</span> <span class=\\"hljs-attr\\">test</span>=<span class=\\"hljs-string\\">&quot;hello&quot;</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">my-component</span>&gt;</span></code></pre>\\n"},{"id":"e83b28ba-e835-e57f-95fe-99ccea9040aa","type":"tutorials","links":[{"label":"Getting to Know the @Attribute Decorator in Angular","url":"https://netbasal.com/getting-to-know-the-attribute-decorator-in-angular-4f7c9fb61243","lang":"en"}]},{"id":"819cf67f-f79f-f530-6e63-f9b5651abe7e","type":"interface-option","name":"attributeName","head":"attributeName","headId":"attributeName","interface":"attributeName?: string"}],"title":"@Attribute","url":"attribute","generationType":"interface-options","generationFile":"core/src/metadata/di.ts","generationName":"Attribute","generationStartLine":86,"generationEndLine":91},{"id":"04e30588-8dab-9d60-6615-8095ba5aa8eb","entries":[{"id":"7f8dda4f-17f5-c28b-78bf-f977511185b4","type":"text","text":"<p>You can use <code>ContentChildren</code> to get the <code>QueryList</code> of elements or directives from the content DOM. Any time a child element is added, removed, or moved, the query list will be updated, and the changes observable of the query list will emit a new value.</p>\\n<p>Content queries are set before the <code>ngAfterContentInit</code> callback is called.</p>\\n"},{"id":"1dbff7ef-42c4-003c-09df-28ea91421618","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"4a3af8ba-2a25-2bc6-e905-6f13b2ce84bb","type":"text","text":"<p>Here is a simple demonstration of how the ContentChildren decorator can be used.</p>\\n"},{"id":"686ecbd4-7e3d-a13d-a2d9-ea3b62a5d2da","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">import</span> {AfterContentInit, ContentChildren, Directive, QueryList} <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;@angular/core&#x27;</span>;\\n\\n<span class=\\"hljs-meta\\">@Directive</span>({selector: <span class=\\"hljs-string\\">&#x27;child-directive&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> ChildDirective {\\n}\\n\\n<span class=\\"hljs-meta\\">@Directive</span>({selector: <span class=\\"hljs-string\\">&#x27;someDir&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> SomeDir <span class=\\"hljs-keyword\\">implements</span> AfterContentInit {\\n  <span class=\\"hljs-meta\\">@ContentChildren</span>(ChildDirective) contentChildren: QueryList&lt;ChildDirective&gt;;\\n\\n  ngAfterContentInit() {\\n    <span class=\\"hljs-comment\\">// contentChildren is set</span>\\n  }\\n}</code></pre>\\n"},{"id":"39982c95-6437-167b-747f-55c35626cb07","type":"tutorials","links":[{"label":"Understanding ViewChildren, ContentChildren, and QueryList in Angular","url":"https://netbasal.com/understanding-viewchildren-contentchildren-and-querylist-in-angular-896b0c689f6e","lang":"en"}]},{"id":"6150e0b5-53d9-cfae-0729-12d3b2e32637","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"a158bbcb-ed4c-89c8-ee90-c23fa36520d8","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@ContentChildren</span>(\\n  selector: Type&lt;<span class=\\"hljs-built_in\\">any</span>&gt;|<span class=\\"hljs-built_in\\">Function</span>|<span class=\\"hljs-built_in\\">string</span>, \\n  opts?: {descendants?: <span class=\\"hljs-built_in\\">boolean</span>, read?: <span class=\\"hljs-built_in\\">any</span>},\\n)</code></pre>\\n"},{"id":"29daa2ca-b0d8-279a-c2ff-e4352c4eec2d","type":"interface-option","head":"selector","description":"The directive type or the name used for querying.","name":"selector","headId":"selector","interface":"selector: Type<any>|Function|string","showAdditional":true,"additional":"Supported selectors include:\\n\\n* any class with the `@Component` or `@Directive` decorator\\n* a template reference variable as a string (e.g. query `<my-component #cmp></my-component>` with `@ViewChild(\'cmp\')`)\\n* any provider defined in the child component tree of the current component (e.g. `@ViewChild(SomeService) someService: SomeService`)\\n* any provider defined through a string token (e.g. `@ViewChild(\'someToken\') someTokenVal: any`)\\n* a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef) template;`)"},{"id":"1ab2b863-8c98-d0f8-3462-9c8bcb0de5aa","type":"interface-option","head":"opts","description":"Additional options.\\n","name":"opts","headId":"opts","interface":"opts?: {descendants?: boolean, read?: any}","showAdditional":true,"additional":"* `descendants` - include only direct children or all descendants.\\n* `read` - read a different token from the queried elements."}],"title":"@ContentChildren","url":"content-children","generationType":"none","generationFile":"","generationName":""},{"id":"1a217c09-06eb-3b2b-a429-aed5cf1c9978","entries":[{"id":"a46dafc8-7a87-c4a7-0dbd-eb0b51db45ba","type":"text","text":"<p>You can use <code>ContentChild</code> to get the first element or the directive matching the selector from the content DOM. If the content DOM changes, and a new child matches the selector, the property will be updated.</p>\\n<p>Content queries are set before the <code>ngAfterContentInit</code> callback is called.</p>\\n"},{"id":"7062c7af-4fce-b1e7-48bd-a6a297501c8f","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"2baf0abe-eac2-ae3d-f3ae-b9ba30da4121","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">import</span> {AfterContentInit, ContentChild, Directive} <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;@angular/core&#x27;</span>;\\n\\n<span class=\\"hljs-meta\\">@Directive</span>({selector: <span class=\\"hljs-string\\">&#x27;child-directive&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> ChildDirective {\\n}\\n\\n<span class=\\"hljs-meta\\">@Directive</span>({selector: <span class=\\"hljs-string\\">&#x27;someDir&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> SomeDir <span class=\\"hljs-keyword\\">implements</span> AfterContentInit {\\n  <span class=\\"hljs-meta\\">@ContentChild</span>(ChildDirective, {<span class=\\"hljs-keyword\\">static</span>: <span class=\\"hljs-literal\\">true</span>}) contentChild: ChildDirective;\\n\\n  ngAfterContentInit() {\\n    <span class=\\"hljs-comment\\">// contentChild is set</span>\\n  }\\n}</code></pre>\\n"},{"id":"4096b4fb-3f1d-7fda-49f0-1ddc7df19d6a","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"645ca80b-6223-4d75-73b7-c5b0f25a86d3","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@ContentChild</span>(\\n  selector: Type&lt;<span class=\\"hljs-built_in\\">any</span>&gt;|<span class=\\"hljs-built_in\\">Function</span>|<span class=\\"hljs-built_in\\">string</span>, \\n  opts?: {read?: <span class=\\"hljs-built_in\\">any</span>, <span class=\\"hljs-keyword\\">static</span>: <span class=\\"hljs-built_in\\">boolean</span>},\\n)</code></pre>\\n"},{"id":"88c45db4-3a47-6e44-9d25-0fb0769e8ad4","type":"interface-option","head":"selector","description":"The directive type or the name used for querying.","name":"selector","headId":"selector","interface":"selector: Type<any>|Function|string","showAdditional":true,"additional":"Supported selectors include:\\n\\n* any class with the `@Component` or `@Directive` decorator\\n* a template reference variable as a string (e.g. query `<my-component #cmp></my-component>` with `@ViewChild(\'cmp\')`)\\n* any provider defined in the child component tree of the current component (e.g. `@ViewChild(SomeService) someService: SomeService`)\\n* any provider defined through a string token (e.g. `@ViewChild(\'someToken\') someTokenVal: any`)\\n* a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef) template;`)"},{"id":"440ff0d3-5f39-a6cd-1392-4be2dd460239","type":"interface-option","head":"opts","description":"Additional options.\\n","name":"opts","headId":"opts","interface":"opts?: {read?: any}","showAdditional":true,"additional":"* `read` - read a different token from the queried element.\\n* `static` - `true` to resolve query results before change detection runs, `false` to resolve after change detection.","tutorialsEntry":{"id":"9e2feee8-2284-5289-6dd3-e5714dd9255c","type":"tutorials","links":[{"url":"https://www.thecodecampus.de/blog/angular-viewchild-static-property-in-ng8/","label":"Angular ViewChild \u2013 static property in ng8"}]}}],"title":"@ContentChild","url":"content-child"},{"id":"dca50057-6b53-5c5e-6aa5-3682bb1a6e51","entries":[{"id":"a0c607c7-9461-18d8-7eba-4d588f49e3cb","type":"text","text":"<p>You can use <code>ViewChildren</code> to get the <code>QueryList</code> of elements or directives from the view DOM. Any time a child element is added, removed, or moved, the query list will be updated, and the changes observable of the query list will emit a new value.</p>\\n<p>View queries are set before the <code>ngAfterViewInit</code> callback is called.</p>\\n"},{"id":"5bdb7f85-8674-58f3-c364-39d9e178ad43","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"55b15e57-5ec4-aac2-ddea-a3ac0c081099","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">import</span> {AfterViewInit, Component, Directive, QueryList, ViewChildren} <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;@angular/core&#x27;</span>;\\n\\n<span class=\\"hljs-meta\\">@Directive</span>({selector: <span class=\\"hljs-string\\">&#x27;child-directive&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> ChildDirective {\\n}\\n\\n<span class=\\"hljs-meta\\">@Component</span>({selector: <span class=\\"hljs-string\\">&#x27;someCmp&#x27;</span>, templateUrl: <span class=\\"hljs-string\\">&#x27;someCmp.html&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> SomeCmp <span class=\\"hljs-keyword\\">implements</span> AfterViewInit {\\n  <span class=\\"hljs-meta\\">@ViewChildren</span>(ChildDirective) viewChildren: QueryList&lt;ChildDirective&gt;;\\n\\n  ngAfterViewInit() {\\n    <span class=\\"hljs-comment\\">// viewChildren is set</span>\\n  }\\n}</code></pre>\\n"},{"id":"418d97ff-745c-7617-978a-c449ee08c309","type":"tutorials","links":[{"label":"Understanding ViewChildren, ContentChildren, and QueryList in Angular","url":"https://netbasal.com/understanding-viewchildren-contentchildren-and-querylist-in-angular-896b0c689f6e","lang":"en"},{"lang":"en","label":"Hidden behavior of @ViewChidlren","url":"https://stackoverflow.com/a/49167289/2500707"}]},{"id":"d33c6b8d-b3fd-720c-5a8b-dd1bcc6fd505","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"156042b0-cfb0-403c-7009-175e9f188f25","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@ContentChildren</span>(\\n  selector: Type&lt;<span class=\\"hljs-built_in\\">any</span>&gt;|<span class=\\"hljs-built_in\\">Function</span>|<span class=\\"hljs-built_in\\">string</span>, \\n  opts?: {read?: <span class=\\"hljs-built_in\\">any</span>},\\n)</code></pre>\\n"},{"id":"37ec0f11-523f-f42e-ff77-4f12090c48e0","type":"interface-option","head":"selector","description":"The directive type or the name used for querying.","interface":"selector: Type<any>|Function|string","name":"selector","headId":"selector","showAdditional":true,"additional":"Supported selectors include:\\n\\n* any class with the `@Component` or `@Directive` decorator\\n* a template reference variable as a string (e.g. query `<my-component #cmp></my-component>` with `@ViewChild(\'cmp\')`)\\n* any provider defined in the child component tree of the current component (e.g. `@ViewChild(SomeService) someService: SomeService`)\\n* any provider defined through a string token (e.g. `@ViewChild(\'someToken\') someTokenVal: any`)\\n* a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef) template;`)"},{"id":"fcd72f7e-5851-c75e-fc26-feb160e85f33","type":"interface-option","head":"opts","description":"Additional options","name":"opts","headId":"opts","interface":"opts?: {read?: any}","showAdditional":true,"additional":"* `read` - read a different token from the queried elements."}],"title":"@ViewChildren","url":"view-children"},{"id":"3cfe6c81-843b-a989-51a6-0bf748ebb209","entries":[{"id":"a5debb98-d267-b1f3-df4f-7a6c830f2324","type":"text","text":"<p>Property decorator that configures a view query. The change detector looks for the first element or the directive matching the selector in the view DOM. If the view DOM changes, and a new child matches the selector, the property is updated.</p>\\n<p>View queries are set before the ngAfterViewInit callback is called.</p>\\n"},{"id":"eca4723b-689d-9d88-b760-42cc05ef8b1a","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"41a7b2e2-b3f4-6af7-f98f-740bbc5fb90e","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">import</span> {AfterViewInit, Component, Directive, ViewChild} <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">&#x27;@angular/core&#x27;</span>;\\n\\n<span class=\\"hljs-meta\\">@Directive</span>({selector: <span class=\\"hljs-string\\">&#x27;child-directive&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> ChildDirective {\\n}\\n\\n<span class=\\"hljs-meta\\">@Component</span>({selector: <span class=\\"hljs-string\\">&#x27;someCmp&#x27;</span>, templateUrl: <span class=\\"hljs-string\\">&#x27;someCmp.html&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> SomeCmp <span class=\\"hljs-keyword\\">implements</span> AfterViewInit {\\n  <span class=\\"hljs-meta\\">@ViewChild</span>(ChildDirective, {<span class=\\"hljs-keyword\\">static</span>: <span class=\\"hljs-literal\\">true</span>}) child: ChildDirective;\\n\\n  ngAfterViewInit() {\\n    <span class=\\"hljs-comment\\">// child is set</span>\\n  }\\n}</code></pre>\\n"},{"id":"0a22c14d-00f4-fedf-45e9-dc8b048f328a","type":"tutorials","links":[{"lang":"en","label":"Angular @ViewChild: In-Depth Explanation (All Features Covered)","url":"https://blog.angular-university.io/angular-viewchild/"},{"lang":"en","label":"Hidden behavior of @ViewChidlren","url":"https://stackoverflow.com/a/49167289/2500707"}]},{"id":"94a00c91-8493-ded9-c38f-b9a3336a36c3","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"7269fda0-18e2-01b8-51a7-477a5e322f53","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@ViewChild</span>(\\n  selector: Type&lt;<span class=\\"hljs-built_in\\">any</span>&gt;|<span class=\\"hljs-built_in\\">Function</span>|<span class=\\"hljs-built_in\\">string</span>, \\n  opts?: {read?: <span class=\\"hljs-built_in\\">any</span>, <span class=\\"hljs-keyword\\">static</span>: <span class=\\"hljs-built_in\\">boolean</span>},\\n)</code></pre>\\n"},{"id":"261dceec-30d4-2aea-2629-459654879900","type":"interface-option","head":"selector","description":"The directive type or the name used for querying.","name":"selector","headId":"selector","interface":"selector: Type<any>|Function|string","showAdditional":true,"additional":"Supported selectors include:\\n\\n* any class with the `@Component` or `@Directive` decorator\\n* a template reference variable as a string (e.g. query `<my-component #cmp></my-component>` with `@ViewChild(\'cmp\')`)\\n* any provider defined in the child component tree of the current component (e.g. `@ViewChild(SomeService) someService: SomeService`)\\n* any provider defined through a string token (e.g. `@ViewChild(\'someToken\') someTokenVal: any`)\\n* a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef) template;`)"},{"id":"1865105a-7051-090a-a858-4f5d567245e1","type":"interface-option","head":"opts","description":"Additional options.","name":"opts","headId":"opts","interface":"opts?: {read?: any}","showAdditional":true,"additional":"* `read` - read a different token from the queried elements.\\n* `static` - `true` to resolve query results before change detection runs.","tutorialsEntry":{"id":"b7a2c9e4-7ce3-7e2f-2769-370b4dd3bd9d","type":"tutorials","links":[{"url":"https://www.thecodecampus.de/blog/angular-viewchild-static-property-in-ng8/","label":"Angular ViewChild \u2013 static property in ng8"}]}}],"title":"@ViewChild","url":"view-child"},{"id":"92205ec1-1710-2fb5-97cb-55dc72b767cf","entries":[{"id":"b408473d-30b8-7062-9a79-1dc843966e5e","type":"text","text":"<p>Dependency Injection (DI) is a way to create objects that depend upon other objects. A Dependency Injection system supplies the dependent objects (called the dependencies) when it creates an instance of an object.</p>\\n"},{"id":"d7c8f520-2df6-cf2f-e23d-fe59a48df7bd","type":"tutorials","links":[{"label":"The Dependency Injection pattern","url":"https://angular.io/guide/dependency-injection-pattern","lang":"en"},{"label":"Angular Dependency Injection","url":"https://angular.io/guide/dependency-injection","lang":"en"},{"label":"Angular \u2014 Hierarchical Dependency Injectors","url":"https://angular.io/guide/hierarchical-dependency-injection","lang":"en"},{"label":"Angular \u2014 DI in Action","url":"https://angular.io/guide/dependency-injection-in-action","lang":"en"},{"label":"Everything you need to know about change detection in Angular","url":"https://blog.angularindepth.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f","lang":"en"}]}],"title":"Dependency Injection","url":"dependency-injection"},{"id":"2ce7e124-b64d-20f2-4396-71dc96acc65a","entries":[{"id":"bbe1a31d-bb12-02be-5993-46d221108fb9","type":"text","text":"<p>Base class for Angular Views, provides change detection functionality.\\nA change-detection tree collects all views that are to be checked for changes.\\nUse the methods to add and remove views from the tree, initiate change-detection,\\nand explicitly mark views as <code>_dirty_</code>, meaning that they have changed and need to be rerendered.</p>\\n"},{"id":"68d472ad-b9bb-cb0d-9af2-daabeff21412","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"55677ae0-b07c-bc2d-1262-bcc2f9bb1c43","type":"text","text":"<p>Manual change detection run:</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">private</span> cdr: ChangeDetectorRef</span>) {\\n  }\\n\\n  runManual() {\\n    <span class=\\"hljs-built_in\\">this</span>.cdr.detectChanges();\\n  }\\n}</code></pre>\\n"},{"id":"bdf2206c-809c-a29b-58ff-e6946cc317d5","type":"tutorials","links":[{"label":"Understanding Change Detection Strategy in Angular","url":"https://alligator.io/angular/change-detection-strategy/","lang":"en"},{"label":"Everything you need to know about change detection in Angular","url":"https://blog.angularindepth.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f","lang":"en"}]},{"id":"222c1014-8942-8b4e-bd8f-61d50c95fc5b","type":"text","text":"<h2 id=\\"methods\\">Methods</h2>\\n"},{"id":"49567c5a-44c3-7ca9-1111-ee60a7a2739b","type":"toc"},{"id":"694262ee-b1b7-8f67-97d4-5b315c10e5e0","type":"interface-option","head":"checkNoChanges","description":"Checks the change detector and its children, and throws if any changes are detected.","name":"checkNoChanges","headId":"checkNoChanges","interface":"checkNoChanges(): void","showAdditional":true,"additional":"Use in development mode to verify that running change detection doesn\'t introduce other changes."},{"id":"37e0784f-34b6-d87d-8532-d526cb27829d","type":"interface-option","head":"detach","description":"Detaches this view from the change-detection tree. A detached view is not checked until it is reattached. Use in combination with `detectChanges()` to implement local change detection checks.","name":"detach","headId":"detach","interface":"detach(): void","showAdditional":true,"additional":"Detached views are not checked during change detection runs until they are re-attached, even if they are marked as dirty."},{"id":"772b4197-9cb9-66d5-d7c6-4768af372b1f","type":"interface-option","head":"detectChanges","description":"Checks this view and its children. Use in combination with detach to implement local change detection checks.","name":"detectChanges","headId":"detectChanges","interface":"detectChanges(): void"},{"id":"b3179f90-7912-d6cb-cf8e-6045680aefa2","type":"interface-option","head":"markForCheck","description":"When a view uses the `OnPush` (checkOnce) change detection strategy, explicitly marks the view as changed so that it can be checked again.","name":"markForCheck","headId":"markForCheck","interface":"markForCheck(): void","showAdditional":true,"additional":"Components are normally marked as dirty (in need of rerendering) when inputs have changed or events have fired in the view. Call this method to ensure that a component is checked even if these triggers have not occured."},{"id":"15342f05-ffd6-71c2-fd53-00e40cbe55a6","type":"interface-option","head":"reattach","description":"Re-attaches the previously detached view to the change detection tree. Views are attached to the tree by default.","name":"reattach","headId":"reattach","interface":"reattach(): void"}],"title":"ChangeDetectorRef\\n","url":"change-detector-ref","generationType":"interface-options","generationFile":"core/src/change_detection/change_detector_ref.ts","generationName":"ChangeDetectorRef","generationStartLine":53,"generationEndLine":115},{"id":"294a9573-a0da-0e1f-e877-e417539ecdfa","entries":[{"id":"e279ad9f-a698-fb5f-372f-ea9c7bd913db","type":"text","text":"<p>Use an <code>InjectionToken</code> whenever the type you are injecting is not reified (does not have a runtime representation) such as when injecting an interface, callable type, array or parametrized type.</p>\\n<p><code>InjectionToken</code> is parameterized on <code>T</code> which is the type of object which will be returned by the <code>Injector</code>. This provides additional level of type safety.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">interface</span> MyInterface {...}\\n<span class=\\"hljs-keyword\\">var</span> myInterface = injector.get(<span class=\\"hljs-keyword\\">new</span> InjectionToken&lt;MyInterface&gt;(<span class=\\"hljs-string\\">&#x27;SomeToken&#x27;</span>));\\n<span class=\\"hljs-comment\\">// myInterface is inferred to be MyInterface.</span></code></pre>\\n"},{"id":"5357894a-927b-e192-9b2c-ed84b2221317","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"9406a90e-393b-6f00-3461-4d5cc11529c8","type":"text","text":"<p>Plain <code>InjectionToken</code>:</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">const</span> BASE_URL = <span class=\\"hljs-keyword\\">new</span> InjectionToken&lt;<span class=\\"hljs-built_in\\">string</span>&gt;(<span class=\\"hljs-string\\">&#x27;BaseUrl&#x27;</span>);\\n<span class=\\"hljs-keyword\\">const</span> injector =\\n    Injector.create({providers: [{provide: BASE_URL, useValue: <span class=\\"hljs-string\\">&#x27;http://localhost&#x27;</span>}]});\\n<span class=\\"hljs-keyword\\">const</span> url = injector.get(BASE_URL);\\n<span class=\\"hljs-comment\\">// here `url` is inferred to be `string` because `BASE_URL` is `InjectionToken&lt;string&gt;`.</span>\\nexpect(url).toBe(<span class=\\"hljs-string\\">&#x27;http://localhost&#x27;</span>);</code></pre>\\n"},{"id":"d66037ea-8163-4b52-cd31-5e2e60a13990","type":"text","text":"<p>Tree-shakable <code>InjectionToken</code>:</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> MyService {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">readonly</span> myDep: MyDep</span>) {}\\n}\\n\\n<span class=\\"hljs-keyword\\">const</span> MY_SERVICE_TOKEN = <span class=\\"hljs-keyword\\">new</span> InjectionToken&lt;MyService&gt;(<span class=\\"hljs-string\\">&#x27;Manually constructed MyService&#x27;</span>, {\\n  providedIn: <span class=\\"hljs-string\\">&#x27;root&#x27;</span>,\\n  factory: <span class=\\"hljs-function\\">() =&gt;</span> <span class=\\"hljs-keyword\\">new</span> MyService(inject(MyDep)),\\n});\\n\\n<span class=\\"hljs-keyword\\">const</span> instance = injector.get(MY_SERVICE_TOKEN);\\nexpect(instance <span class=\\"hljs-keyword\\">instanceof</span> MyService).toBeTruthy();\\nexpect(instance.myDep <span class=\\"hljs-keyword\\">instanceof</span> MyDep).toBeTruthy();</code></pre>\\n"},{"id":"6a74ff31-1cc5-cc38-60e0-62db454bad79","type":"text","text":"<h2 id=\\"costructor-parameters\\">Costructor parameters</h2>\\n"},{"id":"315c2e56-9156-2260-872f-125eb472d1c5","type":"text","text":"<pre><code class=\\"language-typescript\\">InjectionToken&lt;T&gt;(\\n  _desc: <span class=\\"hljs-built_in\\">string</span>,\\n  options?: { providedIn?: Type&lt;<span class=\\"hljs-built_in\\">any</span>&gt; | <span class=\\"hljs-string\\">&#x27;root&#x27;</span> | <span class=\\"hljs-literal\\">null</span>; factory: <span class=\\"hljs-function\\">() =&gt;</span> T; },\\n);</code></pre>\\n"},{"id":"b0120c84-6d89-532a-b080-099a9a3af8c0","type":"interface-option","head":"_desc","description":"Description.","name":"_desc","headId":"_desc","interface":"_desc: string"},{"id":"092139b0-f7f6-d91d-72d9-8b0ab887a928","type":"interface-option","head":"options","description":"Additional options.","name":"options","headId":"options","interface":"options?: {     providedIn?: Type<any> | \'root\' | null;     factory: () => T; }","showAdditional":true,"additional":"When creating an `InjectionToken`, you can optionally specify a factory function which returns (possibly by creating) a default value of the parameterized type `T`. This sets up the `InjectionToken` using this factory as a provider as if it was defined explicitly in the application\'s root injector. If the factory function, which takes zero arguments, needs to inject dependencies, it can do so using the inject function. See below for an example.\\n\\nAdditionally, if a factory is specified you can also specify the providedIn option, which overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As mentioned above, \'root\' is the default value for `providedIn`."}],"title":"InjectionToken","url":"injection-token","generationType":"none","generationFile":"","generationName":""},{"id":"56bb53be-d88a-fed8-67fc-56520800641e","entries":[{"id":"4d11223c-28ea-5353-9c52-534fb1af8c07","type":"text","text":"<p>For instance, <code>forwardRef</code> is used when the token which we need to refer to for the purposes of DI is declared, but not yet defined. It is also used when the token which we use when creating a query is not yet defined.</p>\\n"},{"id":"7ece4831-a38b-d9f5-82c8-fdc7d1222370","type":"text","text":"<pre><code class=\\"language-typescript\\">forwardRef(forwardRefFn: ForwardRefFn): Type&lt;<span class=\\"hljs-built_in\\">any</span>&gt;</code></pre>\\n"},{"id":"a95f0dd8-25e1-f92e-c007-d23c77b530d3","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"a78cbc2f-2665-39bd-b1f0-a97d685fa2ba","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> Door {\\n  lock: Lock;\\n\\n  <span class=\\"hljs-comment\\">// Door attempts to inject Lock, despite it not being defined yet.</span>\\n  <span class=\\"hljs-comment\\">// forwardRef makes this possible.</span>\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@Inject</span>(forwardRef(() =&gt; Lock)) lock: Lock</span>) { <span class=\\"hljs-built_in\\">this</span>.lock = lock; }\\n}\\n\\n<span class=\\"hljs-comment\\">// Only at this point Lock is defined.</span>\\n<span class=\\"hljs-keyword\\">class</span> Lock {}\\n\\n<span class=\\"hljs-keyword\\">const</span> injector = ReflectiveInjector.resolveAndCreate([Door, Lock]);\\n<span class=\\"hljs-keyword\\">const</span> door = injector.get(Door);\\nexpect(door <span class=\\"hljs-keyword\\">instanceof</span> Door).toBeTruthy();\\nexpect(door.lock <span class=\\"hljs-keyword\\">instanceof</span> Lock).toBeTruthy();</code></pre>\\n"}],"title":"forwardRef","url":"forward-ref"},{"id":"124df87b-a860-95a5-ed6c-3c23e07851d2","entries":[{"id":"1db16397-cbc6-27cb-aec3-546c13dca8d2","type":"text","text":"<p>Providers tell the injector how to create the service. Without a provider, the injector would not know that it is responsible for injecting the service nor be able to create the service.</p>\\n<pre><code class=\\"language-typescript\\">providers: [Logger]</code></pre>\\n<hr>\\n<p>You can configure the injector with alternative providers that can deliver an object that behaves. You could provide a substitute class. You could provide a service-like object. You could give it a provider that calls a factory function. Any of these approaches might be a good choice under the right circumstances.</p>\\n<p>What matters is that the injector has a provider to go to when it needs a service.</p>\\n"},{"id":"11558b46-5b56-f96d-6a47-cbd0176139d9","type":"toc"},{"id":"25235452-e00f-b3e8-8bad-2703bb6d464b","type":"tutorials","links":[{"label":"Angular Dependency Injection","url":"https://angular.io/guide/dependency-injection","lang":"en"}]},{"id":"61ef9a11-a29d-e041-4921-2e09284119e6","type":"text","head":"useValue","text":"<p>Sometimes it&#39;s easier to provide a ready-made object rather than ask the injector to create it from a class.</p>\\n<p>Then you register a provider with the <code>useValue</code> option:</p>\\n<pre><code class=\\"language-typescript\\">[{ \\n  provide: Config, \\n  useValue: {option1: <span class=\\"hljs-literal\\">true</span>, options2: <span class=\\"hljs-literal\\">false</span>},\\n}]</code></pre>\\n","headId":"use-value"},{"id":"cbf939ee-a9a1-1682-7b32-b13a8cdac6dd","type":"text","head":"useClass","text":"<p>Here&#39;s the class-provider syntax:</p>\\n<pre><code class=\\"language-typescript\\">providers: [Logger]</code></pre>\\n<p>This is actually a shorthand expression for a provider registration using a provider object literal with two properties:</p>\\n<pre><code class=\\"language-typescript\\">[{ provide: Logger, useClass: Logger }]</code></pre>\\n<p>The <code>provide</code> property holds the token that serves as the key for both locating a dependency value and registering the provider.</p>\\n<p>The second property is always a provider definition object, which you can think of as a recipe for creating the dependency value. There are many ways to create dependency values just as there are many ways to write a recipe.</p>\\n<p>Occasionally you&#39;ll ask a different class to provide the service. The following code tells the injector to return a <code>BetterLogger</code> when something asks for the <code>Logger</code>.</p>\\n<pre><code class=\\"language-typescript\\">[{ provide: Logger, useClass: BetterLogger }]</code></pre>\\n","headId":"use-class"},{"id":"5a38ada3-3a6b-dd26-9286-bab87a2efa71","type":"text","head":"useExisting","text":"<p>Allows to declare two providers for the same class with two different tokens.</p>\\n<pre><code class=\\"language-typescript\\">[ \\n  NewLogger,\\n  <span class=\\"hljs-comment\\">// Alias OldLogger w/ reference to NewLogger</span>\\n  { provide: OldLogger, useExisting: NewLogger},\\n]</code></pre>\\n","headId":"use-existing"},{"id":"a04c7623-b405-ea15-b81b-22e0255483bc","type":"text","head":"useFactory","text":"<p>Sometimes you need to create the dependent value dynamically, based on information you won&#39;t have until the last possible moment. Maybe the information changes repeatedly in the course of the browser session.</p>\\n<p>Suppose also that the injectable service has no independent access to the source of this information.</p>\\n<p>This situation calls for a factory provider.</p>\\n<p>A factory provider needs a factory function:</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">let</span> heroServiceFactory = <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">logger: Logger, userService: UserService</span>) =&gt;</span> {\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> HeroService(logger, userService.user.isAuthorized);\\n};</code></pre>\\n<p>You inject both the <code>Logger</code> and the <code>UserService</code> into the factory provider and let the injector pass them along to the factory function:</p>\\n<pre><code class=\\"language-typescript\\">[{ \\n  provide: HeroService,\\n  useFactory: heroServiceFactory,\\n  deps: [Logger, UserService],\\n}]</code></pre>\\n","headId":"use-factory"}],"title":"Providers","url":"providers"},{"id":"a52f278b-fa42-ea18-f339-a195577deb35","entries":[{"id":"5ea73cfd-ae5d-8e2e-bd40-21b937a2c3f2","type":"text","text":"<p>A constructor parameter decorator that specifies a custom provider of a dependency.</p>\\n"},{"id":"a7be0697-8a88-decc-a49e-c5af31e68c4f","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@Inject</span>(ServiceToken) service: Service</span>) {}</code></pre>\\n"},{"id":"7e26fd31-58a6-0938-683e-afe510560d1f","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"7d49e18f-7861-96c9-0221-1439970a91c1","type":"text","text":"<p>The following example shows a class constructor that specifies a custom provider of a dependency using the parameter decorator.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> Engine {}\\n\\n<span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">class</span> Car {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@Inject</span>(<span class=\\"hljs-string\\">&#x27;MyEngine&#x27;</span>) <span class=\\"hljs-keyword\\">public</span> engine: Engine</span>) {}\\n}\\n\\n<span class=\\"hljs-keyword\\">const</span> injector = ReflectiveInjector.resolveAndCreate([{provide: <span class=\\"hljs-string\\">&#x27;MyEngine&#x27;</span>, useClass: Engine}, Car]);\\n\\nexpect(injector.get(Car).engine <span class=\\"hljs-keyword\\">instanceof</span> Engine).toBe(<span class=\\"hljs-literal\\">true</span>);</code></pre>\\n<p>When <code>@Inject()</code> is not present, the <code>Injector</code> uses the type annotation of the parameter as the provider.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> Engine {}\\n\\n<span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">class</span> Car {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">public</span> engine: Engine</span>) {\\n  }  <span class=\\"hljs-comment\\">// same as constructor(@Inject(Engine) engine:Engine)</span>\\n}\\n\\n<span class=\\"hljs-keyword\\">const</span> injector = ReflectiveInjector.resolveAndCreate([Engine, Car]);\\nexpect(injector.get(Car).engine <span class=\\"hljs-keyword\\">instanceof</span> Engine).toBe(<span class=\\"hljs-literal\\">true</span>);</code></pre>\\n"}],"title":"@Inject","url":"inject"},{"id":"143faa82-9418-fd0f-039c-5f6840a731a4","entries":[{"id":"44f0f2be-939a-7532-220b-669dc4b51793","type":"text","text":"<p>A constructor parameter decorator that marks a dependency as optional.</p>\\n"},{"id":"9550f80c-6f00-5c2c-829f-e0cf0aa687ea","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@Optional</span>() service: Service</span>) {}</code></pre>\\n"},{"id":"79385180-f498-497c-cccb-232828bbdc33","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"9462f65c-782f-26ae-7e89-acdb6dcd68eb","type":"text","text":"<p>The DI framework provides null if the dependency is not found. For example, the following code allows the possibility of a null result:</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> Engine {}\\n\\n<span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">class</span> Car {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@Optional</span>() <span class=\\"hljs-keyword\\">public</span> engine: Engine</span>) {}\\n}\\n\\n<span class=\\"hljs-keyword\\">const</span> injector = ReflectiveInjector.resolveAndCreate([Car]);\\nexpect(injector.get(Car).engine).toBeNull();\\n</code></pre>\\n"}],"title":"@Optional","url":"optional"},{"id":"84835903-900e-2071-acb7-0e810f8f7f3d","entries":[{"id":"e17ee295-df1f-77bb-dab5-344f63275e08","type":"text","text":"<p>A constructor parameter decorator that tells the DI framework to retrieve a dependency only from the local injector.</p>\\n"},{"id":"0ef7fa53-cf87-4eb4-09b3-e328c7ab8eea","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@Self</span>() service: Service</span>) {}</code></pre>\\n"},{"id":"b746cc55-509c-36e2-ff11-4b7f4cad801b","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"ca3faec8-a050-5347-4860-9d7978c86a8f","type":"text","text":"<p>In the following example, the dependency can be resolved by the local injector when instantiating the class itself, but not when instantiating a child.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> Dependency {}\\n\\n<span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">class</span> NeedsDependency {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@Self</span>() <span class=\\"hljs-keyword\\">public</span> dependency: Dependency</span>) {}\\n}\\n\\n<span class=\\"hljs-keyword\\">let</span> inj = ReflectiveInjector.resolveAndCreate([Dependency, NeedsDependency]);\\n<span class=\\"hljs-keyword\\">const</span> nd = inj.get(NeedsDependency);\\n\\nexpect(nd.dependency <span class=\\"hljs-keyword\\">instanceof</span> Dependency).toBe(<span class=\\"hljs-literal\\">true</span>);\\n\\ninj = ReflectiveInjector.resolveAndCreate([Dependency]);\\n<span class=\\"hljs-keyword\\">const</span> child = inj.resolveAndCreateChild([NeedsDependency]);\\nexpect(<span class=\\"hljs-function\\">() =&gt;</span> child.get(NeedsDependency)).toThrowError();</code></pre>\\n"}],"title":"@Self","url":"self"},{"id":"68710180-59fe-4e87-7280-0a71df71f504","entries":[{"id":"036f0a84-f68d-2148-f2ee-4fd929cf4b24","type":"text","text":"<p>A constructor parameter decorator that tells the DI framework that dependency resolution should start from the parent injector.</p>\\n"},{"id":"5ac81cc2-c6ee-8d79-4ef1-afc63760c116","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@SkipSelf</span>() service: Service</span>) {}</code></pre>\\n"},{"id":"40bf24d8-9938-1d0b-2c1f-e32cb29a1acc","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"e5897574-c680-17e0-cf44-8c016263d7a5","type":"text","text":"<p>In the following example, the dependency can be resolved when instantiating a child, but not when instantiating the class itself.</p>\\n<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> Dependency {}\\n\\n<span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">class</span> NeedsDependency {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@SkipSelf</span>() <span class=\\"hljs-keyword\\">public</span> dependency: Dependency</span>) { <span class=\\"hljs-built_in\\">this</span>.dependency = dependency; }\\n}\\n\\n<span class=\\"hljs-keyword\\">const</span> parent = ReflectiveInjector.resolveAndCreate([Dependency]);\\n<span class=\\"hljs-keyword\\">const</span> child = parent.resolveAndCreateChild([NeedsDependency]);\\nexpect(child.get(NeedsDependency).dependency <span class=\\"hljs-keyword\\">instanceof</span> Dependency).toBe(<span class=\\"hljs-literal\\">true</span>);\\n\\n<span class=\\"hljs-keyword\\">const</span> inj = ReflectiveInjector.resolveAndCreate([Dependency, NeedsDependency]);\\nexpect(<span class=\\"hljs-function\\">() =&gt;</span> inj.get(NeedsDependency)).toThrowError();</code></pre>\\n"}],"title":"@SkipSelf","url":"skip-self"},{"id":"1d16ff5d-8a24-e6ed-2d73-5b14d1c56109","entries":[{"id":"18b24a5e-75ab-86d3-70d2-50fff6a5a37b","type":"text","text":"<p>A constructor parameter decorator that tells the DI framework to retrieve a dependency from any injector until reaching the host element of the current component.</p>\\n"},{"id":"c6b53c5f-16e3-1f8d-e859-bfd733733707","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@Host</span>() service: Service</span>) {}</code></pre>\\n"},{"id":"a83bc6fc-b891-13c8-bd72-544ab88ef85a","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"b94d0739-f35a-5d29-bfa3-4288bb78033e","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> OtherService {}\\n<span class=\\"hljs-keyword\\">class</span> HostService {}\\n\\n<span class=\\"hljs-meta\\">@Directive</span>({selector: <span class=\\"hljs-string\\">&#x27;child-directive&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> ChildDirective {\\n  logs: <span class=\\"hljs-built_in\\">string</span>[] = [];\\n\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-meta\\">@Optional</span>() <span class=\\"hljs-meta\\">@Host</span>() os: OtherService, <span class=\\"hljs-meta\\">@Optional</span>() <span class=\\"hljs-meta\\">@Host</span>() hs: HostService</span>) {\\n    <span class=\\"hljs-comment\\">// os is null: true</span>\\n    <span class=\\"hljs-built_in\\">this</span>.logs.push(<span class=\\"hljs-string\\">`os is null: <span class=\\"hljs-subst\\">${os === <span class=\\"hljs-literal\\">null</span>}</span>`</span>);\\n    <span class=\\"hljs-comment\\">// hs is an instance of HostService: true</span>\\n    <span class=\\"hljs-built_in\\">this</span>.logs.push(<span class=\\"hljs-string\\">`hs is an instance of HostService: <span class=\\"hljs-subst\\">${hs <span class=\\"hljs-keyword\\">instanceof</span> HostService}</span>`</span>);\\n  }\\n}\\n\\n<span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;parent-cmp&#x27;</span>,\\n  viewProviders: [HostService],\\n  template: <span class=\\"hljs-string\\">&#x27;&lt;child-directive&gt;&lt;/child-directive&gt;&#x27;</span>,\\n})\\n<span class=\\"hljs-keyword\\">class</span> ParentCmp {\\n}\\n\\n<span class=\\"hljs-meta\\">@Component</span>({\\n  selector: <span class=\\"hljs-string\\">&#x27;app&#x27;</span>,\\n  viewProviders: [OtherService],\\n  template: <span class=\\"hljs-string\\">&#x27;&lt;parent-cmp&gt;&lt;/parent-cmp&gt;&#x27;</span>,\\n})\\n<span class=\\"hljs-keyword\\">class</span> App {\\n}</code></pre>\\n"}],"title":"@Host","url":"host"},{"id":"6565c60a-0db7-9d9d-da7e-f0e1cd86062a","entries":[{"id":"5cae07ad-208a-967a-60dd-85ea0bcff52d","type":"text","text":"<p>A component has a lifecycle managed by Angular.</p>\\n<p>Angular creates it, renders it, creates and renders its children, checks it when its data-bound properties change, and destroys it before removing it from the DOM.</p>\\n<p>Angular offers lifecycle hooks that provide visibility into these key life moments and the ability to act when they occur.</p>\\n<p>A directive has the same set of lifecycle hooks.</p>\\n"},{"id":"e402d38b-db1f-e77c-9d2e-3776d9e729c5","type":"tutorials","links":[{"label":"Angular \u2014 Lifecycle Hooks","url":"https://angular.io/guide/lifecycle-hooks","lang":"en"}]}],"title":"Lifecycle Hooks","url":"lifecycle-hooks"},{"id":"c60d7522-e3a6-2157-7161-187c0492285b","entries":[{"id":"022c8094-1bec-02f7-a1ca-47517f5a922f","type":"text","text":"<p>A callback method that is invoked immediately after the default change detector has checked data-bound properties if at least one has changed, and before the view and content children are checked.</p>\\n"},{"id":"17e95b3c-a42a-9ae7-4729-d9826dbbe449","type":"text","text":"<pre><code class=\\"language-typescript\\">ngOnChanges(changes: SimpleChanges): <span class=\\"hljs-built_in\\">void</span></code></pre>\\n"},{"id":"fefba782-a940-7801-d975-90f17715823d","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"083089bb-0a69-f68f-ed8c-6ac27dc8994e","type":"text","text":"<p>The following snippet shows how a component can implement this interface to define an on-changes handler for an input property.</p>\\n"},{"id":"909eff00-0786-92d2-7554-93f72dde7cc1","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({selector: <span class=\\"hljs-string\\">&#x27;my-cmp&#x27;</span>, template: <span class=\\"hljs-string\\">`...`</span>})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent <span class=\\"hljs-keyword\\">implements</span> OnChanges {\\n  <span class=\\"hljs-meta\\">@Input</span>() prop: <span class=\\"hljs-built_in\\">number</span>;\\n\\n  ngOnChanges(changes: SimpleChanges) {\\n    <span class=\\"hljs-comment\\">// changes.prop contains the old and the new value...</span>\\n  }\\n}</code></pre>\\n"}],"title":"ngOnChanges()","url":"ng-on-changes"},{"id":"50367a95-a570-e864-a3c1-ad320dbcd6c6","entries":[{"id":"3f877290-e3ae-7d35-d2d3-1d2e8a9296ca","type":"text","text":"<p>A callback method that is invoked immediately after the default change detector has checked the directive&#39;s data-bound properties for the first time, and before any of the view or content children have been checked. It is invoked only once when the directive is instantiated.</p>\\n"},{"id":"85a98ff4-034b-89e1-7232-ef8510efcfd9","type":"text","text":"<pre><code class=\\"language-typescript\\">ngOnInit(): <span class=\\"hljs-built_in\\">void</span></code></pre>\\n"},{"id":"b5c76bfd-305c-a19c-9f11-891088645d1b","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"c1961899-f112-0c19-3437-a04be78d09d4","type":"text","text":"<p>The following snippet shows how a component can implement this interface to define its own initialization method.</p>\\n"},{"id":"04398a2d-2249-1126-4576-81c7701961ee","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({selector: <span class=\\"hljs-string\\">&#x27;my-cmp&#x27;</span>, template: <span class=\\"hljs-string\\">`...`</span>})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent <span class=\\"hljs-keyword\\">implements</span> OnInit {\\n  ngOnInit() {\\n    <span class=\\"hljs-comment\\">// ...</span>\\n  }\\n}</code></pre>\\n"}],"title":"ngOnInit()","url":"ng-on-init"},{"id":"5f129cd7-b63e-c07b-5263-40f969f3b0e3","entries":[{"id":"faa25e91-b054-9309-1cd0-73ca3228083d","type":"text","text":"<p>A callback method that performs change-detection, invoked after the default change-detector runs.</p>\\n<p>The default change-detection algorithm looks for differences by comparing bound-property values by reference across change detection runs. You can use this hook to check for and respond to changes by some other means.</p>\\n<p>When the default change detector detects changes, it invokes <code>ngOnChanges()</code> if supplied, regardless of whether you perform additional change detection. Typically, you should not use both <code>DoCheck</code> and <code>OnChanges</code> to respond to changes on the same input.</p>\\n"},{"id":"31a52d3f-95b6-4c51-b7a9-cb354418a86b","type":"text","text":"<pre><code class=\\"language-typescript\\">ngDoCheck(): <span class=\\"hljs-built_in\\">void</span></code></pre>\\n"},{"id":"55595e2e-d1c7-ec4a-cf07-ca20aab9f4f4","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"a9b378ca-1448-d1c8-eb9f-06b695ecc396","type":"text","text":"<p>The following snippet shows how a component can implement this interface to invoke it own change-detection cycle.</p>\\n"},{"id":"2e8a5ed5-137c-3f07-7f7c-75cd5f1a4268","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({selector: <span class=\\"hljs-string\\">&#x27;my-cmp&#x27;</span>, template: <span class=\\"hljs-string\\">`...`</span>})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent <span class=\\"hljs-keyword\\">implements</span> DoCheck {\\n  ngDoCheck() {\\n    <span class=\\"hljs-comment\\">// ...</span>\\n  }\\n}</code></pre>\\n"}],"title":"ngDoCheck()","url":"ng-do-check"},{"id":"2b7bc4a7-a825-a200-6cc2-2ffe850ceb48","entries":[{"id":"ecf22900-8c22-96ee-c5ab-2b41a60c5ac8","type":"text","text":"<p>A callback method that is invoked immediately after Angular has completed initialization of all of the directive&#39;s content. It is invoked only once when the directive is instantiated.</p>\\n"},{"id":"780c73dd-3c58-5fe9-e6ce-876471600af7","type":"text","text":"<pre><code class=\\"language-typescript\\">ngAfterContentInit(): <span class=\\"hljs-built_in\\">void</span></code></pre>\\n"},{"id":"500a62f5-ac8c-08ab-ed54-a2bd69ec7136","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"7761a721-1547-65da-66ea-1993224f1199","type":"text","text":"<p>The following snippet shows how a component can implement this interface to define its own content initialization method.</p>\\n"},{"id":"20e45f59-275d-5a03-100e-9fedbcd4b64d","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({selector: <span class=\\"hljs-string\\">&#x27;my-cmp&#x27;</span>, template: <span class=\\"hljs-string\\">`...`</span>})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent <span class=\\"hljs-keyword\\">implements</span> AfterContentInit {\\n  ngAfterContentInit() {\\n    <span class=\\"hljs-comment\\">// ...</span>\\n  }\\n}</code></pre>\\n"}],"title":"ngAfterContentInit()","url":"ng-after-content-init"},{"id":"20aa0a64-eacf-3812-17ff-054222577a9b","entries":[{"id":"5cd1bee8-fdc3-75db-3c36-4c7dd81c8093","type":"text","text":"<p>A callback method that is invoked immediately after the default change detector has completed checking all of the directive&#39;s content.</p>\\n"},{"id":"0cf7d14a-fe2b-4a8a-d6ce-4f2def2571c2","type":"text","text":"<pre><code class=\\"language-typescript\\">ngAfterContentChecked(): <span class=\\"hljs-built_in\\">void</span></code></pre>\\n"},{"id":"7fa65b97-ca08-cc55-1f79-7be1d63e174a","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"26aef03c-ff5a-3e5c-35d2-74eb2eccbc71","type":"text","text":"<p>The following snippet shows how a component can implement this interface to define its own after-check functionality.</p>\\n"},{"id":"f00be05a-5a45-ea4b-42ad-3e7aed0fc535","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({selector: <span class=\\"hljs-string\\">&#x27;my-cmp&#x27;</span>, template: <span class=\\"hljs-string\\">`...`</span>})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent <span class=\\"hljs-keyword\\">implements</span> AfterContentChecked {\\n  ngAfterContentChecked() {\\n    <span class=\\"hljs-comment\\">// ...</span>\\n  }\\n}</code></pre>\\n"}],"title":"ngAfterContentChecked()","url":"ng-after-content-checked"},{"id":"37ff2fb3-ae0b-d369-3f3e-4307760a3fbf","entries":[{"id":"648bcd7f-0f97-bf6e-c0d9-8a372113281e","type":"text","text":"<p>A callback method that is invoked immediately after Angular has completed initialization of a component&#39;s view. It is invoked only once when the view is instantiated.</p>\\n"},{"id":"b9da475c-a087-7fd5-5fae-5d4b9b0cc00c","type":"text","text":"<pre><code class=\\"language-typescript\\">ngAfterViewInit(): <span class=\\"hljs-built_in\\">void</span></code></pre>\\n"},{"id":"1a17ca75-0d23-b9f1-40bb-5d0676a13abd","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"c4ad05ef-a25d-5e3d-7437-ec6f49cf4e70","type":"text","text":"<p>The following snippet shows how a component can implement this interface to define its own view initialization method.</p>\\n"},{"id":"0bc3305e-8bd1-73c8-fe39-83d54f6aad68","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({selector: <span class=\\"hljs-string\\">&#x27;my-cmp&#x27;</span>, template: <span class=\\"hljs-string\\">`...`</span>})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent <span class=\\"hljs-keyword\\">implements</span> AfterViewInit {\\n  ngAfterViewInit() {\\n    <span class=\\"hljs-comment\\">// ...</span>\\n  }\\n}</code></pre>\\n"}],"title":"ngAfterViewInit()","url":"ng-after-view-init"},{"id":"c5caed9f-3c9c-97e8-f383-9d30ad0f3c66","entries":[{"id":"79b73b0d-f88a-9707-4b51-d05184d1cb4b","type":"text","text":"<p>A callback method that is invoked immediately after the default change detector has completed one change-check cycle for a component&#39;s view.</p>\\n"},{"id":"bd20e5dd-406b-fd0c-4d91-7b08dddca640","type":"text","text":"<pre><code class=\\"language-typescript\\">ngAfterViewChecked(): <span class=\\"hljs-built_in\\">void</span></code></pre>\\n"},{"id":"a9223fae-aded-d6e1-0c33-a455692fa934","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"70979f4f-fdf3-bec7-473e-b0c3c5496d1d","type":"text","text":"<p>The following snippet shows how a component can implement this interface to define its own after-check functionality.</p>\\n"},{"id":"a0843248-4e94-943b-75af-884bad712abf","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({selector: <span class=\\"hljs-string\\">&#x27;my-cmp&#x27;</span>, template: <span class=\\"hljs-string\\">`...`</span>})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent <span class=\\"hljs-keyword\\">implements</span> AfterViewChecked {\\n  ngAfterViewChecked() {\\n    <span class=\\"hljs-comment\\">// ...</span>\\n  }\\n}</code></pre>\\n"}],"title":"ngAfterViewChecked()","url":"ng-after-view-checked"},{"id":"e1c925dd-f2f4-a880-a4c9-da0c5588f570","entries":[{"id":"0b3ddb01-d3b6-eacf-d51f-b15439bc75e5","type":"text","text":"<p>A callback method that performs custom clean-up, invoked immediately after a <strong>directive</strong>, <strong>pipe</strong>, or <strong>service</strong> instance is destroyed.</p>\\n"},{"id":"f75fc11c-761e-b06e-1be9-bec4fa860801","type":"text","text":"<pre><code class=\\"language-typescript\\">ngOnDestroy(): <span class=\\"hljs-built_in\\">void</span></code></pre>\\n"},{"id":"dd838ba1-d467-d60e-fdb3-304e881aedc0","type":"tutorials","links":[{"lang":"en","label":"Exploring Angular Lifecycle Hooks \u2013 OnDestroy","url":"https://ultimatecourses.com/blog/exploring-angular-lifecycle-hooks-ondestroy"}]},{"id":"3b928e1f-27b0-fcf6-f02e-21fc1e172387","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"a225f1f6-ab45-e30b-c826-4e03e725f289","type":"text","text":"<p>The following snippet shows how a component can implement this interface to define its own custom clean-up method.</p>\\n"},{"id":"ec49dbc5-f4b1-8770-556a-29d273101910","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({selector: <span class=\\"hljs-string\\">&#x27;my-cmp&#x27;</span>, template: <span class=\\"hljs-string\\">`...`</span>})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent <span class=\\"hljs-keyword\\">implements</span> OnDestroy {\\n  ngOnDestroy() {\\n    <span class=\\"hljs-comment\\">// ...</span>\\n  }\\n}</code></pre>\\n"}],"title":"ngOnDestroy()","url":"ng-on-destroy"},{"id":"3140bd42-ac5f-8bc5-61d2-fbbb228e10f7","entries":[{"id":"8e891ae7-d259-ee55-feb9-234848a0ef3e","type":"text","text":"<p>An injectable service for executing work inside or outside of the Angular zone.</p>\\n<p>The most common use of this service is to optimize performance when starting a work consisting of one or more asynchronous tasks that don&#39;t require UI updates or error handling to be handled by Angular. Such tasks can be kicked off via <code>runOutsideAngular</code> and if needed, these tasks can reenter the Angular zone via <code>run</code>.</p>\\n"},{"id":"7dd1f9e2-5b07-084a-0245-17431215c754","type":"tutorials","links":[{"label":"Using Zones an Angular for Better Performance","url":"https://blog.thoughtram.io/angular/2017/02/21/using-zones-in-angular-for-better-performance.html","lang":"en"},{"label":"I reverse-engineered Zones (zone.js) and here is what I\u2019ve found","url":"https://blog.angularindepth.com/i-reverse-engineered-zones-zone-js-and-here-is-what-ive-found-1f48dc87659b","lang":"en"},{"label":"Do you still think that NgZone (zone.js) is required for change detection in Angular?","url":"https://blog.angularindepth.com/do-you-still-think-that-ngzone-zone-js-is-required-for-change-detection-in-angular-16f7a575afef","lang":"en"}]},{"id":"d0cfa05d-2d97-a89f-b0f0-38725cb92937","type":"text","text":"<h2 id=\\"interface\\">Interface</h2>\\n"},{"id":"f3629b04-9165-e934-08f4-c4ca5ad7c723","type":"toc"},{"id":"4a62224b-9c9c-39e4-c18e-665d90a16a4f","type":"interface-option","head":"hasPendingMacrotasks","description":"Has pending macrotasks.","name":"hasPendingMacrotasks","headId":"hasPendingMacrotasks","interface":"hasPendingMacrotasks: boolean"},{"id":"97dae8e0-3b4b-6a89-446e-075551407081","type":"interface-option","head":"hasPendingMicrotasks","description":"Has pending microtasks.","name":"hasPendingMicrotasks","headId":"hasPendingMicrotasks","interface":"hasPendingMicrotasks: boolean"},{"id":"e7db88d5-4e23-0ed0-4a08-38b0081c6abc","type":"interface-option","head":"isStable","description":"Whether there are no outstanding microtasks or macrotasks.","name":"isStable","headId":"isStable","interface":"isStable: boolean"},{"id":"ceb18f97-6aa2-8a40-7c3b-5487825741a6","type":"interface-option","head":"onError","description":"Notifies that an error has been delivered.","name":"onError","headId":"onError","interface":"onError: EventEmitter<any>"},{"id":"844473d3-dcea-1076-a188-4cbf716f1b95","type":"interface-option","head":"onMicrotaskEmpty","description":"Notifies when there is no more microtasks enqueued in the current VM Turn. This is a hint for Angular to do change detection, which may enqueue more microtasks. For this reason this event can fire multiple times per VM Turn.","name":"onMicrotaskEmpty","headId":"onMicrotaskEmpty","interface":"onMicrotaskEmpty: EventEmitter<any>"},{"id":"2401e93d-7c2a-0e19-2a08-1f3fe4d52a75","type":"interface-option","head":"onStable","description":"Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which implies we are about to relinquish VM turn. This event gets called just once.","name":"onStable","headId":"onStable","interface":"onStable: EventEmitter<any>"},{"id":"83805282-7878-b0e6-ab31-4caa51e9b956","type":"interface-option","head":"onUnstable","description":"Notifies when code enters Angular Zone. This gets fired first on VM Turn.","name":"onUnstable","headId":"onUnstable","interface":"onUnstable: EventEmitter<any>"},{"id":"7d654bd0-be36-8db5-33dd-5a5fba6527e6","type":"interface-option","head":"run","description":"Executes the `fn` function synchronously within the Angular zone and returns value returned by the function.","name":"run","headId":"run","interface":"run(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T","showAdditional":true,"additional":"Running functions via `run` allows you to reenter Angular zone from a task that was executed outside of the Angular zone (typically started via `runOutsideAngular`).\\n\\nAny future tasks or microtasks scheduled from within this function will continue executing from within the Angular zone.\\n\\nIf a synchronous error happens it will be rethrown and not reported via `onError`."},{"id":"df540991-1ac3-2a08-4c5b-38b6bb3d8f53","type":"interface-option","head":"runGuarded","description":"Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not rethrown.","name":"runGuarded","headId":"runGuarded","interface":"runGuarded(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T"},{"id":"84858152-da55-2d74-bad3-aaf04b0ed460","type":"interface-option","head":"runOutsideAngular","description":"Executes the `fn` function synchronously in Angular\'s parent zone and returns value returned by the function.","name":"runOutsideAngular","headId":"runOutsideAngular","interface":"runOutsideAngular(fn: (...args: any[]) => T): T","showAdditional":true,"additional":"Running functions via `runOutsideAngular` allows you to escape Angular\'s zone and do work that doesn\'t trigger Angular change-detection or is subject to Angular\'s error handling.\\n\\nAny future tasks or microtasks scheduled from within this function will continue executing from outside of the Angular zone.\\n\\nUse `run` to reenter the Angular zone and do work that updates the application model."},{"id":"fb9e519d-b81a-b575-0cab-6d3316826985","type":"interface-option","head":"runTask","description":"Executes the `fn` function synchronously within the Angular zone as a task and returns value returned by the function.","name":"runTask","headId":"runTask","interface":"runTask(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T","showAdditional":true,"additional":"Running functions via `run` allows you to reenter Angular zone from a task that was executed outside of the Angular zone (typically started via `runOutsideAngular`).\\n\\nAny future tasks or microtasks scheduled from within this function will continue executing from within the Angular zone.\\n\\nIf a synchronous error happens it will be rethrown and not reported via `onError`."},{"id":"1bd561a1-ecda-329a-6ab8-4891ddac06d3","type":"interface-option","name":"isInAngularZone","head":"isInAngularZone","headId":"isInAngularZone","interface":"static isInAngularZone(): boolean","description":"-"},{"id":"317e4e88-a2df-2b76-71f3-98d2fe43e439","type":"interface-option","name":"assertInAngularZone","head":"assertInAngularZone","headId":"assertInAngularZone","interface":"static assertInAngularZone(): void","description":"-"},{"id":"4807d5dc-f721-2630-8f3e-789996e4fdcf","type":"interface-option","name":"assertNotInAngularZone","head":"assertNotInAngularZone","headId":"assertNotInAngularZone","interface":"static assertNotInAngularZone(): void","description":"-"}],"title":"NgZone","url":"ng-zone","generationType":"interface-options","generationFile":"core/src/zone/ng_zone.ts","generationName":"NgZone","generationStartLine":85,"generationEndLine":220},{"id":"11baf519-b274-048a-6bb6-95d589329a12","entries":[{"id":"40e481f0-7c35-8d5f-13ee-36c3c084e393","type":"text","text":"<p>The Renderer class is a service that provides an abstraction for UI rendering manipulations. Using it is the recommended approach because it then makes it easier to develop apps that can be rendered in different environments.</p>\\n"},{"id":"7545ef21-ff9c-26b6-c941-422e1ea52a98","type":"tutorials","links":[{"label":"Angular: Stop manipulating DOM with ElementRef!","url":"https://medium.com/@kmathy/angular-manipulate-properly-the-dom-with-renderer-16a756508cba","lang":"en"},{"label":"Using Renderer2 in Angular","url":"https://alligator.io/angular/using-renderer2/","lang":"en"}]},{"id":"9eeb3ca6-5af4-bdd9-9e35-148a335fa66e","type":"toc"},{"id":"cca30cb8-b640-8aa1-bad0-004ae3dc845f","type":"interface-option","head":"addClass","description":"Add a class to an element in the DOM.","name":"addClass","headId":"addClass","interface":"addClass(el: any, name: string): void"},{"id":"035e3089-b9f4-ecdd-c16d-63424128eb58","type":"interface-option","head":"appendChild","description":"Appends a child to a given parent node in the host element DOM.","name":"appendChild","headId":"appendChild","interface":"appendChild(parent: any, newChild: any): void"},{"id":"8cef4e23-7982-7bfb-6071-9705124ad239","type":"interface-option","head":"createComment","description":"Add a comment to the DOM of the host element.","name":"createComment","headId":"createComment","interface":"createComment(value: string): any"},{"id":"9de51ae2-7648-5c56-d37b-04019f2499ab","type":"interface-option","head":"createElement","description":"Create an instance of the host element.","name":"createElement","headId":"createElement","interface":"createElement(name: string, namespace?: string|null): any","showAdditional":true,"additional":"* `name` \u2014 an identifying name for the new element, unique within the namespace.\\n* `namespace` - the namespace for the new element."},{"id":"aac5f9bf-77e8-9cb8-4ce2-ef90ef29ee12","type":"interface-option","head":"createText","description":"Add text to the DOM of the host element.","name":"createText","headId":"createText","interface":"createText(value: string): any"},{"id":"90a6c77c-bf72-c3e3-f73e-c29d4e5a0a74","type":"interface-option","name":"data","head":"data","headId":"data","interface":"get data(): {[key: string]: any}","description":"Use to store arbitrary developer-defined data on a renderer instance,\\nas an object containing key-value pairs.\\nThis is useful for renderers that delegate to other renderers."},{"id":"b8bba8c5-0f1a-64f5-d9ab-d930276d7d65","type":"interface-option","head":"destroy","description":"Destroy the renderer or the host element.","name":"destroy","headId":"destroy","interface":"destroy(): void"},{"id":"453232d3-c8a1-d761-b5cf-3c2014941721","type":"interface-option","name":"destroyNode","head":"destroyNode","headId":"destroyNode","interface":"destroyNode: ((node: any) => void) | null","description":"If null or undefined, the view engine won\'t call it.\\nThis is used as a performance optimization for production mode."},{"id":"6bc1d546-5031-6ae8-eb86-588782b256d9","type":"interface-option","head":"insertBefore","description":"Insert a child node at a given position in a parent node in the host element DOM.","name":"insertBefore","headId":"insertBefore","interface":"insertBefore(parent: any, newChild: any, refChild: any): void","showAdditional":true,"additional":"* `parent` \u2014 the parent node.\\n* `newChild` \u2014 the new child nodes.\\n* `refChild` \u2014 the existing child node that should precede the new node."},{"id":"fddbe8c8-dde4-46c3-7062-b7b839ad2e1f","type":"interface-option","head":"listen","description":"Start an event listener.","name":"listen","headId":"listen","interface":"listen(target: \'window\'|\'document\'|\'body\'|any, eventName: string, callback: (event: any) => boolean | void): () => void","showAdditional":true,"additional":"* `target` \u2014 The context in which to listen for events. Can be the entire window or document, the body of the document, or a specific DOM element.\\n\\n* `eventName` \u2014 The event to listen for.\\n\\n* `callback` \u2014 A handler function to invoke when the event occurs."},{"id":"90f06618-1885-b3f4-69db-cfb98a05fbe8","type":"interface-option","head":"nextSibling","description":"Get the next sibling node of a given node in the host element\'s DOM.","name":"nextSibling","headId":"nextSibling","interface":"nextSibling(node: any): any","showAdditional":true,"additional":"Returns the sibling node, or null if there is no sibling. For WebWorkers, always returns a value. This is because the check is synchronous, and the caller can\'t rely on checking for null.\\n"},{"id":"63ffd18c-b4a4-d8a7-6a28-76652918a796","type":"interface-option","head":"parentNode","description":"Get the parent of a given node in the host element\'s DOM.","name":"parentNode","headId":"parentNode","interface":"parentNode(node: any): any","showAdditional":true,"additional":"Returns the parent node, or null if there is no parent. For WebWorkers, always returns true. This is because the check is synchronous, and the caller can\'t rely on checking for null."},{"id":"2397b1a0-f171-cdc2-1c2a-d3cfe49d2fc7","type":"interface-option","head":"removeAttribute","description":"Remove an attribute from an element in the DOM.","name":"removeAttribute","headId":"removeAttribute","interface":"removeAttribute(el: any, name: string, namespace?: string|null): void"},{"id":"a68c7097-a7c1-84cf-a446-fa5b2dcaddaf","type":"interface-option","head":"removeChild","description":"Remove a child node from the host element\'s DOM.","name":"removeChild","headId":"removeChild","interface":"removeChild(parent: any, oldChild: any, isHostElement?: boolean): void"},{"id":"39043a48-0d2a-b1cc-6411-68651930335a","type":"interface-option","head":"removeClass","description":"Remove a class from an element in the DOM.","name":"removeClass","headId":"removeClass","interface":"removeClass(el: any, name: string): void"},{"id":"c4375191-8f2c-3eee-6df6-abe386c13861","type":"interface-option","head":"removeStyle","description":"Remove the value from a CSS style for an element in the DOM.","name":"removeStyle","headId":"removeStyle","interface":"removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void"},{"id":"86c107ff-4b92-8245-8f71-9845962063e9","type":"interface-option","head":"selectRootElement","description":"Prepare an element to be bootstrapped as a root element, and return the element instance.","name":"selectRootElement","headId":"selectRootElement","interface":"selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any"},{"id":"dae98f4e-b601-9d5e-8d53-2491396b5d96","type":"interface-option","head":"setAttribute","description":"Set an attribute value for an element in the DOM.","name":"setAttribute","headId":"setAttribute","interface":"setAttribute(el: any, name: string, value: string, namespace?: string|null): void","showAdditional":false},{"id":"3a361f29-c96a-23cc-6e13-c98951a3d602","type":"interface-option","head":"setProperty","description":"Set the value of a property of an element in the DOM.","name":"setProperty","headId":"setProperty","interface":"setProperty(el: any, name: string, value: any): void"},{"id":"ae3d1d76-dcf0-d8f6-7082-a54fc5cb1c31","type":"interface-option","head":"setStyle","description":"Set a CSS style for an element in the DOM.","name":"setStyle","headId":"setStyle","interface":"setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void"},{"id":"e9f83c7c-a16f-9213-fbde-8d500495adae","type":"interface-option","head":"setValue","description":"Set the value of a node in the host element.","name":"setValue","headId":"setValue","interface":"setValue(node: any, value: string): void"}],"title":"Renderer2","url":"renderer2","generationType":"interface-options","generationFile":"core/src/render/api.ts","generationName":"Renderer2","generationStartLine":214,"generationEndLine":384},{"id":"8631a258-f7e2-0ea9-1a37-0a749733a6e9","entries":[{"id":"1c535630-47af-2c6c-a4b1-66018a3c4ccd","type":"text","text":"<p>DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing values to be safe to use in the different DOM contexts.</p>\\n"},{"id":"866af4fd-2fbb-dc43-fab3-265da7539390","type":"text","text":"<p>For example, when binding a URL in an <code>&lt;a [href]=&quot;someValue&quot;&gt;</code> hyperlink, <code>someValue</code> will be sanitized so that an attacker cannot inject e.g. a <code>javascript:</code> URL that would execute code on the website.</p>\\n<p>In specific situations, it might be necessary to disable sanitization, for example if the application genuinely needs to produce a <code>javascript:</code> style link with a dynamic value in it. Users can bypass security by constructing a value with one of the <code>bypassSecurityTrust...</code> methods, and then binding to that value from the template.</p>\\n<p>These situations should be very rare, and extraordinary care must be taken to avoid creating a Cross Site Scripting (XSS) security bug!</p>\\n"},{"id":"1120f309-baab-c411-2f77-b5821ffcb0c8","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"b5d7721d-65eb-9c6b-0c73-c2ea1d819eb2","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  html: SafeHtml;\\n\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">private</span> sanitizer: DomSanitizer</span>) {\\n    <span class=\\"hljs-built_in\\">this</span>.html = sanitizer.bypassSecurityTrustHtml(<span class=\\"hljs-string\\">&#x27;&lt;h1&gt;DomSanitizer&lt;/h1&gt;&lt;script&gt;ourSafeCode()&lt;/script&gt;&#x27;</span>) ;\\n  }\\n}</code></pre>\\n"},{"id":"affa2577-779a-5f97-8ed1-4cb0551818a0","type":"tutorials","links":[{"label":"Angular Security Guide","url":"https://angular.io/guide/security","lang":"en"},{"label":"Angular 2 Security\u200a\u2014\u200aThe DomSanitizer Service","url":"https://netbasal.com/angular-2-security-the-domsanitizer-service-2202c83bd90","lang":"en"}]},{"id":"2a208307-aaa8-4e9c-66ee-5ca3e940664a","type":"toc"},{"id":"94ebbb7b-0259-953a-b77c-6439f4885f92","type":"interface-option","head":"bypassSecurityTrustHtml","description":"Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will leave safe HTML intact, so in most situations this method should not be used.","name":"bypassSecurityTrustHtml","headId":"bypassSecurityTrustHtml","interface":"bypassSecurityTrustHtml(value: string): SafeHtml","showAdditional":true,"additional":"**WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!"},{"id":"fb1f7d9b-144d-d94b-9b41-0281fe7878b8","type":"interface-option","head":"bypassSecurityTrustResourceUrl","description":"Bypass security and trust the given value to be a safe resource URL, i.e. a location that may be used to load executable code from, like `<script src>`, or `<iframe src>`.","name":"bypassSecurityTrustResourceUrl","headId":"bypassSecurityTrustResourceUrl","interface":"bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl","showAdditional":true,"additional":"**WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!"},{"id":"451948b4-d300-7eb4-6874-89399289189b","type":"interface-option","head":"bypassSecurityTrustScript","description":"Bypass security and trust the given value to be safe JavaScript.","name":"bypassSecurityTrustScript","headId":"bypassSecurityTrustScript","interface":"bypassSecurityTrustScript(value: string): SafeScript","showAdditional":true,"additional":"**WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!"},{"id":"9604799c-7ab4-4ede-0b74-11e1d4ab39d4","type":"interface-option","head":"bypassSecurityTrustStyle","description":"Bypass security and trust the given value to be safe style value (CSS).","name":"bypassSecurityTrustStyle","headId":"bypassSecurityTrustStyle","interface":"bypassSecurityTrustStyle(value: string): SafeStyle","showAdditional":true,"additional":"**WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!"},{"id":"cfe2f823-2b2b-95a7-8d85-2b75b3696bbd","type":"interface-option","head":"bypassSecurityTrustUrl","description":"Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used in hyperlinks or `<img src>`.","name":"bypassSecurityTrustUrl","headId":"bypassSecurityTrustUrl","interface":"bypassSecurityTrustUrl(value: string): SafeUrl","showAdditional":true,"additional":"**WARNING:** calling this method with untrusted user data exposes your application to XSS security risks!"},{"id":"2a199363-c582-5f9d-22f6-0e5281175144","type":"interface-option","head":"sanitize","text":"sanitize() \\n","description":"Sanitizes a value for use in the given SecurityContext.","name":"sanitize","headId":"sanitize","interface":"sanitize(context: SecurityContext, value: SafeValue|string|null): string|null","showAdditional":true,"additional":"If value is trusted for the context, this method will unwrap the contained safe value and use it directly. Otherwise, value will be sanitized to be safe in the given context, for example by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation is responsible to make sure that the value can definitely be safely used in the given context.\\n"}],"title":"DomSanitizer","url":"dom-sanitizer","generationType":"interface-options","generationFile":"platform-browser/src/security/dom_sanitization_service.ts","generationName":"DomSanitizer","generationStartLine":89,"generationEndLine":144}],"title":"Core","color":"#1fd8e4","url":"core","disabled":false,"langs":{"en":true}},{"id":"4efb0a19-7319-04b8-2a91-fabd3d069e2d","menu":{"items":[{"id":"9bc9180d-93ad-1456-8b92-92284e2035a3","label":"Introduction","url":"intro"},{"id":"90be72d7-8c0e-8faf-044a-5fe7f45ab1d4","sub":{"items":[{"id":"ace4c8fe-b815-0ef3-ffb6-206a942d509b","label":"Route","url":"route-interface","sub":{"items":[{"id":"9883d604-68de-7607-d076-9860b5b8c8c0","usePageEntries":true,"usePageUrl":"route-interface"}]},"subActiveOpt":true},{"id":"0db3d0d4-9656-0f2a-2952-122d2277e7cf","label":"ExtraOptions","url":"extraoptions-interface","sub":{"items":[{"id":"52ba06db-7bf0-f576-b9ca-9d7f01bf7ac9","usePageEntries":true,"usePageUrl":"extraoptions-interface"}]},"usePageEntries":false,"subActiveOpt":true},{"id":"c9330b33-991b-b36c-af42-9f9b30b2ff57","label":"CanActivate","url":"canactivate-interface","separatedFromTop":true},{"id":"c7d2ac63-81b3-c09b-5f4a-b5b1142fa3fb","label":"CanActivateChild","url":"canactivatechild-interface"},{"id":"09f384d8-b398-72e6-63ba-5d3776c8bbe4","label":"CanDeactivate","url":"candeactivate-interface"},{"id":"85e8e424-50f6-aaf0-f986-6a32cca740b4","label":"Resolve","url":"resolve-interface"},{"id":"2a13a7da-f6b9-5fae-5809-500634c2c911","label":"CanLoad","url":"canload-interface"}]},"label":"Configuration","url":"configuration","asGroup":true},{"id":"3b888b1d-80a8-3e8f-2749-832a076e918b","label":"Router","separatedFromTop":true,"url":"router","sub":{"items":[{"id":"3b4be9f6-aa3e-c2bc-34ec-163ee731dacf","usePageEntries":true,"usePageUrl":"router"}]},"subActiveOpt":true},{"id":"38011a84-4c3f-5b7e-2965-e949cf66d13b","label":"NavigationExtras","url":"navigationextras","subActiveOpt":true,"sub":{"items":[{"id":"ead6c189-afe2-046c-e421-79f49ba13d88","usePageEntries":true,"usePageUrl":"navigationextras"}]}},{"id":"2b2a46ca-2bc1-0dfb-bebb-372063c6f0e3","label":"Events","url":"events"},{"id":"5c2c491e-b981-ebc4-f49a-1ae4b6bed1c4","label":"ActivatedRoute","url":"activatedroute","sub":{"items":[{"id":"66093e45-3b4e-d904-4803-2810edf10d71","usePageEntries":true,"usePageUrl":"activatedroute"}]},"subActiveOpt":true},{"id":"c866a025-6b51-4d63-42bf-4c61bb5e6518","label":"ActivatedRouteSnapshot","url":"activatedroutesnapshot","sub":{"items":[{"id":"c3dcc19d-dfb1-f99c-bbc3-8bf1156a20ca","usePageEntries":true,"usePageUrl":"activatedroutesnapshot"}]},"subActiveOpt":true},{"id":"a3dce050-b780-6739-f6a0-a02a7541fac8","label":"UrlTree","url":"urltree","separatedFromTop":true},{"id":"83c53884-d62d-acc9-8feb-01433b4e2f9c","label":"UrlSegment","url":"urlsegment"},{"id":"5ab95516-9375-7c3a-413a-82717a56bc78","label":"UrlMatcher","url":"urlmatcher"},{"id":"39e2e4de-417e-8715-c894-b1c965489093","label":"Directives","sub":{"items":[{"id":"af98488f-14f7-9787-dca8-bb97b192a0b6","label":"[routerLink]","url":"routerlink-directive"},{"id":"e9b59e7b-f2ee-7003-1120-a4ee6540b407","label":"[routerLinkActive]","url":"routerlinkactive-directive"},{"id":"d8828ba5-68e5-c27e-e072-2abc2a6b4a34","label":"<router-outlet>","url":"router-outlet-directive"}]},"asGroup":true,"url":""}]},"pages":[{"id":"ffa4036b-22b4-9f81-2c49-0f8f5d24d75f","entries":[{"id":"11501091-79c4-174e-d282-e212517205f9","type":"text","text":"<p>This easy Angular reference for developers describes routing and navigation.</p>\\n"},{"id":"5f4eb566-432d-2f42-35a4-a4a12c23e2d6","type":"text","text":"<h2 id=\\"additional-information\\">Additional information</h2>\\n<p>Example of hints and tutorials links. You can switch off these panels in the sidebar.</p>\\n"},{"id":"88dfed7f-4c72-e83b-add9-6a02cb291873","type":"hint","text":"Hint with additional explanation. "},{"id":"84d23d78-b7c5-1926-123b-290c3912325e","type":"tutorials","links":[{"label":"Angular \u2014 Routing & Navigation","url":"https://angular.io/guide/router","lang":"en"}]}],"title":"Introduction","url":"intro"},{"id":"6a00a5ff-b82a-1c02-37ee-3144cdc6f460","entries":[{"id":"95b5997d-c887-f011-ad90-4ddb772daaa0","type":"text","text":"<p>A routed Angular application has one singleton instance of the <code>Router</code> service. When the browser&#39;s URL changes, that router looks for a corresponding <code>Route</code> from which it can determine the component to display.</p>\\n<p>Pass array of routes to the <code>RouterModule.forRoot</code> method in the module imports to configure the router.</p>\\n"},{"id":"f895881c-4fff-2a5d-dd8a-f88e73865cab","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">const</span> appRoutes: Routes = [\\n  { path: <span class=\\"hljs-string\\">&#x27;home&#x27;</span>, component: HomeComponent },\\n  { path: <span class=\\"hljs-string\\">&#x27;contacts&#x27;</span>, component: ContactsComponent },\\n];\\n\\n<span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forRoot(appRoutes)\\n  ],\\n  ...\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppModule { }</code></pre>\\n"},{"id":"422471ad-b14b-a204-7d7a-cd0115d9257d","type":"text","text":"<h3 id=\\"forchild\\">forChild</h3>\\n"},{"id":"adec0600-cf3a-eb08-241b-d75a97cbb07d","type":"text","text":"<p>Only call <code>RouterModule.forRoot</code> in the root module. In any other module, you must call the <code>RouterModule.forChild</code> method to register additional routes.</p>\\n"},{"id":"a296ebf1-00b2-bc76-0ad2-0c16cf23fdba","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">const</span> blogRoutes: Routes = [\\n  { path: <span class=\\"hljs-string\\">&#x27;blog&#x27;</span>,  component: BlogComponent },\\n  { path: <span class=\\"hljs-string\\">&#x27;blog/post/:id&#x27;</span>, component: BlogPostComponent }\\n];\\n\\n<span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forChild(heroesRoutes)\\n  ],\\n  <span class=\\"hljs-built_in\\">exports</span>: [\\n    RouterModule,\\n  ]\\n})\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> BlogRoutingModule { }</code></pre>\\n"},{"id":"c771eabb-c19b-33a4-4d7a-6fa83799b47c","type":"tutorials","links":[{"label":"Angular \u2014 Routing & Navigation","url":"https://angular.io/guide/router","lang":"en"},{"label":"An Introduction to Component Routing with Angular Router","url":"https://www.sitepoint.com/component-routing-angular-router/","lang":"en"},{"label":"The Powerful URL Matching Engine of Angular Router","url":"https://vsavkin.com/the-powerful-url-matching-engine-of-angular-router-775dad593b03","lang":"en"}]}],"title":"Configuration","url":"configuration"},{"id":"259fe330-8bb1-a49f-3473-7b712313c137","entries":[{"id":"8e0ca59c-8efd-fe6d-077d-e3fc37758c0a","type":"text","text":"<p><code>Routes</code> is an array of route configurations. Pass it to the <code>RouterModule.forRoot</code> or <code>forChild</code> method in the module imports to configure the router.</p>\\n"},{"id":"658005e2-a458-cc3b-4b65-fd35cfc6ecae","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"f658fb10-1684-e338-59ba-5839d459751d","type":"text","text":"<pre><code class=\\"language-typescript\\">...\\nRouterModule.forRoot([\\n  {\\n    path: <span class=\\"hljs-string\\">&#x27;team/:id&#x27;</span>,\\n    component: Team,\\n    children: [{\\n      path: <span class=\\"hljs-string\\">&#x27;user/:name&#x27;</span>,\\n      component: User,\\n    }],\\n  },\\n]),</code></pre>\\n"},{"id":"18b80d31-79fa-d87f-2e16-1fffb6891654","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"9e16b637-e470-1cc1-9d53-c5ad2025e0ab","type":"toc"},{"id":"365e27d8-191f-19d8-c87d-e6c174ce92c7","type":"interface-option","head":"canActivate","description":"An array of DI tokens used to look up [`CanActivate`](../canactivate-interface) handlers.","name":"canActivate","headId":"canActivate","interface":"canActivate?: any[]"},{"id":"b19ddbf6-5a94-c23e-a8cf-5f0e8384531c","type":"interface-option","head":"canActivateChild","description":"An array of DI tokens used to look up [`CanActivateChild`](../canactivatechild-interface) handlers.","name":"canActivateChild","headId":"canActivateChild","interface":"canActivateChild?: any[]"},{"id":"7040329b-8282-8c06-b497-e1f9214cfa8f","type":"interface-option","head":"canDeactivate","description":"An array of DI tokens used to look up [`CanDeactivate`](../candeactivate-interface) handlers.","name":"canDeactivate","headId":"canDeactivate","interface":"canDeactivate?: any[]"},{"id":"21bc6568-104c-ba54-bdbf-816e577871f8","type":"interface-option","head":"canLoad","description":"An array of DI tokens used to look up [`CanLoad`](../canload-interface) handlers.","name":"canLoad","headId":"canLoad","interface":"canLoad?: any[]"},{"id":"72077878-a208-73e4-543a-dece6cdc6170","type":"interface-option","head":"children","description":"An array of child route definitions.","name":"children","headId":"children","interface":"children?: Routes"},{"id":"194041c1-da5b-0589-c240-7d7545f45c5e","type":"interface-option","head":"component","description":"A component type.","name":"component","headId":"component","interface":"component?: Type<any>"},{"id":"f22a7629-96ae-6bb6-d275-f118b1c9cac8","type":"interface-option","head":"data","description":"Additional data provided to the component via [`ActivatedRoute`](../activatedroute).","name":"data","headId":"data","interface":"data?: Data"},{"id":"75ecfdc3-e5ad-4345-aaf9-4ea04351bcb0","type":"interface-option","head":"loadChildren","description":"A reference to lazy loaded child routes.","name":"loadChildren","headId":"loadChildren","interface":"loadChildren?: LoadChildren","tutorialsEntry":{"id":"c09e1015-c7e3-8317-a39e-476f57d4e617","type":"tutorials","links":[{"lang":"en","label":"Angular \u2014 Lazy Loading Feature Modules","url":"https://angular.io/guide/lazy-loading-ngmodules"}]}},{"id":"adb0f7ba-b14b-49cf-e60a-0c8be0b39a65","type":"interface-option","head":"matcher","description":"Defines a [custom strategy for path matching](../urlmatcher) and supersedes `path` and `pathMatch`.","name":"matcher","headId":"matcher","interface":"matcher?: UrlMatcher"},{"id":"23571056-d67c-8c6e-2108-574051ddb3ce","type":"interface-option","head":"outlet","description":"The name of the outlet the component should be placed into.","name":"outlet","headId":"outlet","interface":"outlet?: string","tutorialsEntry":{"id":"d1ff2467-f801-6ece-b628-ab8480eff608","type":"tutorials","links":[{"lang":"en","label":"Using Auxiliary Routes","url":"https://angular-2-training-book.rangle.io/handout/routing/aux-routes.html"}]}},{"id":"979b7290-2902-e1d9-10c1-c56c5021eb4f","type":"interface-option","head":"path","description":"A string that uses the [route matcher DSL](../urlmatcher).","name":"path","headId":"path","interface":"path?: string"},{"id":"1411086d-f59a-297e-29db-057d473bac86","type":"interface-option","head":"pathMatch","description":"A string that specifies the matching strategy.","name":"pathMatch","headId":"pathMatch","interface":"pathMatch?: string"},{"id":"3e1291b0-f9e0-b961-21ab-7ed01c3a5f22","type":"interface-option","head":"redirectTo","description":"The url fragment which will replace the current matched segment.","name":"redirectTo","headId":"redirectTo","interface":"redirectTo?: string","tutorialsEntry":{"id":"92d3d916-dcbe-d8a8-a98a-968b4798f999","type":"tutorials","links":[{"lang":"en","label":"Angular Router: Understanding Redirects","url":"https://vsavkin.com/angular-router-understanding-redirects-2826177761fc"}]}},{"id":"c6daa3ae-3849-5fd3-7e75-6245a04c4308","type":"interface-option","head":"resolve","description":"A map of DI tokens used to look up [data resolvers](../resolve-interface).","name":"resolve","headId":"resolve","interface":"resolve?: ResolveData","tutorialsEntry":{"id":"609eb76b-582a-42e8-2ea6-f9e6511cb099","type":"tutorials","links":[{"lang":"en","label":"Resolving route data in Angular by thoughtram","url":"https://blog.thoughtram.io/angular/2016/10/10/resolving-route-data-in-angular-2.html"},{"lang":"en","label":"Angular Router: Route Resolvers","url":"https://alligator.io/angular/route-resolvers/"}]}},{"id":"9ceb66e7-8393-c562-70da-ec15ab2fccf1","type":"interface-option","head":"runGuardsAndResolvers","description":"Defines when guards and resolvers will be run. By default they run only when the matrix parameters of the route change. When set to `paramsOrQueryParamsChange` they will also run when query params change. And when set to always, they will run every time.","name":"runGuardsAndResolvers","headId":"runGuardsAndResolvers","interface":"runGuardsAndResolvers?: RunGuardsAndResolvers"}],"title":"Route interface","url":"route-interface"},{"id":"5ea3b8d3-ff29-6ebd-bbbf-f85bd109addc","entries":[{"id":"e9a803b0-58f1-b292-b9c9-5d1dbeec4588","type":"text","text":"<p>Represents options to configure the router.</p>\\n"},{"id":"667f2a6c-f6c6-c394-cecb-9df38adc4f56","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"99af5d68-938f-ee0d-6094-b6ba96b64d85","type":"text","text":"<pre><code class=\\"language-typescript\\">...\\nRouterModule.forRoot([\\n  <span class=\\"hljs-comment\\">// Routes definition</span>\\n], {\\n  enableTracing: <span class=\\"hljs-literal\\">true</span>,\\n}),</code></pre>\\n"},{"id":"83c4543d-5dc7-b717-c04d-0ab2bc670278","type":"text","text":"<h2 id=\\"options\\">Options</h2>\\n"},{"id":"8a068255-d7bb-e82f-36c4-9eabe6871364","type":"toc"},{"id":"3e2f0c5d-be9d-d2ef-2888-f0189920df25","type":"interface-option","head":"enableTracing","description":"Makes the router log all its internal events to the console.","interface":"enableTracing?: boolean","name":"enableTracing","headId":"enableTracing"},{"id":"be1a8135-7ee9-c9e0-bfb0-f7b1f554dd6c","type":"interface-option","head":"useHash","description":"Enables the location strategy that uses the URL fragment instead of the history API.","name":"useHash","headId":"useHash","interface":"useHash?: boolean"},{"id":"7d767260-23ee-7c85-a885-cbabf2ccbea4","type":"interface-option","head":"initialNavigation","description":"Disables the initial navigation.","interface":"initialNavigation?: InitialNavigation","name":"initialNavigation","headId":"initialNavigation"},{"id":"0b20903e-4aac-c78e-173a-3a743ca8514f","type":"interface-option","head":"errorHandler","description":"A custom error handler.","interface":"errorHandler?: ErrorHandler","name":"errorHandler","headId":"errorHandler"},{"id":"8c63f72e-f94e-5a50-e6bf-860cbd7e4388","type":"interface-option","head":"preloadingStrategy","description":"Configures a preloading strategy.","interface":"preloadingStrategy?: any","name":"preloadingStrategy","headId":"preloadingStrategy"},{"id":"06fb63ff-6736-2800-0594-e2c0459270d6","type":"interface-option","head":"onSameUrlNavigation","description":"Define what the router should do if it receives a navigation request to the current URL.","interface":"onSameUrlNavigation?: \'reload\'|\'ignore\'","name":"onSameUrlNavigation","headId":"onSameUrlNavigation","showAdditional":true,"additional":"By default, the router will ignore this navigation. However, this prevents features such as a \\"refresh\\" button. Use this option to configure the behavior when navigating to the current URL. Default is \'ignore\'."},{"id":"354e0243-7177-c6ab-566a-1751208479f5","type":"interface-option","head":"scrollPositionRestoration","description":"Configures if the scroll position needs to be restored when navigating back.","interface":"scrollPositionRestoration?: \'disabled\'|\'enabled\'|\'top\'","name":"scrollPositionRestoration","headId":"scrollPositionRestoration","showAdditional":true,"additional":"* `disabled` \u2014 does nothing (default).\\n* `top` \u2014 set the scroll position to `0,0`.\\n* `enabled` \u2014 set the scroll position to the stored position. This option will be the default in the future.\\n\\nWhen enabled, the router stores and restores scroll positions during navigation. When navigating forward, the scroll position will be set to `[0, 0]`, or to the anchor if one is provided.\\n"},{"id":"350d0a43-8648-889a-c90b-d39990b9b0a3","type":"interface-option","head":"anchorScrolling","description":"Configures if the router should scroll to the element when the url has a fragment.","interface":"anchorScrolling?: \'disabled\'|\'enabled\'","name":"anchorScrolling","headId":"anchorScrolling","showAdditional":true,"additional":"* `disabled` \u2014 does nothing (default).\\n* `enabled` \u2014 scrolls to the element. This option will be the default in the future.\\n\\nAnchor scrolling does not happen on `popstate`. Instead, we restore the position that we stored or scroll to the top."},{"id":"579a07ad-e31f-a282-3caf-09acf17c17a3","type":"interface-option","head":"scrollOffset","description":"Configures the scroll offset the router will use when scrolling to an element.","interface":"scrollOffset?: [number, number]|(() => [number, number])","name":"scrollOffset","headId":"scrollOffset","showAdditional":true,"additional":"When given a tuple with two numbers, the router will always use the numbers. When given a function, the router will invoke the function every time it restores scroll position."},{"id":"489b4d66-10cb-ac34-888d-cabb6a27737c","type":"interface-option","head":"paramsInheritanceStrategy","description":"Defines how the router merges params, data and resolved data from parent to child routes.","interface":"paramsInheritanceStrategy?: \'emptyOnly\'|\'always\'","name":"paramsInheritanceStrategy","headId":"paramsInheritanceStrategy","showAdditional":true,"additional":"Available options are:\\n\\n* `emptyOnly` \u2014 the default, only inherits parent params for path-less or component-less routes.\\n* `always` \u2014 enables unconditional inheritance of parent params."},{"id":"ff958552-2a60-99c5-a2a1-288dbeb31b9f","type":"interface-option","head":"malformedUriErrorHandler","description":"A custom malformed uri error handler function. This handler is invoked when encodedURI contains invalid character sequences.","interface":"malformedUriErrorHandler?: (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree","name":"malformedUriErrorHandler","headId":"malformedUriErrorHandler","showAdditional":true,"additional":"The default implementation is to redirect to the root url dropping any path or param info. This function passes three parameters:\\n\\n* `URIError` \u2014 Error thrown when parsing a bad URL\\n* `UrlSerializer` \u2014 UrlSerializer that\u2019s configured with the router.\\n* `url` \u2014 The malformed URL that caused the URIError.\\n"},{"id":"0df342c9-69f1-76c3-a0c5-a0a14567c97f","type":"interface-option","head":"urlUpdateStrategy","description":"Defines when the router updates the browser URL.","interface":"urlUpdateStrategy?: \'deferred\'|\'eager\'","name":"urlUpdateStrategy","headId":"urlUpdateStrategy","showAdditional":true,"additional":"The default behavior is to update after successful navigation. However, some applications may prefer a mode where the URL gets updated at the beginning of navigation. The most common use case would be updating the URL early so if navigation fails, you can show an error message with the URL that failed. Available options are:\\n\\n* `deferred` \u2014 the default, updates the browser URL after navigation has finished.\\n* `eager` \u2014 updates browser URL at the beginning of navigation."},{"id":"b3f5e7e1-1997-7b45-d3b5-cc9c31125528","type":"interface-option","head":"relativeLinkResolution","description":"Enables a bug fix that corrects relative link resolution in components with empty paths.","interface":"relativeLinkResolution?: \'legacy\'|\'corrected\'","name":"relativeLinkResolution","headId":"relativeLinkResolution","showAdditional":true,"additional":"The current default in v6 is legacy, and this option will be removed in v7 to default to the corrected behavior."}],"title":"ExtraOptions interface","url":"extraoptions-interface","generationType":"interface-options","generationFile":"router/src/router_module.ts","generationName":"ExtraOptions","generationStartLine":260,"generationEndLine":415},{"id":"cf30650f-684c-05bd-5321-203588ad4f4f","entries":[{"id":"bafbace8-5d2b-9697-935c-0df9ad1f1440","type":"text","text":"<p>Interface that a class can implement to be a guard deciding if a route can be activated.</p>\\n"},{"id":"0694ae94-464b-3c8f-65a9-5bbf1ab1a231","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">interface</span> CanActivate {\\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\\n    Observable&lt;<span class=\\"hljs-built_in\\">boolean</span>|UrlTree&gt;|<span class=\\"hljs-built_in\\">Promise</span>&lt;<span class=\\"hljs-built_in\\">boolean</span>|UrlTree&gt;|<span class=\\"hljs-built_in\\">boolean</span>|UrlTree;\\n}</code></pre>\\n"},{"id":"278f8132-31ea-edad-c69d-8b83bc5801c9","type":"tutorials","links":[{"lang":"en","label":"New in Angular 7.1: Router Updates \u2014 Perform Navigation/Redirects from Guards by returning a UrlTree","url":"https://blog.angularindepth.com/new-in-angular-v7-1-updates-to-the-router-fd67d526ad05"},{"lang":"en","label":"Better Redirects in Angular Route Guards","url":"https://juristr.com/blog/2018/11/better-route-guard-redirects/"}]},{"id":"c9e8fc60-d1e7-02c2-d5a8-924bf9fd4c77","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"f729a69e-056c-2140-fa34-0ba245dd0cba","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> UserToken {}\\n<span class=\\"hljs-keyword\\">class</span> Permissions {\\n  canActivate(user: UserToken, id: <span class=\\"hljs-built_in\\">string</span>): <span class=\\"hljs-built_in\\">boolean</span> {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>;\\n  }\\n}\\n\\n<span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">class</span> CanActivateTeam <span class=\\"hljs-keyword\\">implements</span> CanActivate {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">private</span> permissions: Permissions, <span class=\\"hljs-keyword\\">private</span> currentUser: UserToken</span>) {}\\n\\n  canActivate(\\n    route: ActivatedRouteSnapshot,\\n    state: RouterStateSnapshot\\n  ): Observable&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt;|<span class=\\"hljs-built_in\\">Promise</span>&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt;|<span class=\\"hljs-built_in\\">boolean</span> {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">this</span>.permissions.canActivate(<span class=\\"hljs-built_in\\">this</span>.currentUser, route.params.id);\\n  }\\n}\\n\\n<span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forRoot([\\n      {\\n        path: <span class=\\"hljs-string\\">&#x27;team/:id&#x27;</span>,\\n        component: TeamCmp,\\n        canActivate: [CanActivateTeam]\\n      }\\n    ])\\n  ],\\n  providers: [CanActivateTeam, UserToken, Permissions]\\n})\\n<span class=\\"hljs-keyword\\">class</span> AppModule {}</code></pre>\\n"},{"id":"040d6006-59ae-3daf-b570-c50bae2e4045","type":"text","text":"<p>You can alternatively provide a function with the <code>canActivate</code> signature:</p>\\n"},{"id":"2d6cfe1c-28d1-caa8-95cd-e6902c3fe453","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forRoot([\\n      {\\n        path: <span class=\\"hljs-string\\">&#x27;team/:id&#x27;</span>,\\n        component: TeamCmp,\\n        canActivate: [<span class=\\"hljs-string\\">&#x27;canActivateTeam&#x27;</span>]\\n      }\\n    ])\\n  ],\\n  providers: [\\n    {\\n      provide: <span class=\\"hljs-string\\">&#x27;canActivateTeam&#x27;</span>,\\n      useValue: <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">route: ActivatedRouteSnapshot, state: RouterStateSnapshot</span>) =&gt;</span> <span class=\\"hljs-literal\\">true</span>\\n    }\\n  ]\\n})\\n<span class=\\"hljs-keyword\\">class</span> AppModule {}</code></pre>\\n"}],"title":"CanActivate interface","url":"canactivate-interface"},{"id":"3795549b-febd-178f-7359-16015f372135","entries":[{"id":"5068bca9-fb4e-49f2-d937-71149850c460","type":"text","text":"<p>Interface that a class can implement to be a guard deciding if a child route can be activated.</p>\\n"},{"id":"1192c8ea-b02c-43ed-a3f5-469c840d60ae","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">interface</span> CanActivateChild {\\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt; | <span class=\\"hljs-built_in\\">Promise</span>&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt; | <span class=\\"hljs-built_in\\">boolean</span>\\n}</code></pre>\\n"},{"id":"030e6bc2-30d4-ac4a-555c-a5e8f09cbd7f","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"7a24beaf-b221-21dd-7c54-c27e77a7084f","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> UserToken {}\\n<span class=\\"hljs-keyword\\">class</span> Permissions {\\n  canActivate(user: UserToken, id: <span class=\\"hljs-built_in\\">string</span>): <span class=\\"hljs-built_in\\">boolean</span> {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>;\\n  }\\n}\\n\\n<span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">class</span> CanActivateTeam <span class=\\"hljs-keyword\\">implements</span> CanActivateChild {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">private</span> permissions: Permissions, <span class=\\"hljs-keyword\\">private</span> currentUser: UserToken</span>) {}\\n\\n  canActivateChild(\\n    route: ActivatedRouteSnapshot,\\n    state: RouterStateSnapshot\\n  ): Observable&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt;|<span class=\\"hljs-built_in\\">Promise</span>&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt;|<span class=\\"hljs-built_in\\">boolean</span> {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">this</span>.permissions.canActivate(<span class=\\"hljs-built_in\\">this</span>.currentUser, route.params.id);\\n  }\\n}\\n\\n<span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forRoot([\\n      {\\n        path: <span class=\\"hljs-string\\">&#x27;root&#x27;</span>,\\n        canActivateChild: [CanActivateTeam],\\n        children: [\\n          {\\n             path: <span class=\\"hljs-string\\">&#x27;team/:id&#x27;</span>,\\n             component: Team\\n          }\\n        ]\\n      }\\n    ])\\n  ],\\n  providers: [CanActivateTeam, UserToken, Permissions]\\n})\\n<span class=\\"hljs-keyword\\">class</span> AppModule {}</code></pre>\\n"},{"id":"f0e9ce29-251e-5177-2c0f-ff3a4217925e","type":"text","text":"<p>You can alternatively provide a function with the <code>canActivateChild</code> signature:</p>\\n"},{"id":"8e5f5541-6bc6-bd73-dc8c-d24a1580aaef","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forRoot([\\n      {\\n        path: <span class=\\"hljs-string\\">&#x27;root&#x27;</span>,\\n        canActivateChild: [<span class=\\"hljs-string\\">&#x27;canActivateTeam&#x27;</span>],\\n        children: [\\n          {\\n            path: <span class=\\"hljs-string\\">&#x27;team/:id&#x27;</span>,\\n            component: Team\\n          }\\n        ]\\n      }\\n    ])\\n  ],\\n  providers: [\\n    {\\n      provide: <span class=\\"hljs-string\\">&#x27;canActivateTeam&#x27;</span>,\\n      useValue: <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">route: ActivatedRouteSnapshot, state: RouterStateSnapshot</span>) =&gt;</span> <span class=\\"hljs-literal\\">true</span>\\n    }\\n  ]\\n})\\n<span class=\\"hljs-keyword\\">class</span> AppModule {}</code></pre>\\n"}],"title":"CanActivateChild interface","url":"canactivatechild-interface"},{"id":"ce3e9f85-d837-7c28-3394-93660e171ab2","entries":[{"id":"94a2b51a-e1af-472c-8a52-c50ca4c3f3cf","type":"text","text":"<p>Interface that a class can implement to be a guard deciding if a route can be deactivated.</p>\\n"},{"id":"55d3d187-c3fe-1426-1ee3-48d0ab513034","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">interface</span> CanDeactivate&lt;T&gt; {\\n  canDeactivate(component: T, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState?: RouterStateSnapshot): Observable&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt; | <span class=\\"hljs-built_in\\">Promise</span>&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt; | <span class=\\"hljs-built_in\\">boolean</span>\\n}</code></pre>\\n"},{"id":"3c0a97b7-c5eb-f3b2-27f4-1aa008e44a88","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"20d1c092-a84c-9dfb-4fdc-f17dd3ae5c0b","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> UserToken {}\\n<span class=\\"hljs-keyword\\">class</span> Permissions {\\n  canDeactivate(user: UserToken, id: <span class=\\"hljs-built_in\\">string</span>): <span class=\\"hljs-built_in\\">boolean</span> {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>;\\n  }\\n}\\n\\n<span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">class</span> CanDeactivateTeam <span class=\\"hljs-keyword\\">implements</span> CanDeactivate&lt;TeamComponent&gt; {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">private</span> permissions: Permissions, <span class=\\"hljs-keyword\\">private</span> currentUser: UserToken</span>) {}\\n\\n  canDeactivate(\\n    component: TeamComponent,\\n    currentRoute: ActivatedRouteSnapshot,\\n    currentState: RouterStateSnapshot,\\n    nextState: RouterStateSnapshot\\n  ): Observable&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt;|<span class=\\"hljs-built_in\\">Promise</span>&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt;|<span class=\\"hljs-built_in\\">boolean</span> {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">this</span>.permissions.canDeactivate(<span class=\\"hljs-built_in\\">this</span>.currentUser, route.params.id);\\n  }\\n}\\n\\n<span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forRoot([\\n      {\\n        path: <span class=\\"hljs-string\\">&#x27;team/:id&#x27;</span>,\\n        component: TeamCmp,\\n        canDeactivate: [CanDeactivateTeam]\\n      }\\n    ])\\n  ],\\n  providers: [CanDeactivateTeam, UserToken, Permissions]\\n})\\n<span class=\\"hljs-keyword\\">class</span> AppModule {}</code></pre>\\n"},{"id":"1be66991-13b7-2aaf-b9fd-f69223f0f3f6","type":"text","text":"<p>You can alternatively provide a function with the <code>canDeactivate</code> signature:</p>\\n"},{"id":"86935bbc-7318-8d72-90d6-b0086ee89180","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forRoot([\\n      {\\n        path: <span class=\\"hljs-string\\">&#x27;team/:id&#x27;</span>,\\n        component: TeamCmp,\\n        canDeactivate: [<span class=\\"hljs-string\\">&#x27;canDeactivateTeam&#x27;</span>]\\n      }\\n    ])\\n  ],\\n  providers: [\\n    {\\n      provide: <span class=\\"hljs-string\\">&#x27;canDeactivateTeam&#x27;</span>,\\n      useValue: <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">component: TeamComponent, currentRoute: ActivatedRouteSnapshot, currentState:\\nRouterStateSnapshot, nextState: RouterStateSnapshot</span>) =&gt;</span> <span class=\\"hljs-literal\\">true</span>\\n    }\\n  ]\\n})\\n<span class=\\"hljs-keyword\\">class</span> AppModule {}</code></pre>\\n"}],"title":"CanDeactivate interface","url":"candeactivate-interface"},{"id":"c26dbe4a-381e-e93f-0448-ece85087ff9e","entries":[{"id":"820b923d-b898-85e2-4157-246dd730e910","type":"text","text":"<p>Interface that class can implement to be a data provider.</p>\\n"},{"id":"9fa5c0d3-15c7-8e89-bcec-60f700463e09","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">interface</span> Resolve&lt;T&gt; {\\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable&lt;T&gt; | <span class=\\"hljs-built_in\\">Promise</span>&lt;T&gt; | T\\n}</code></pre>\\n"},{"id":"32892269-2f46-80bc-1a4d-6a17ced2d1ef","type":"tutorials","links":[{"label":"Resolving route data in Angular by thoughtram","url":"https://blog.thoughtram.io/angular/2016/10/10/resolving-route-data-in-angular-2.html","lang":"en"},{"label":"Angular Router: Route Resolvers","url":"https://alligator.io/angular/route-resolvers/","lang":"en"}]},{"id":"4c073feb-710d-f1f0-a54f-786d6716334b","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"637e2780-733c-6599-b7bb-05d6f75762b6","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> Backend {\\n  fetchTeam(id: <span class=\\"hljs-built_in\\">string</span>) {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">&#x27;someTeam&#x27;</span>;\\n  }\\n}\\n\\n<span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">class</span> TeamResolver <span class=\\"hljs-keyword\\">implements</span> Resolve&lt;Team&gt; {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">private</span> backend: Backend</span>) {}\\n\\n  resolve(\\n    route: ActivatedRouteSnapshot,\\n    state: RouterStateSnapshot\\n  ): Observable&lt;<span class=\\"hljs-built_in\\">any</span>&gt;|<span class=\\"hljs-built_in\\">Promise</span>&lt;<span class=\\"hljs-built_in\\">any</span>&gt;|<span class=\\"hljs-built_in\\">any</span> {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">this</span>.backend.fetchTeam(route.params.id);\\n  }\\n}\\n\\n<span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forRoot([\\n      {\\n        path: <span class=\\"hljs-string\\">&#x27;team/:id&#x27;</span>,\\n        component: TeamCmp,\\n        resolve: {\\n          team: TeamResolver\\n        }\\n      }\\n    ])\\n  ],\\n  providers: [TeamResolver]\\n})\\n<span class=\\"hljs-keyword\\">class</span> AppModule {}</code></pre>\\n"},{"id":"ed4f0703-5122-378f-0518-e5583116a0ae","type":"text","text":"<p>You can alternatively provide a function with the <code>resolve</code> signature:</p>\\n"},{"id":"09675de3-919a-f000-c6e7-dc0f14984dc0","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forRoot([\\n      {\\n        path: <span class=\\"hljs-string\\">&#x27;team/:id&#x27;</span>,\\n        component: TeamCmp,\\n        resolve: {\\n          team: <span class=\\"hljs-string\\">&#x27;teamResolver&#x27;</span>\\n        }\\n      }\\n    ])\\n  ],\\n  providers: [\\n    {\\n      provide: <span class=\\"hljs-string\\">&#x27;teamResolver&#x27;</span>,\\n      useValue: <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">route: ActivatedRouteSnapshot, state: RouterStateSnapshot</span>) =&gt;</span> <span class=\\"hljs-string\\">&#x27;team&#x27;</span>\\n    }\\n  ]\\n})\\n<span class=\\"hljs-keyword\\">class</span> AppModule {}</code></pre>\\n"}],"title":"Resolve interface","url":"resolve-interface"},{"id":"34feaca5-5bb3-d1ea-c09b-67eddfe44fd2","entries":[{"id":"acba529a-0273-8944-e848-335423c89ebd","type":"text","text":"<p>Interface that a class can implement to be a guard deciding if a children can be loaded.</p>\\n"},{"id":"ce6ffa2b-461b-fd3f-1b88-f5e26ecb86fd","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">interface</span> CanLoad {\\n  canLoad(route: Route, segments: UrlSegment[]): \\n    Observable&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt;|<span class=\\"hljs-built_in\\">Promise</span>&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt;|<span class=\\"hljs-built_in\\">boolean</span>;\\n}</code></pre>\\n"},{"id":"870d284b-9f3d-b70d-47a7-1cb2ea941fc0","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"9e655086-5d67-0236-42e9-18ddf82720e1","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">class</span> UserToken {}\\n<span class=\\"hljs-keyword\\">class</span> Permissions {\\n  canLoadChildren(user: UserToken, id: <span class=\\"hljs-built_in\\">string</span>, segments: UrlSegment[]): <span class=\\"hljs-built_in\\">boolean</span> {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>;\\n  }\\n}\\n\\n<span class=\\"hljs-meta\\">@Injectable</span>()\\n<span class=\\"hljs-keyword\\">class</span> CanLoadTeamSection <span class=\\"hljs-keyword\\">implements</span> CanLoad {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">private</span> permissions: Permissions, <span class=\\"hljs-keyword\\">private</span> currentUser: UserToken</span>) {}\\n\\n  canLoad(route: Route, segments: UrlSegment[]): Observable&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt;|<span class=\\"hljs-built_in\\">Promise</span>&lt;<span class=\\"hljs-built_in\\">boolean</span>&gt;|<span class=\\"hljs-built_in\\">boolean</span> {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">this</span>.permissions.canLoadChildren(<span class=\\"hljs-built_in\\">this</span>.currentUser, route, segments);\\n  }\\n}\\n\\n<span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forRoot([\\n      {\\n        path: <span class=\\"hljs-string\\">&#x27;team/:id&#x27;</span>,\\n        component: TeamCmp,\\n        loadChildren: <span class=\\"hljs-string\\">&#x27;team.js&#x27;</span>,\\n        canLoad: [CanLoadTeamSection]\\n      }\\n    ])\\n  ],\\n  providers: [CanLoadTeamSection, UserToken, Permissions]\\n})\\n<span class=\\"hljs-keyword\\">class</span> AppModule {}</code></pre>\\n"},{"id":"0dcd781a-ee16-f0d6-9643-b674b93fd3cf","type":"text","text":"<p>You can alternatively provide a function with the <code>canLoad</code> signature:</p>\\n"},{"id":"6203ae26-3f3e-b100-fcab-a5d68f413a13","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@NgModule</span>({\\n  imports: [\\n    RouterModule.forRoot([\\n      {\\n        path: <span class=\\"hljs-string\\">&#x27;team/:id&#x27;</span>,\\n        component: TeamCmp,\\n        loadChildren: <span class=\\"hljs-string\\">&#x27;team.js&#x27;</span>,\\n        canLoad: [<span class=\\"hljs-string\\">&#x27;canLoadTeamSection&#x27;</span>]\\n      }\\n    ])\\n  ],\\n  providers: [\\n    {\\n      provide: <span class=\\"hljs-string\\">&#x27;canLoadTeamSection&#x27;</span>,\\n      useValue: <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">route: Route, segments: UrlSegment[]</span>) =&gt;</span> <span class=\\"hljs-literal\\">true</span>,\\n    }\\n  ]\\n})\\n<span class=\\"hljs-keyword\\">class</span> AppModule {}</code></pre>\\n"}],"title":"CanLoad interface","url":"canload-interface"},{"id":"12ef177f-35ba-cb7c-b108-787f6daff5d3","entries":[{"id":"bf587ad8-7759-d210-a551-fb49d6378338","type":"text","text":"<p>Provides the navigation and url manipulation capabilities.</p>\\n"},{"id":"525e0caa-c83d-7a03-f03a-c3457be83142","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"c25e19ad-446e-38f3-1a92-62e66f52228e","type":"text","text":"<p>Imperative navigation:</p>\\n"},{"id":"9cd5039e-e970-d380-1e1d-f9c718e51c62","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">private</span> router: Router</span>) {\\n  }\\n\\n  navigateToHome() {\\n    <span class=\\"hljs-built_in\\">this</span>.router.navigate(<span class=\\"hljs-string\\">&#x27;/home&#x27;</span>);\\n  }\\n}</code></pre>\\n"},{"id":"05b413e0-65c9-fa74-5bb2-c0549ee8748c","type":"text","text":"<h2 id=\\"interface\\">Interface</h2>\\n"},{"id":"40729049-a8fd-25bb-a906-db2c4c4a6482","type":"toc"},{"id":"5b0dc9c1-3d7f-88df-f5e3-2aca5951dfdb","type":"interface-option","head":"config","description":"[Routes configuration](../route-interface).","name":"config","headId":"config","interface":"config: Routes"},{"id":"c5eba1ca-2ac8-02df-9f82-6d5d837432d7","type":"interface-option","head":"createUrlTree","description":"Applies an array of commands to the current url tree and creates a new url tree.","interface":"createUrlTree(commands: any[], navigationExtras: NavigationExtras = {}): UrlTree","name":"createUrlTree","headId":"createUrlTree"},{"id":"6d449d67-ab8e-e0a6-b082-2adb7afb87f1","type":"interface-option","head":"dispose","description":"Disposes of the router.","interface":"dispose(): void","name":"dispose","headId":"dispose"},{"id":"ba98a086-b473-f09e-b925-6d547dedfb05","type":"interface-option","head":"errorHandler","description":"Error handler that is invoked when a navigation errors.","interface":"errorHandler: ErrorHandler","name":"errorHandler","headId":"errorHandler"},{"id":"fddfed72-c594-33b7-447f-001d7980b31a","type":"interface-option","head":"events","description":"`Observable` that provides all routing events.","interface":"events: Observable<Event>","name":"events","headId":"events"},{"id":"6947af46-13c1-e143-3d32-e29fba72a200","type":"interface-option","name":"getCurrentNavigation","head":"getCurrentNavigation","headId":"getCurrentNavigation","interface":"getCurrentNavigation(): Navigation|null","description":"The current Navigation object if one exists "},{"id":"0d46437d-3eef-a01e-6218-bd8087c2561b","type":"interface-option","head":"initialNavigation","description":"Sets up the location change listener and performs the initial navigation.","interface":"initialNavigation(): void","name":"initialNavigation","headId":"initialNavigation"},{"id":"01366334-1a14-9b22-3507-9b9efc6bccfb","type":"interface-option","head":"isActive","description":"Returns whether the url is activated.","interface":"isActive(url: string|UrlTree, exact: boolean): boolean","name":"isActive","headId":"isActive"},{"id":"68acd81f-0ce4-ffbc-8fc8-1841d7c176c8","type":"interface-option","head":"malformedUriErrorHandler","description":"Malformed uri error handler is invoked when `Router.parseUrl(url)` throws an error due to containing an invalid character. The most common case would be a `%` sign that\'s not encoded and is not part of a percent encoded sequence.","interface":"malformedUriErrorHandler: (error: URIError, urlSerializer: UrlSerializer,\\n       url: string) => UrlTree","name":"malformedUriErrorHandler","headId":"malformedUriErrorHandler"},{"id":"0407f3c2-b964-522b-d874-6d244da90bf3","type":"interface-option","head":"navigate","description":"Navigate based on the provided array of commands and a starting point. If no starting route is provided, the navigation is absolute.","interface":"navigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}): Promise<boolean>","name":"navigate","headId":"navigate","showAdditional":true,"additional":"Returns a `Promise` that:\\n\\n* resolves to `true` when navigation succeeds,\\n* resolves to `false` when navigation fails,\\n* is rejected when an error happens.\\n\\n#### Example\\n\\n```typescript\\nrouter.navigate([\'team\', 33, \'user\', 11], {relativeTo: route});\\n\\n// Navigate without updating the URL\\nrouter.navigate([\'team\', 33, \'user\', 11], {relativeTo: route, skipLocationChange: true});\\n```\\n\\nThe first parameter of `navigate()` is a delta to be applied to the current URL or the one provided in the `relativeTo` property of the second parameter (the [NavigationExtras](../navigationextras))."},{"id":"6a479b08-707e-18f1-3aed-e085e38e333e","type":"interface-option","head":"navigateByUrl","description":"Navigate based on the provided url. This navigation is always absolute.","interface":"navigateByUrl(url: string|UrlTree, extras: NavigationExtras = {skipLocationChange: false}): Promise<boolean>","name":"navigateByUrl","headId":"navigateByUrl","showAdditional":true,"additional":"Returns a `Promise` that:\\n\\n* resolves to `true` when navigation succeeds,\\n* resolves to `false` when navigation fails,\\n* is rejected when an error happens.\\n\\n#### Example\\n\\n```typescript\\nrouter.navigateByUrl(\\"/team/33/user/11\\");\\n\\n// Navigate without updating the URL\\nrouter.navigateByUrl(\\"/team/33/user/11\\", { skipLocationChange: true });\\n```\\n\\nSince `navigateByUrl()` takes an absolute URL as the first parameter, it will not apply any delta to the current URL and ignores any properties in the second parameter (the [`NavigationExtras`](../extraoptions-interface) that would change the provided URL."},{"id":"49c8536a-c2c6-241e-5722-43f6f1715d58","type":"interface-option","head":"navigated","description":"Indicates if at least one navigation happened.","interface":"navigated: boolean","name":"navigated","headId":"navigated"},{"id":"866f71bd-ef19-cc94-f8b6-cbc068fcbab8","type":"interface-option","head":"onSameUrlNavigation","description":"Define what the router should do if it receives a navigation request to the current URL.","interface":"onSameUrlNavigation: \'reload\'|\'ignore\'","name":"onSameUrlNavigation","headId":"onSameUrlNavigation"},{"id":"800c9b75-f740-f834-ccca-0fb37f2ae77b","type":"interface-option","head":"paramsInheritanceStrategy","description":"Defines how the router merges params, data and resolved data from parent to child routes. [More info in the configuration section](../extraoptions-interface#paramsInheritanceStrategy).","interface":"paramsInheritanceStrategy: \'emptyOnly\'|\'always\'","name":"paramsInheritanceStrategy","headId":"paramsInheritanceStrategy"},{"id":"07e647a9-8d40-b75c-bf8d-dede5d26e80b","type":"interface-option","head":"parseUrl","description":"Parses a string into a `UrlTree`.","interface":"parseUrl(url: string): UrlTree","name":"parseUrl","headId":"parseUrl"},{"id":"d4c992f3-0186-022f-00b1-0a64d0314b1f","type":"interface-option","name":"relativeLinkResolution","head":"relativeLinkResolution","headId":"relativeLinkResolution","interface":"relativeLinkResolution: \'legacy\'|\'corrected\'","description":"See {@link RouterModule} for more information."},{"id":"12d71a6f-f03f-98cb-6865-cb9120b92a3d","type":"interface-option","head":"resetConfig","description":"Resets the configuration used for navigation and generating links.","interface":"resetConfig(config: Routes): void","name":"resetConfig","headId":"resetConfig"},{"id":"d0a726fd-0a9f-bfd5-a144-553332482aeb","type":"interface-option","head":"routeReuseStrategy","description":"-","interface":"routeReuseStrategy: RouteReuseStrategy","name":"routeReuseStrategy","headId":"routeReuseStrategy"},{"id":"485c9c80-70bb-528f-0280-d65373b598d3","type":"interface-option","head":"routerState","description":"Contains current router state.","interface":"routerState: RouterState","name":"routerState","headId":"routerState"},{"id":"75615030-9689-0e31-3244-68f81f9ee3a1","type":"interface-option","head":"serializeUrl","description":"Serializes a `UrlTree` into a string.","interface":"serializeUrl(url: UrlTree): string","name":"serializeUrl","headId":"serializeUrl"},{"id":"23848abe-7e2c-74eb-1897-bd8def3aac35","type":"interface-option","head":"setUpLocationChangeListener","description":"Sets up the location change listener.","interface":"setUpLocationChangeListener(): void","name":"setUpLocationChangeListener","headId":"setUpLocationChangeListener"},{"id":"68bb5a94-4f3d-d6d6-3242-81269c1b1f04","type":"interface-option","head":"url","description":"The current url.","interface":"get url(): string","name":"url","headId":"url"},{"id":"8acd6ebf-6acd-b1ce-c605-8cf4bcf7815b","type":"interface-option","head":"urlHandlingStrategy","description":"Extracts and merges URLs. Used for AngularJS to Angular migrations.","interface":"urlHandlingStrategy: UrlHandlingStrategy","name":"urlHandlingStrategy","headId":"urlHandlingStrategy"},{"id":"f3ef8051-855b-9580-226a-cd15fd7ddcef","type":"interface-option","head":"urlUpdateStrategy","description":"Defines when the router updates the browser URL. [More info in the configuration section](../extraoptions-interface#urlUpdateStrategy).","interface":"urlUpdateStrategy: \'deferred\'|\'eager\'","name":"urlUpdateStrategy","headId":"urlUpdateStrategy"}],"title":"Router","url":"router","generationType":"interface-options","generationFile":"router/src/router.ts","generationName":"Router","generationStartLine":291,"generationEndLine":1126},{"id":"c9e70793-1acd-f124-03c1-150f8f918b4d","entries":[{"id":"0849746f-4c1d-3d96-236b-e100a488e844","type":"text","text":"<p>Represents the extra options used during navigation.</p>\\n"},{"id":"cbacaccd-bed7-62ae-a797-e26efb189f8d","type":"text","text":"<h2 id=\\"properties\\">Properties</h2>\\n"},{"id":"c25b2068-5d33-7212-0281-1e0ec07c9896","type":"toc"},{"id":"6dd2334a-bb11-a6c4-1f68-c3add397c3d9","type":"interface-option","name":"fragment","head":"fragment","headId":"fragment","interface":"fragment?: string","description":"Sets the hash fragment for the URL.","showAdditional":true,"additional":"```\\n// Navigate to /results#top\\nthis.router.navigate([\'/results\'], { fragment: \'top\' });\\n```"},{"id":"19a3244c-c442-753d-6dc2-c86b3627cfcc","type":"interface-option","name":"preserveFragment","head":"preserveFragment","headId":"preserveFragment","interface":"preserveFragment?: boolean","description":"Preserves the fragment for the next navigation.","showAdditional":true,"additional":"```\\n// Preserve fragment from /results#top to /view#top\\nthis.router.navigate([\'/view\'], { preserveFragment: true });\\n```"},{"id":"97b0929c-87d4-c511-0783-a1399da68e2d","type":"interface-option","name":"preserveQueryParams","head":"preserveQueryParams","headId":"preserveQueryParams","interface":"preserveQueryParams?: boolean","description":"Preserves the query parameters for the next navigation.\\n\\nDeprecated, use `queryParamsHandling` instead."},{"id":"9e7a7be6-3246-5535-e7c6-df2df8fa58ae","type":"interface-option","name":"queryParams","head":"queryParams","headId":"queryParams","interface":"queryParams?: Params|null","description":"Sets query parameters to the URL.\\n","showAdditional":true,"additional":"```\\n// Navigate to /results?page=1\\nthis.router.navigate([\'/results\'], { queryParams: { page: 1 } });\\n```"},{"id":"7f2be572-5398-80b0-8573-757a98fc86aa","type":"interface-option","name":"queryParamsHandling","head":"queryParamsHandling","headId":"queryParamsHandling","interface":"queryParamsHandling?: QueryParamsHandling|null","description":"Config strategy to handle the query parameters for the next navigation.\\n","showAdditional":true,"additional":"```\\n// from /results?page=1 to /view?page=1&page=2\\nthis.router.navigate([\'/view\'], { queryParams: { page: 2 },  queryParamsHandling: \\"merge\\" });\\n```"},{"id":"3873a85a-d10b-2065-6b39-31c676a87036","type":"interface-option","name":"relativeTo","head":"relativeTo","headId":"relativeTo","interface":"relativeTo?: ActivatedRoute|null","description":"Enables relative navigation from the current ActivatedRoute.\\n","showAdditional":true,"additional":"\\nConfiguration:\\n\\n```\\n[{\\n  path: \'parent\',\\n  component: ParentComponent,\\n  children: [{\\n    path: \'list\',\\n    component: ListComponent\\n  },{\\n    path: \'child\',\\n    component: ChildComponent\\n  }]\\n}]\\n```\\n\\nNavigate to list route from child route:\\n\\n```\\n @Component({...})\\n class ChildComponent {\\n  constructor(private router: Router, private route: ActivatedRoute) {}\\n\\n  go() {\\n    this.router.navigate([\'../list\'], { relativeTo: this.route });\\n  }\\n}\\n```"},{"id":"f37cb5dc-eefc-f550-3415-04f70b56922d","type":"interface-option","name":"replaceUrl","head":"replaceUrl","headId":"replaceUrl","interface":"replaceUrl?: boolean","description":"Navigates while replacing the current state in history.\\n","showAdditional":true,"additional":"```\\n// Navigate to /view\\nthis.router.navigate([\'/view\'], { replaceUrl: true });\\n```"},{"id":"9c2685b6-1fe0-99f7-b3e2-6384a944aacc","type":"interface-option","name":"skipLocationChange","head":"skipLocationChange","headId":"skipLocationChange","interface":"skipLocationChange?: boolean","description":"Navigates without pushing a new state into history.\\n","showAdditional":true,"additional":"```\\n// Navigate silently to /view\\nthis.router.navigate([\'/view\'], { skipLocationChange: true });\\n```"},{"id":"addb46cb-6278-d343-5415-dba96df00f40","type":"interface-option","name":"state","head":"state","headId":"state","interface":"state?: {[k: string]: any}","description":"State passed to any navigation.","showAdditional":true,"additional":"This value will be accessible through the `extras` object\\nreturned from `router.getCurrentNavigation()` while a navigation is executing. Once a\\nnavigation completes, this value will be written to `history.state` when the `location.go`\\nor `location.replaceState` method is called before activating of this route. Note that\\n`history.state` will not pass an object equality test because the `navigationId` will be\\nadded to the state before being written.\\n\\nWhile `history.state` can accept any type of value, because the router adds the `navigationId`\\non each navigation, the `state` must always be an object."}],"title":"NavigationExtras\\n","url":"navigationextras","generationType":"interface-options","generationFile":"router/src/router.ts","generationName":"NavigationExtras","generationStartLine":43,"generationEndLine":161},{"id":"19b8edde-421a-5743-68c8-f1fb4ab8f8db","entries":[{"id":"9eff8c12-9a51-57a5-fa11-443646fa9e0d","type":"text","text":"<p>During each navigation, the <code>Router</code> emits navigation events through the <code>Router.events</code> property. These events range from when the navigation starts and ends to many points in between.</p>\\n"},{"id":"bce7dde9-8f89-f9da-4f9a-a6c569bb247d","type":"text","text":"<ul>\\n<li><code>NavigationStart</code> \u2014 An event triggered when navigation starts.</li>\\n<li><code>RouteConfigLoadStart</code> \u2014 An event triggered before the Router lazy loads a route configuration.</li>\\n<li><code>RouteConfigLoadEnd</code> \u2014 An event triggered after a route has been lazy loaded.</li>\\n<li><code>RoutesRecognized</code> \u2014 An event triggered when the Router parses the URL and the routes are recognized.</li>\\n<li><code>GuardsCheckStart</code> \u2014 An event triggered when the Router begins the Guards phase of routing.</li>\\n<li><code>ChildActivationStart</code> \u2014 An event triggered when the Router begins activating a route&#39;s children.</li>\\n<li><code>ActivationStart</code> \u2014 An event triggered when the Router begins activating a route.</li>\\n<li><code>GuardsCheckEnd</code> \u2014 An event triggered when the Router finishes the Guards phase of routing successfully.</li>\\n<li><code>ResolveStart</code> \u2014 An event triggered when the Router begins the Resolve phase of routing.</li>\\n<li><code>ResolveEnd</code> \u2014 An event triggered when the Router finishes the Resolve phase of routing successfuly.</li>\\n<li><code>ChildActivationEnd</code> \u2014 An event triggered when the Router finishes activating a route&#39;s children.</li>\\n<li><code>ActivationEnd</code> \u2014 An event triggered when the Router finishes activating a route.</li>\\n<li><code>NavigationEnd</code> \u2014 An event triggered when navigation ends successfully.</li>\\n<li><code>NavigationCancel</code> \u2014 An event triggered when navigation is canceled. This is due to a Route Guard returning false during navigation.</li>\\n<li><code>NavigationError</code> \u2014 An event triggered when navigation fails due to an unexpected error.</li>\\n<li><code>Scroll</code> \u2014  An event that represents a scrolling event.</li>\\n</ul>\\n"},{"id":"72f5a3ae-1e0f-6fd3-cf38-429ef1058bf7","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"cd0f4f0a-d39a-0df6-86d3-a55b2c13aa26","type":"text","text":"<p>Subscribe on <code>NavigationEnd</code> event:</p>\\n"},{"id":"e4052397-c26e-20fb-1b63-5a7d5f113570","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">class</span> AppComponent {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\"><span class=\\"hljs-keyword\\">private</span> router: Router</span>) {\\n  }\\n\\n  ngOnInit() {\\n    <span class=\\"hljs-built_in\\">this</span>.router.events\\n      .pipe(filter(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">event</span> =&gt;</span> event <span class=\\"hljs-keyword\\">instanceof</span> NavigationEnd))\\n      .subscribe(<span class=\\"hljs-function\\">() =&gt;</span> {\\n        ...\\n      });\\n    }\\n  }</code></pre>\\n"}],"title":"Events","url":"events"},{"id":"a64c011b-9960-955d-1a88-54c3a2298972","entries":[{"id":"83290014-db38-50b6-0717-b77562a5cf4a","type":"text","text":"<p>Represents the parsed URL.</p>\\n<p>Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\\nserialized tree.</p>\\n<p><code>UrlTree</code> is a data structure that provides a lot of affordances in dealing with URLs.</p>\\n"},{"id":"d9abf1a8-68fb-fcb7-b333-aa506d2bdb6c","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"9e7d41fd-f812-a345-a00d-4bb5b14aa761","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({templateUrl:<span class=\\"hljs-string\\">&#x27;template.html&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\">router: Router</span>) {\\n    <span class=\\"hljs-keyword\\">const</span> tree: UrlTree =\\n      router.parseUrl(<span class=\\"hljs-string\\">&#x27;/team/33/(user/victor//support:help)?debug=true#fragment&#x27;</span>);\\n    <span class=\\"hljs-keyword\\">const</span> f = tree.fragment; <span class=\\"hljs-comment\\">// return &#x27;fragment&#x27;</span>\\n    <span class=\\"hljs-keyword\\">const</span> q = tree.queryParams; <span class=\\"hljs-comment\\">// returns {debug: &#x27;true&#x27;}</span>\\n    <span class=\\"hljs-keyword\\">const</span> g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\\n    <span class=\\"hljs-keyword\\">const</span> s: UrlSegment[] = g.segments; <span class=\\"hljs-comment\\">// returns 2 segments &#x27;team&#x27; and &#x27;33&#x27;</span>\\n    g.children[PRIMARY_OUTLET].segments; <span class=\\"hljs-comment\\">// returns 2 segments &#x27;user&#x27; and &#x27;victor&#x27;</span>\\n    g.children[<span class=\\"hljs-string\\">&#x27;support&#x27;</span>].segments; <span class=\\"hljs-comment\\">// return 1 segment &#x27;help&#x27;</span>\\n  }\\n}</code></pre>\\n"}],"title":"UrlTree","url":"urltree"},{"id":"3551861a-0fcf-dc05-dd75-3ba1afb07174","entries":[{"id":"a9ca3039-903b-81dd-a4a5-6360f3bc616a","type":"text","text":"<p>Represents a single URL segment.</p>\\n<p>A <code>UrlSegment</code> is a part of a URL between the two slashes. It contains a path and the matrix\\nparameters associated with the segment.</p>\\n"},{"id":"fdfb6498-94df-8524-20b5-1761514aef29","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"9d817103-ab30-c51e-3160-02073570cca2","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({templateUrl:<span class=\\"hljs-string\\">&#x27;template.html&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\">router: Router</span>) {\\n    <span class=\\"hljs-keyword\\">const</span> tree: UrlTree = router.parseUrl(<span class=\\"hljs-string\\">&#x27;/team;id=33&#x27;</span>);\\n    <span class=\\"hljs-keyword\\">const</span> g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\\n    <span class=\\"hljs-keyword\\">const</span> s: UrlSegment[] = g.segments;\\n    s[<span class=\\"hljs-number\\">0</span>].path; <span class=\\"hljs-comment\\">// returns &#x27;team&#x27;</span>\\n    s[<span class=\\"hljs-number\\">0</span>].parameters; <span class=\\"hljs-comment\\">// returns {id: 33}</span>\\n  }\\n}</code></pre>\\n"}],"title":"UrlSegment","url":"urlsegment"},{"id":"04bd79cb-1299-ec9d-2e02-1913eae7eb3a","entries":[{"id":"41a4ae8f-8910-8e04-f7ae-1f6fad8ab9d1","type":"text","text":"<p>Router uses <code>UrlMatcher</code> to decide that <code>Route.path</code> from configuration is fit to a current navigation URL. Router splits <code>url</code> to <a href=\\"../urlsegment\\">segments</a> and calls <code>UrlMatcher</code> function.</p>\\n"},{"id":"6bc14f5e-a6a9-0941-559a-9500b0175f92","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">type</span> UrlMatcher = <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">segments: UrlSegment[], group: UrlSegmentGroup, route: Route</span>) =&gt;</span> UrlMatchResult;</code></pre>\\n"},{"id":"4f6d9cf5-67ed-49c3-b6a9-c1f2cb0a1986","type":"text","text":"<p>A custom URL matcher can be provided when a combination of <code>path</code> and <code>pathMatch</code> isn&#39;t expressive enough.</p>\\n<p>For instance, the following matcher matches html files.</p>\\n"},{"id":"1b3c1c0c-0bc4-33fa-9cba-5d874d62db63","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">htmlFiles</span>(<span class=\\"hljs-params\\">url: UrlSegment[]</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> url.length === <span class=\\"hljs-number\\">1</span> &amp;&amp; url[<span class=\\"hljs-number\\">0</span>].path.endsWith(<span class=\\"hljs-string\\">&#x27;.html&#x27;</span>) ? ({consumed: url}) : <span class=\\"hljs-literal\\">null</span>;\\n}\\n\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">const</span> routes = [{ matcher: htmlFiles, component: AnyComponent }];</code></pre>\\n"},{"id":"e7dde42a-7d13-8165-8653-2ec444b817c9","type":"text","text":"<h2 id=\\"defaulturlmatcher\\">defaultUrlMatcher</h2>\\n<p>If <code>Route.urlMatcher</code> is not defined, will be used <code>defaultUrlMatcher</code>. </p>\\n<p><code>defaultUrlMatcher</code> splits <code>path</code> to segments usign delimeter <code>/</code>. If segment starts from <code>:</code> it marks as parameter with the same name (except <code>:</code> at beginning).</p>\\n"},{"id":"f798aae3-8ab4-637b-1657-1571d499656c","type":"text","text":"<table>\\n<thead>\\n<tr>\\n<th>Path</th>\\n<th>URL</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>blog</code></td>\\n<td>/blog</td>\\n</tr>\\n<tr>\\n<td><code>blog/post</code></td>\\n<td>/blog/post</td>\\n</tr>\\n<tr>\\n<td><code>blog/post/:id</code></td>\\n<td>/blog/post/123</td>\\n</tr>\\n</tbody></table>\\n"},{"id":"1b9d13ed-e174-a87c-49fb-d2ef661c5a5a","type":"tutorials","links":[{"label":"The Powerful URL Matching Engine of Angular Router","url":"https://vsavkin.com/the-powerful-url-matching-engine-of-angular-router-775dad593b03","lang":"en"}]}],"title":"UrlMatcher","url":"urlmatcher"},{"id":"64a21c90-ee95-6f01-c2d0-5761162357c9","entries":[{"id":"3db82e7e-5aba-b8b7-151f-85cd3de886b8","type":"text","text":"<p>Contains the information about a route associated with a component loaded in an outlet. An <code>ActivatedRoute</code> can also be used to traverse the router state tree.</p>\\n"},{"id":"ea77c04d-1a76-756e-fcd4-78adee4f4750","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"5d6a452c-fd8a-75a7-3ea1-6c1a99bdda36","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({...})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\">route: ActivatedRoute</span>) {\\n    <span class=\\"hljs-keyword\\">const</span> id: Observable&lt;<span class=\\"hljs-built_in\\">string</span>&gt; = route.params.map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">p</span> =&gt;</span> p.id);\\n    <span class=\\"hljs-keyword\\">const</span> url: Observable&lt;<span class=\\"hljs-built_in\\">string</span>&gt; = route.url.map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">segments</span> =&gt;</span> segments.join(<span class=\\"hljs-string\\">&#x27;&#x27;</span>));\\n    <span class=\\"hljs-comment\\">// route.data includes both `data` and `resolve`</span>\\n    <span class=\\"hljs-keyword\\">const</span> user = route.data.map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">d</span> =&gt;</span> d.user);\\n  }\\n}</code></pre>\\n"},{"id":"bafe78a0-de43-45d8-b8ce-3557bc32fb05","type":"tutorials","links":[{"label":"Angular Router: Understanding Router State","url":"https://vsavkin.com/angular-router-understanding-router-state-7b5b95a12eab","lang":"en"}]},{"id":"f10730d0-3352-5712-dcd8-e2c3d1dbe78a","type":"text","text":"<h2 id=\\"properties\\">Properties</h2>\\n"},{"id":"4ee499be-af40-4791-53a1-ade46e9a7ffd","type":"toc"},{"id":"c3c9604a-d2f1-29d2-4f1c-6a13c53c3629","type":"interface-option","head":"children","description":"The children of this route in the router state tree.","interface":"get children(): ActivatedRoute[]","name":"children","headId":"children"},{"id":"d035c588-3f07-b4d0-8c59-2dcaaa18b665","type":"interface-option","head":"component","description":"The component of the route.","interface":"component: Type<any> | string | null","name":"component","headId":"component"},{"id":"9b6db128-5eef-641d-8365-8d1572e5ab05","type":"interface-option","head":"data","description":"An observable of the static and resolved data of this route.","interface":"data: Observable<Data>","name":"data","headId":"data"},{"id":"aebd0d28-276c-bd1c-7604-b985e64bde33","type":"interface-option","head":"firstChild","description":"The first child of this route in the router state tree.","interface":"get firstChild(): ActivatedRoute|null","name":"firstChild","headId":"firstChild"},{"id":"5c4e34c6-4900-f4e3-aa45-cf37d5ede01c","type":"interface-option","head":"fragment","description":"An observable of the URL fragment shared by all the routes.","interface":"fragment: Observable<string>","name":"fragment","headId":"fragment"},{"id":"bf4cb71a-c0ca-24fb-3d23-29da3e28fcae","type":"interface-option","head":"outlet","description":"The outlet name of the route.","interface":"outlet: string","name":"outlet","headId":"outlet"},{"id":"1946000a-2771-3c9f-6048-5c40af22474d","type":"interface-option","head":"paramMap","description":"TODO","interface":"get paramMap(): Observable<ParamMap>","name":"paramMap","headId":"paramMap"},{"id":"a45a01c4-b593-f921-c1b6-31beb9cb0723","type":"interface-option","head":"params","description":"An observable of the matrix parameters scoped to this route.","interface":"params: Observable<Params>","name":"params","headId":"params"},{"id":"e5377bce-b4a4-9927-d79c-9c9047e844a3","type":"interface-option","head":"parent","description":"The parent of this route in the router state tree.","interface":"get parent(): ActivatedRoute|null","name":"parent","headId":"parent"},{"id":"a6a153b3-1a64-5071-70e6-21f7c6efff75","type":"interface-option","head":"pathFromRoot","description":"The path from the root of the router state tree to this route.","interface":"get pathFromRoot(): ActivatedRoute[]","name":"pathFromRoot","headId":"pathFromRoot"},{"id":"b67ba1a6-ca69-c603-ca1d-12b2634a9fc0","type":"interface-option","head":"queryParamMap","description":"TODO","interface":"get queryParamMap(): Observable<ParamMap>","name":"queryParamMap","headId":"queryParamMap"},{"id":"b5152a2d-5d84-0e8c-ba5b-8abe2d371197","type":"interface-option","head":"queryParams","description":"An observable of the query parameters shared by all the routes.","interface":"queryParams: Observable<Params>","name":"queryParams","headId":"queryParams"},{"id":"49f43048-0e7e-2569-b548-4fdee42544d3","type":"interface-option","head":"root","description":"The root of the router state.","interface":"get root(): ActivatedRoute","name":"root","headId":"root"},{"id":"138716a7-9500-11f2-e5a4-ca90a1f10ab0","type":"interface-option","head":"routeConfig","description":"The configuration used to match this route.","interface":"get routeConfig(): Route|null","name":"routeConfig","headId":"routeConfig"},{"id":"cf244fd1-3559-a494-0ea8-7a9630f4ecff","type":"interface-option","head":"snapshot","description":"The current snapshot of this route.","interface":"snapshot: ActivatedRouteSnapshot","name":"snapshot","headId":"snapshot"},{"id":"24c28586-67dc-49d6-d09a-aba653232819","type":"interface-option","name":"toString","head":"toString","headId":"toString","interface":"toString(): string"},{"id":"8170e143-da2b-f06b-61a7-a4a36ff47cab","type":"interface-option","head":"url","description":"An observable of the URL segments matched by this route.","interface":"url: Observable<UrlSegment[]>","name":"url","headId":"url"}],"title":"ActivatedRoute","url":"activatedroute","generationType":"interface-options","generationFile":"router/src/router_state.ts","generationName":"ActivatedRoute","generationStartLine":99,"generationEndLine":174},{"id":"b78c8354-874e-d8f2-4a4a-a03ba0fe4757","entries":[{"id":"f04f8675-cb4e-c650-ff7c-4f7919ea53df","type":"text","text":"<p>Contains the information about a route associated with a component loaded in an outlet at a particular moment in time. <code>ActivatedRouteSnapshot</code> can also be used to traverse the router state tree.</p>\\n"},{"id":"1899baa6-c34b-e37e-7d51-ca72d56e3e74","type":"text","text":"<h4 id=\\"example\\">Example</h4>\\n"},{"id":"ad3e6334-ceb2-f56b-92c3-f90773f8197f","type":"text","text":"<pre><code class=\\"language-typescript\\"><span class=\\"hljs-meta\\">@Component</span>({templateUrl:<span class=\\"hljs-string\\">&#x27;./my-component.html&#x27;</span>})\\n<span class=\\"hljs-keyword\\">class</span> MyComponent {\\n  <span class=\\"hljs-keyword\\">constructor</span>(<span class=\\"hljs-params\\">route: ActivatedRoute</span>) {\\n    <span class=\\"hljs-keyword\\">const</span> id: <span class=\\"hljs-built_in\\">string</span> = route.snapshot.params.id;\\n    <span class=\\"hljs-keyword\\">const</span> url: <span class=\\"hljs-built_in\\">string</span> = route.snapshot.url.join(<span class=\\"hljs-string\\">&#x27;&#x27;</span>);\\n    <span class=\\"hljs-keyword\\">const</span> user = route.snapshot.data.user;\\n  }\\n}</code></pre>\\n"},{"id":"04c2c36b-b83f-03d5-bf28-7b2f4ec5d8cd","type":"tutorials","links":[{"label":"Angular Router: Understanding Router State","url":"https://vsavkin.com/angular-router-understanding-router-state-7b5b95a12eab","lang":"en"}]},{"id":"ead960c0-bbf1-8824-2e8b-0b02fd5b9cb6","type":"text","text":"<h2 id=\\"properties\\">Properties</h2>\\n"},{"id":"2decfb42-bf13-30d3-b719-c88eafd8491b","type":"toc"},{"id":"f6572103-9ff8-6099-11f4-ece3f9b1132a","type":"interface-option","head":"children","description":"The children of this route in the router state tree.","interface":"get children(): ActivatedRouteSnapshot[]","name":"children","headId":"children"},{"id":"1be201f9-afe2-3a37-7045-16cdf47b7a4c","type":"interface-option","head":"component","description":"The component of the route.","interface":"component: Type<any> | string | null","name":"component","headId":"component"},{"id":"1793a704-66e4-6ebf-5c10-4e1357ad2003","type":"interface-option","head":"data","description":"The static and resolved data of this route.","interface":"data: Data","name":"data","headId":"data"},{"id":"4024f7b2-3351-3fee-e709-1536775e41ac","type":"interface-option","head":"firstChild","description":"The first child of this route in the router state tree.","interface":"get firstChild(): ActivatedRouteSnapshot|null","name":"firstChild","headId":"firstChild"},{"id":"0af65b14-eac9-7cd7-1220-cce2f0475557","type":"interface-option","head":"fragment","description":"The URL fragment shared by all the routes.","interface":"fragment: string","name":"fragment","headId":"fragment"},{"id":"90fabf53-a4e1-1fd8-dfc7-730e869f7443","type":"interface-option","head":"outlet","description":"The outlet name of the route.","name":"outlet","headId":"outlet","interface":"outlet: string"},{"id":"e2be7099-1386-eb85-a0bd-e6d7097e2e0b","type":"interface-option","head":"paramMap","description":"TODO","interface":"get paramMap(): ParamMap","name":"paramMap","headId":"paramMap"},{"id":"c7a135df-3f6e-6d2f-95cb-6ec9623e9463","type":"interface-option","head":"params","description":"The matrix parameters scoped to this route.","interface":"params: Params","name":"params","headId":"params"},{"id":"fe469efa-a7c9-be84-3a76-9080abffaf8b","type":"interface-option","head":"parent","description":"The parent of this route in the router state tree.","interface":"get parent(): ActivatedRouteSnapshot|null","name":"parent","headId":"parent"},{"id":"90fcdac6-f805-1e5e-d293-9e91b42bd98c","type":"interface-option","head":"pathFromRoot","description":"The path from the root of the router state tree to this route.","interface":"get pathFromRoot(): ActivatedRouteSnapshot[]","name":"pathFromRoot","headId":"pathFromRoot"},{"id":"f2814943-3310-9ea6-6fd1-ef4f2ab5fe40","type":"interface-option","head":"queryParamMap","description":"TODO","interface":"get queryParamMap(): ParamMap","name":"queryParamMap","headId":"queryParamMap"},{"id":"a4c23384-9f31-de2c-c4d6-453730599160","type":"interface-option","head":"queryParams","description":"The query parameters shared by all the routes.","interface":"queryParams: Params","name":"queryParams","headId":"queryParams"},{"id":"03d997d6-330d-dedf-f183-c317670b4d20","type":"interface-option","head":"root","description":"The root of the router state.","interface":"get root(): ActivatedRouteSnapshot","name":"root","headId":"root"},{"id":"83500986-1caf-096e-14ef-8e0c0e384e8a","type":"interface-option","head":"routeConfig","description":"The configuration used to match this route.","interface":"routeConfig: Route|null","name":"routeConfig","headId":"routeConfig"},{"id":"acbd85f7-26e3-2c9b-b9b5-a2613abcb5e4","type":"interface-option","name":"toString","head":"toString","headId":"toString","interface":"toString(): string"},{"id":"2011cfcb-3da2-bc2f-d28c-32e746f65a72","type":"interface-option","head":"url","description":"The URL segments matched by this route.","interface":"url: UrlSegment[]","name":"url","headId":"url"}],"title":"ActivatedRouteSnapshot","url":"activatedroutesnapshot","generationType":"interface-options","generationFile":"router/src/router_state.ts","generationName":"ActivatedRouteSnapshot","generationStartLine":249,"generationEndLine":328},{"id":"554d1879-4294-9fea-d3e7-b3d654c87785","entries":[{"id":"a3f79338-c74e-9da2-9065-9a5c9ae90f94","type":"text","text":"<p>Lets you link to specific routes in your app.</p>\\n<p>Consider the following route configuration:</p>\\n<p><code>[{ path: &#39;user/:name&#39;, component: UserCmp }]</code>.</p>\\n<p>When linking to this <code>user/:name</code> route, you use the <code>RouterLink</code> directive.</p>\\n<p>If the link is <strong>static</strong>, you can use the directive as follows:</p>\\n<p><code>&lt;a routerLink=&quot;/user/bob&quot;&gt;link to user component&lt;/a&gt;</code></p>\\n<p>If you use <strong>dynamic</strong> values to generate the link, you can pass an array of path segments, followed by the params for each segment.</p>\\n<p>For instance <code>[&#39;/team&#39;, teamId, &#39;user&#39;, userName, {details: true}]</code> means that we want to generate a link to <code>/team/11/user/bob;details=true</code>.</p>\\n"},{"id":"7bb8a0e6-cd39-8525-c093-e6b5602b9b14","type":"text","text":"<p>Multiple static segments can be merged into one (e.g., <code>[&#39;/team/11/user&#39;, userName, {details: true}]</code>).</p>\\n<p>The first segment name can be prepended with <code>/</code>, <code>./</code>, or <code>../</code>:</p>\\n<ul>\\n<li>If the first segment begins with <code>/</code>, the router will look up the route from the root of the app.</li>\\n<li>If the first segment begins with <code>./</code>, or doesn&#39;t begin with a slash, the router will instead look in the children of the current activated route.</li>\\n<li>And if the first segment begins with <code>../</code>, the router will go up one level.</li>\\n</ul>\\n"},{"id":"90b5b39e-5cb1-18d0-5dd1-4c6a37177e12","type":"text","text":"<p>You can set query params and fragment as follows:</p>\\n<pre><code>&lt;a [routerLink]=&quot;[&#x27;/user/bob&#x27;]&quot; [queryParams]=&quot;{debug: true}&quot; fragment=&quot;education&quot;&gt;\\n  link to user component\\n&lt;/a&gt;</code></pre>\\n<p>RouterLink will use these to generate this link: <code>/user/bob#education?debug=true</code>.</p>\\n<p>You can also tell the directive to preserve the current query params and fragment:</p>\\n<pre><code>&lt;a [routerLink]=&quot;[&#x27;/user/bob&#x27;]&quot; [queryParams]=&quot;{debug: true}&quot; queryParamsHandling=&quot;merge&quot;&gt;\\n  link to user component\\n&lt;/a&gt;</code></pre>\\n<p>You can tell the directive to how to handle queryParams, available options are:</p>\\n<ul>\\n<li><code>&#39;merge&#39;</code>: merge the queryParams into the current queryParams</li>\\n<li><code>&#39;preserve&#39;</code>: preserve the current queryParams</li>\\n<li>default/<code>&#39;&#39;</code>: use the queryParams only</li>\\n</ul>\\n"},{"id":"0e66e75b-2939-c3a7-d08b-b8219a420f93","type":"text","text":"<p>The router link directive always treats the provided input as a delta to the current url.</p>\\n<p>For instance, if the current url is <code>/user/(box//aux:team)</code>.</p>\\n<p>Then the following link <code>&lt;a [routerLink]=&quot;[&#39;/user/jim&#39;]&quot;&gt;Jim&lt;/a&gt;</code> will generate the link\\n<code>/user/(jim//aux:team)</code>.</p>\\n"}],"title":"[routerLink] directive","url":"routerlink-directive"},{"id":"ecbfc3ef-3819-5cda-c52f-42445614bb89","entries":[{"id":"ccb3ef72-9ee4-a699-e99e-4c160dd50faa","type":"text","text":"<p>Lets you add a CSS class to an element when the link&#39;s route becomes active.</p>\\n<p>This directive lets you add a CSS class to an element when the link&#39;s route\\nbecomes active.</p>\\n<p>Consider the following example:</p>\\n<pre><code>&lt;a routerLink=&quot;/user/bob&quot; routerLinkActive=&quot;active-link&quot;&gt;Bob&lt;/a&gt;</code></pre>\\n<p>When the url is either &#39;/user&#39; or &#39;/user/bob&#39;, the active-link class will\\nbe added to the <code>a</code> tag. If the url changes, the class will be removed.</p>\\n<p>You can set more than one class, as follows:</p>\\n<pre><code>&lt;a routerLink=&quot;/user/bob&quot; routerLinkActive=&quot;class1 class2&quot;&gt;Bob&lt;/a&gt;\\n&lt;a routerLink=&quot;/user/bob&quot; [routerLinkActive]=&quot;[&#x27;class1&#x27;, &#x27;class2&#x27;]&quot;&gt;Bob&lt;/a&gt;</code></pre>\\n<p>You can configure RouterLinkActive by passing <code>exact: true</code>. This will add the classes\\nonly when the url matches the link exactly.</p>\\n<pre><code>&lt;a routerLink=&quot;/user/bob&quot; routerLinkActive=&quot;active-link&quot; [routerLinkActiveOptions]=&quot;{exact:\\ntrue}&quot;&gt;Bob&lt;/a&gt;</code></pre>\\n<p>You can assign the RouterLinkActive instance to a template variable and directly check\\nthe <code>isActive</code> status.</p>\\n<pre><code>&lt;a routerLink=&quot;/user/bob&quot; routerLinkActive #rla=&quot;routerLinkActive&quot;&gt;\\n  Bob {{ rla.isActive ? &#x27;(already open)&#x27; : &#x27;&#x27;}}\\n&lt;/a&gt;</code></pre>\\n<p>Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.</p>\\n<pre><code>&lt;div routerLinkActive=&quot;active-link&quot; [routerLinkActiveOptions]=&quot;{exact: true}&quot;&gt;\\n  &lt;a routerLink=&quot;/user/jim&quot;&gt;Jim&lt;/a&gt;\\n  &lt;a routerLink=&quot;/user/bob&quot;&gt;Bob&lt;/a&gt;\\n&lt;/div&gt;</code></pre>\\n<p>This will set the active-link class on the div tag if the url is either &#39;/user/jim&#39; or\\n&#39;/user/bob&#39;.</p>\\n"}],"title":"[routerLinkActive] directive","url":"routerlinkactive-directive"},{"id":"06270d07-ceef-81d2-e1a1-c6ba055d483e","entries":[{"id":"4fa057a1-d3d0-2feb-ddda-6bbe268bffa8","type":"text","text":"<p>Acts as a placeholder that Angular dynamically fills based on the current router state.</p>\\n<pre><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;\\n&lt;router-outlet name=&#x27;left&#x27;&gt;&lt;/router-outlet&gt;\\n&lt;router-outlet name=&#x27;right&#x27;&gt;&lt;/router-outlet&gt;</code></pre>\\n<p>A router outlet will emit an activate event any time a new component is being instantiated,\\nand a deactivate event when it is being destroyed.</p>\\n<pre><code>&lt;router-outlet\\n  (activate)=&#x27;onActivate($event)&#x27;\\n  (deactivate)=&#x27;onDeactivate($event)&#x27;&gt;&lt;/router-outlet&gt;</code></pre>\\n"},{"id":"bce80294-9f0f-7329-6abe-693f41cba1a7","type":"tutorials","links":[{"label":"Using Auxiliary Routes","url":"https://angular-2-training-book.rangle.io/handout/routing/aux-routes.html","lang":"en"},{"label":"Angular\u200a\u2014\u200aSupercharge your Router transitions using animations","url":"https://medium.com/google-developer-experts/angular-supercharge-your-router-transitions-using-new-animation-features-v4-3-3eb341ede6c8","lang":"en"}]}],"title":"router-outlet directive","url":"router-outlet-directive"}],"title":"Router","color":"#386ef3","url":"router","disabled":false,"langs":{"en":true}}],"messages":[],"title":"Angular 8","url":"v8","default":false,"githubUrl":"https://github.com/angular/angular/blob/c84c27f7f/packages"}')}}]);